
cwgamefpga.elf:     file format elf32-littlenios2
cwgamefpga.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006130 memsz 0x00006130 flags r-x
    LOAD off    0x00007150 vaddr 0x00016150 paddr 0x000162f0 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags rw-
    LOAD off    0x00007490 vaddr 0x00016490 paddr 0x00016490 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e20  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001b0  00015fa0  00015fa0  00006fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000001a0  00016150  000162f0  00007150  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  00016490  00016490  00007490  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000165c0  000165c0  000072f0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000868  00000000  00000000  00007320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000f30b  00000000  00000000  00007b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000506c  00000000  00000000  00016e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00009ee0  00000000  00000000  0001beff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000d64  00000000  00000000  00025de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002e9b  00000000  00000000  00026b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d09c  00000000  00000000  000299df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00036a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001560  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003a067  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003a06a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003a06d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003a06e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003a06f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003a073  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003a077  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003a07b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003a084  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003a08d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  0003a096  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000017  00000000  00000000  0003a0a3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00015fa0 l    d  .rodata	00000000 .rodata
00016150 l    d  .rwdata	00000000 .rwdata
00016490 l    d  .bss	00000000 .bss
000165c0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/E2_CAS/CW/Golden_Top/software/cwgamefpga_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00016007 l     O .rodata	0000002b CSWTCH.23
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_rint.c
00016034 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
00016150 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014df4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000162d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00016234 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00015de8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
000164bc g     O .bss	00000004 alt_instruction_exception_handler
00014c9c g     F .text	00000018 putchar
00015958 g     F .text	0000002c alt_main
000101bc g     F .text	00000010 led_write
000164c0 g     O .bss	00000100 alt_irq
000162f0 g       *ABS*	00000000 __flash_rwdata_start
00013598 g     F .text	00000080 .hidden __eqdf2
00010434 g     F .text	00000028 print
000165c0 g       *ABS*	00000000 __alt_heap_start
00014dec g     F .text	00000008 strtok_r
00014c4c g     F .text	00000048 printf
00015988 g     F .text	00000004 __malloc_unlock
00014d60 g     F .text	0000008c __strtok_r
0001032c g     F .text	00000028 sys_timer_isr
00010878 g     F .text	00000094 read_chars
00013618 g     F .text	000000e8 .hidden __gtdf2
000162d4 g     O .rwdata	00000004 jtag_uart
00015ed0 g     F .text	00000008 altera_nios2_gen2_irq_init
00014c04 g     F .text	0000000c __errno
00010000 g     F .entry	0000000c __reset
00015cd0 g     F .text	0000005c alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000164a8 g     O .bss	00000004 errno
000164b4 g     O .bss	00000004 alt_argv
0001e2b8 g       *ABS*	00000000 _gp
0001045c g     F .text	000000a0 generate_text
00016260 g     O .rwdata	00000030 alt_fd_list
00014c94 g     F .text	00000008 _putchar_r
00015e5c g     F .text	00000070 alt_find_dev
00015f78 g     F .text	00000028 memcpy
0001491c g     F .text	000000b8 .hidden __floatsidf
00013700 g     F .text	000000e8 .hidden __ltdf2
0001086c g     F .text	0000000c sys_timer_isr_2
00010594 g     F .text	000001d0 collect_username
00015ed8 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00015bf0 g     F .text	00000058 altera_avalon_jtag_uart_read
0001542c g     F .text	00000010 malloc
00014c10 g     F .text	0000003c _printf_r
00014b1c g     F .text	00000064 .hidden __udivsi3
00015750 g     F .text	00000048 _sbrk_r
000162d8 g     O .rwdata	00000004 alt_max_fd
00015844 g     F .text	00000090 alt_irq_register
00012378 g     F .text	000008f0 .hidden __adddf3
000162c0 g     O .rwdata	00000004 __fdlib_version
000162c4 g     O .rwdata	00000004 _global_impure_ptr
000165c0 g       *ABS*	00000000 __bss_end
00015804 g     F .text	00000040 alt_getchar
0001649c g     O .bss	00000001 cd_countdown
000164ac g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00016290 g     O .rwdata	00000028 alt_dev_null
00011fdc g     F .text	000001dc rint
00010764 g     F .text	00000108 collect_game_data
00015de4 g     F .text	00000004 alt_dcache_flush_all
0001489c g     F .text	00000080 .hidden __fixdfsi
000162f0 g       *ABS*	00000000 __ram_rwdata_end
000101cc g     F .text	00000050 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000162dc g     O .rwdata	00000008 alt_dev_list
00015b64 g     F .text	0000005c write
000156fc g     F .text	00000054 _putc_r
00016150 g       *ABS*	00000000 __ram_rodata_end
00013700 g     F .text	000000e8 .hidden __ledf2
0001649d g     O .bss	00000001 led
00014b80 g     F .text	0000005c .hidden __umodsi3
000165c0 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000149d4 g     F .text	00000054 .hidden __clzsi2
00015c48 g     F .text	00000030 altera_avalon_jtag_uart_write
00014e60 g     F .text	0000050c ___vfprintf_internal_r
0001544c g     F .text	00000100 _free_r
0001598c g     F .text	00000140 alt_printf
00010180 g     F .text	0000003c _start
00016490 g     O .bss	00000004 level
00015be0 g     F .text	00000010 alt_sys_init
00015c80 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00016494 g     O .bss	00000004 bomb_flag
00010cb0 g     F .text	000010c0 __ieee754_pow
00010918 g     F .text	00000398 pow
00014bdc g     F .text	00000028 .hidden __mulsi3
00016150 g       *ABS*	00000000 __ram_rwdata_start
00015fa0 g       *ABS*	00000000 __ram_rodata_start
00015d2c g     F .text	0000005c alt_up_accelerometer_spi_read_y_axis
00014cb4 g     F .text	000000ac strtok
00010354 g     F .text	000000b8 switch_data_in_to_int
00015f48 g     F .text	00000030 memcmp
000165c0 g       *ABS*	00000000 __alt_stack_base
000162bc g     O .rwdata	00000004 TAPSx
00012c68 g     F .text	00000930 .hidden __divdf3
000137e8 g     F .text	000007ac .hidden __muldf3
00015df0 g     F .text	0000006c alt_dev_llist_insert
00015984 g     F .text	00000004 __malloc_lock
00015b18 g     F .text	0000004c sbrk
00015384 g     F .text	000000a8 __sfvwrite_small_dev
00016490 g       *ABS*	00000000 __bss_start
0001090c g     F .text	0000000c main
000164b0 g     O .bss	00000004 alt_envp
00020000 g       *ABS*	00000000 __alt_heap_limit
0001554c g     F .text	00000160 _malloc_r
000162ec g     O .rwdata	00000004 alt_errno
000156ac g     F .text	00000050 putc
00014a28 g     F .text	00000080 .hidden __divsi3
00015fa0 g       *ABS*	00000000 __flash_rodata_start
00013598 g     F .text	00000080 .hidden __nedf2
00015bc0 g     F .text	00000020 alt_irq_init
00016044 g     O .rodata	00000100 .hidden __clz_tab
000157b4 g     F .text	00000050 _write_r
000162c8 g     O .rwdata	00000004 _impure_ptr
000164b8 g     O .bss	00000004 alt_argc
000121b8 g     F .text	000001c0 scalbn
00010020 g       .exceptions	00000000 alt_irq_entry
0001649e g     O .bss	00000001 pwm
000162e4 g     O .rwdata	00000008 alt_fs_list
000104fc g     F .text	00000098 display_message
00010020 g       *ABS*	00000000 __ram_exceptions_start
00015c78 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011d70 g     F .text	0000026c __ieee754_sqrt
000162f0 g       *ABS*	00000000 _edata
000165c0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00014aa8 g     F .text	00000074 .hidden __modsi3
00015d88 g     F .text	0000005c alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014848 g     F .text	00000054 .hidden __unorddf2
0001000c g       .entry	00000000 _exit
00015c94 g     F .text	00000020 alt_up_accelerometer_spi_read
00015cb4 g     F .text	0000001c alt_up_accelerometer_spi_write
0001040c g     F .text	00000028 getBin
00015798 g     F .text	0000001c strlen
00013618 g     F .text	000000e8 .hidden __gedf2
00015acc g     F .text	0000004c alt_putchar
000164a0 g     O .bss	00000004 __malloc_sbrk_start
00015ecc g     F .text	00000004 alt_icache_flush_all
000162cc g     O .rwdata	00000004 alt_priority_mask
0001021c g     F .text	0000004c timer_init_2
000164a4 g     O .bss	00000004 __malloc_free_list
0001536c g     F .text	00000018 __vfprintf_internal
00013f94 g     F .text	000008b4 .hidden __subdf3
00010268 g     F .text	000000c4 led_cooling_down
00016498 g     O .bss	00000004 init_flag
000158d4 g     F .text	00000084 alt_load
000162b8 g     O .rwdata	00000004 TAPSy
0001543c g     F .text	00000010 free



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84193004 	addi	r16,r16,25792
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
      mask <<= 1;
   10150:	1004907a 	slli	r2,r2,1
      i++;
   10154:	29400044 	addi	r5,r5,1
      if (active & mask)
   10158:	003ff006 	br	1011c <alt_irq_handler+0x20>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a08117 	ldw	r2,-32252(gp)
{
   10160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
   10164:	10000326 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6b8ae14 	ori	gp,gp,58040
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10992414 	ori	r2,r2,25744

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18d97014 	ori	r3,r3,26048

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00158d40 	call	158d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00159580 	call	15958 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <alt_after_alt_main>

000101bc <led_write>:
int TAPSx = 31;
int TAPSy = 31;


void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101bc:	21003fcc 	andi	r4,r4,255
   101c0:	008000b4 	movhi	r2,2
   101c4:	11042835 	stwio	r4,4256(r2)
}
   101c8:	f800283a 	ret

000101cc <timer_init>:
void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
    cd_countdown = led_cooling_down(cd_countdown);
}

void timer_init(void * isr) {
   101cc:	deffff04 	addi	sp,sp,-4
   101d0:	dfc00015 	stw	ra,0(sp)
   101d4:	200d883a 	mov	r6,r4
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   101d8:	00c000c4 	movi	r3,3
   101dc:	008000b4 	movhi	r2,2
   101e0:	10c40935 	stwio	r3,4132(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101e4:	10040835 	stwio	zero,4128(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x7840);
   101e8:	00de1004 	movi	r3,30784
   101ec:	10c40a35 	stwio	r3,4136(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x017D);
   101f0:	00c05f44 	movi	r3,381
   101f4:	10c40b35 	stwio	r3,4140(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
   101f8:	000b883a 	mov	r5,zero
   101fc:	01000084 	movi	r4,2
   10200:	00158440 	call	15844 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   10204:	00c001c4 	movi	r3,7
   10208:	008000b4 	movhi	r2,2
   1020c:	10c40935 	stwio	r3,4132(r2)
}
   10210:	dfc00017 	ldw	ra,0(sp)
   10214:	dec00104 	addi	sp,sp,4
   10218:	f800283a 	ret

0001021c <timer_init_2>:
void sys_timer_isr_2() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SEND_BASE, 0);
    collect_game_data();
}

void timer_init_2(void * isr) {
   1021c:	deffff04 	addi	sp,sp,-4
   10220:	dfc00015 	stw	ra,0(sp)
   10224:	200d883a 	mov	r6,r4
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SEND_BASE, 0x0003);
   10228:	00c000c4 	movi	r3,3
   1022c:	008000b4 	movhi	r2,2
   10230:	10c40135 	stwio	r3,4100(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SEND_BASE, 0);
   10234:	10040035 	stwio	zero,4096(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_SEND_BASE, 0x5000);
   10238:	00d40004 	movi	r3,20480
   1023c:	10c40235 	stwio	r3,4104(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_SEND_BASE, 0x0000);
   10240:	10040335 	stwio	zero,4108(r2)
    alt_irq_register(TIMER_SEND_IRQ, 0, isr);
   10244:	000b883a 	mov	r5,zero
   10248:	010000c4 	movi	r4,3
   1024c:	00158440 	call	15844 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_SEND_BASE, 0x0007);
   10250:	00c001c4 	movi	r3,7
   10254:	008000b4 	movhi	r2,2
   10258:	10c40135 	stwio	r3,4100(r2)
}
   1025c:	dfc00017 	ldw	ra,0(sp)
   10260:	dec00104 	addi	sp,sp,4
   10264:	f800283a 	ret

00010268 <led_cooling_down>:

int led_cooling_down(i) {
   10268:	2005883a 	mov	r2,r4
	if (i==0){
   1026c:	2000281e 	bne	r4,zero,10310 <led_cooling_down+0xa8>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000000000);
   10270:	00c000b4 	movhi	r3,2
   10274:	18042835 	stwio	zero,4256(r3)
		}
	if (i!=0){
   10278:	f800283a 	ret
		if (i==10){
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b1111111111);
		}
		if (i==9){
   1027c:	10c00258 	cmpnei	r3,r2,9
   10280:	1800021e 	bne	r3,zero,1028c <led_cooling_down+0x24>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0111111111);
   10284:	01007fc4 	movi	r4,511
   10288:	00002406 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==8){
   1028c:	10c00218 	cmpnei	r3,r2,8
   10290:	1800021e 	bne	r3,zero,1029c <led_cooling_down+0x34>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0011111111);
   10294:	01003fc4 	movi	r4,255
   10298:	00002006 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==7){
   1029c:	10c001d8 	cmpnei	r3,r2,7
   102a0:	1800021e 	bne	r3,zero,102ac <led_cooling_down+0x44>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0001111111);
   102a4:	01001fc4 	movi	r4,127
   102a8:	00001c06 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==6){
   102ac:	10c00198 	cmpnei	r3,r2,6
   102b0:	1800021e 	bne	r3,zero,102bc <led_cooling_down+0x54>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000111111);
   102b4:	01000fc4 	movi	r4,63
   102b8:	00001806 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==5){
   102bc:	10c00158 	cmpnei	r3,r2,5
   102c0:	1800021e 	bne	r3,zero,102cc <led_cooling_down+0x64>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000011111);
   102c4:	010007c4 	movi	r4,31
   102c8:	00001406 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==4){
   102cc:	10c00118 	cmpnei	r3,r2,4
   102d0:	1800021e 	bne	r3,zero,102dc <led_cooling_down+0x74>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000001111);
   102d4:	010003c4 	movi	r4,15
   102d8:	00001006 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==3){
   102dc:	10c000d8 	cmpnei	r3,r2,3
   102e0:	1800021e 	bne	r3,zero,102ec <led_cooling_down+0x84>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000000111);
   102e4:	010001c4 	movi	r4,7
   102e8:	00000c06 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==2){
   102ec:	10c00098 	cmpnei	r3,r2,2
   102f0:	1800021e 	bne	r3,zero,102fc <led_cooling_down+0x94>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000000011);
   102f4:	010000c4 	movi	r4,3
   102f8:	00000806 	br	1031c <led_cooling_down+0xb4>
		}
		if (i==1){
   102fc:	10c00058 	cmpnei	r3,r2,1
   10300:	1800081e 	bne	r3,zero,10324 <led_cooling_down+0xbc>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000000001);
   10304:	00c000b4 	movhi	r3,2
   10308:	18842835 	stwio	r2,4256(r3)
   1030c:	00000506 	br	10324 <led_cooling_down+0xbc>
		if (i==10){
   10310:	20c002a0 	cmpeqi	r3,r4,10
   10314:	183fd926 	beq	r3,zero,1027c <led_cooling_down+0x14>
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b1111111111);
   10318:	0100ffc4 	movi	r4,1023
			IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000000011);
   1031c:	00c000b4 	movhi	r3,2
   10320:	19042835 	stwio	r4,4256(r3)
		}
		i--;
   10324:	10bfffc4 	addi	r2,r2,-1
	}
	return i;
}
   10328:	f800283a 	ret

0001032c <sys_timer_isr>:
void sys_timer_isr() {
   1032c:	deffff04 	addi	sp,sp,-4
   10330:	dfc00015 	stw	ra,0(sp)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10334:	008000b4 	movhi	r2,2
   10338:	10040835 	stwio	zero,4128(r2)
    cd_countdown = led_cooling_down(cd_countdown);
   1033c:	d1207907 	ldb	r4,-32284(gp)
   10340:	00102680 	call	10268 <led_cooling_down>
   10344:	d0a07905 	stb	r2,-32284(gp)
}
   10348:	dfc00017 	ldw	ra,0(sp)
   1034c:	dec00104 	addi	sp,sp,4
   10350:	f800283a 	ret

00010354 <switch_data_in_to_int>:


void switch_data_in_to_int(int *switch_data){
	switch(*switch_data){
   10354:	20800017 	ldw	r2,0(r4)
   10358:	10c00820 	cmpeqi	r3,r2,32
   1035c:	1800251e 	bne	r3,zero,103f4 <switch_data_in_to_int+0xa0>
   10360:	10c00848 	cmpgei	r3,r2,33
   10364:	18000e1e 	bne	r3,zero,103a0 <switch_data_in_to_int+0x4c>
   10368:	10c00220 	cmpeqi	r3,r2,8
   1036c:	18001f1e 	bne	r3,zero,103ec <switch_data_in_to_int+0x98>
   10370:	10c00248 	cmpgei	r3,r2,9
   10374:	1800061e 	bne	r3,zero,10390 <switch_data_in_to_int+0x3c>
   10378:	10c000a0 	cmpeqi	r3,r2,2
   1037c:	1800161e 	bne	r3,zero,103d8 <switch_data_in_to_int+0x84>
   10380:	10800120 	cmpeqi	r2,r2,4
   10384:	1000171e 	bne	r2,zero,103e4 <switch_data_in_to_int+0x90>
	case 1:
        *switch_data =  0;
   10388:	20000015 	stw	zero,0(r4)
        break;
   1038c:	f800283a 	ret
	switch(*switch_data){
   10390:	10800420 	cmpeqi	r2,r2,16
   10394:	103ffc26 	beq	r2,zero,10388 <switch_data_in_to_int+0x34>
        break;
	case 8:
        *switch_data =  3;
        break;
	case 16:
        *switch_data =  4;
   10398:	00800104 	movi	r2,4
   1039c:	00000f06 	br	103dc <switch_data_in_to_int+0x88>
	switch(*switch_data){
   103a0:	10c04020 	cmpeqi	r3,r2,256
   103a4:	1800171e 	bne	r3,zero,10404 <switch_data_in_to_int+0xb0>
   103a8:	10c04048 	cmpgei	r3,r2,257
   103ac:	1800061e 	bne	r3,zero,103c8 <switch_data_in_to_int+0x74>
   103b0:	10c01020 	cmpeqi	r3,r2,64
   103b4:	1800111e 	bne	r3,zero,103fc <switch_data_in_to_int+0xa8>
   103b8:	10802020 	cmpeqi	r2,r2,128
   103bc:	103ff226 	beq	r2,zero,10388 <switch_data_in_to_int+0x34>
        break;
	case 64:
        *switch_data =  6;
        break;
	case 128:
        *switch_data =  7;
   103c0:	008001c4 	movi	r2,7
   103c4:	00000506 	br	103dc <switch_data_in_to_int+0x88>
	switch(*switch_data){
   103c8:	10808020 	cmpeqi	r2,r2,512
   103cc:	103fee26 	beq	r2,zero,10388 <switch_data_in_to_int+0x34>
        break;
	case 256:
        *switch_data =  8;
        break;
	case 512:
        *switch_data =  9;
   103d0:	00800244 	movi	r2,9
   103d4:	00000106 	br	103dc <switch_data_in_to_int+0x88>
        *switch_data =  1;
   103d8:	00800044 	movi	r2,1
        *switch_data =  9;
   103dc:	20800015 	stw	r2,0(r4)
        break;
	default:
		*switch_data =  0;
		break;
	}
}
   103e0:	f800283a 	ret
        *switch_data =  2;
   103e4:	00800084 	movi	r2,2
   103e8:	003ffc06 	br	103dc <switch_data_in_to_int+0x88>
        *switch_data =  3;
   103ec:	008000c4 	movi	r2,3
   103f0:	003ffa06 	br	103dc <switch_data_in_to_int+0x88>
        *switch_data =  5;
   103f4:	00800144 	movi	r2,5
   103f8:	003ff806 	br	103dc <switch_data_in_to_int+0x88>
        *switch_data =  6;
   103fc:	00800184 	movi	r2,6
   10400:	003ff606 	br	103dc <switch_data_in_to_int+0x88>
        *switch_data =  8;
   10404:	00800204 	movi	r2,8
   10408:	003ff406 	br	103dc <switch_data_in_to_int+0x88>

0001040c <getBin>:
int getBin(char letter){
	/*Based on the character entered, we convert to binary so the 7-segment knows which lights to turn on.
	The 7-segment has inverted logic so a 0 means the light is on and a 1 means the light is off.
	The rightmost bit starts the index at HEX#[0], and the leftmost bit is HEX#[6], the pattern
	for the 7-segment is shown in the DE0_C5 User Manual*/
	switch(letter){
   1040c:	213ff404 	addi	r4,r4,-48
   10410:	21003fcc 	andi	r4,r4,255
   10414:	20800ae8 	cmpgeui	r2,r4,43
   10418:	1000041e 	bne	r2,zero,1042c <getBin+0x20>
   1041c:	00800074 	movhi	r2,1
   10420:	2085883a 	add	r2,r4,r2
   10424:	109801c7 	ldb	r2,24583(r2)
   10428:	f800283a 	ret
   1042c:	00801fc4 	movi	r2,127
	case 'Z':
		return 0b0100100;
	default:
		return 0b1111111;
	}
}
   10430:	f800283a 	ret

00010434 <print>:

//Prints each of the letters out to the screen
void print(int let5, int let4, int let3, int let2, int let1, int let0){
	//Takes the binary value for each letter and places it on each of the six 7-segment displays
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10434:	008000b4 	movhi	r2,2
   10438:	11041035 	stwio	r4,4160(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   1043c:	11441435 	stwio	r5,4176(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10440:	11841835 	stwio	r6,4192(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10444:	11c41c35 	stwio	r7,4208(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10448:	d8c00017 	ldw	r3,0(sp)
   1044c:	10c42035 	stwio	r3,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10450:	d8c00117 	ldw	r3,4(sp)
   10454:	10c42435 	stwio	r3,4240(r2)
	return;
}
   10458:	f800283a 	ret

0001045c <generate_text>:


char generate_text(char curr, int *length, char *text, int *running) {
   1045c:	2005883a 	mov	r2,r4
	if(curr == '\n') return curr;								// If the line is empty, return nothing.
   10460:	21003fcc 	andi	r4,r4,255
   10464:	2100201c 	xori	r4,r4,128
   10468:	213fe004 	addi	r4,r4,-128
   1046c:	210002a0 	cmpeqi	r4,r4,10
   10470:	2000211e 	bne	r4,zero,104f8 <generate_text+0x9c>
char generate_text(char curr, int *length, char *text, int *running) {
   10474:	defffb04 	addi	sp,sp,-20
   10478:	dcc00315 	stw	r19,12(sp)
   1047c:	dc800215 	stw	r18,8(sp)
   10480:	dc400115 	stw	r17,4(sp)
   10484:	dc000015 	stw	r16,0(sp)
   10488:	dfc00415 	stw	ra,16(sp)
   1048c:	2823883a 	mov	r17,r5
   10490:	3025883a 	mov	r18,r6
   10494:	3827883a 	mov	r19,r7
	int idx = 0;										// Keep track of how many characters have been sent down for later printing
   10498:	0021883a 	mov	r16,zero
	char newCurr = curr;

	while (newCurr != EOF && newCurr != '\n'){						// Keep reading characters until we get to the end of the line
   1049c:	10c03fcc 	andi	r3,r2,255
   104a0:	18c0201c 	xori	r3,r3,128
   104a4:	18ffe004 	addi	r3,r3,-128
   104a8:	193fffe0 	cmpeqi	r4,r3,-1
   104ac:	2000021e 	bne	r4,zero,104b8 <generate_text+0x5c>
   104b0:	19000298 	cmpnei	r4,r3,10
   104b4:	2000081e 	bne	r4,zero,104d8 <generate_text+0x7c>
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
		text[idx] = newCurr;								// Add the next letter to the text buffer
		idx++;										// Keep track of the number of characters read
		newCurr = alt_getchar();							// Get the next character
	}
	*length = idx;
   104b8:	8c000015 	stw	r16,0(r17)

	return newCurr;
}
   104bc:	dfc00417 	ldw	ra,16(sp)
   104c0:	dcc00317 	ldw	r19,12(sp)
   104c4:	dc800217 	ldw	r18,8(sp)
   104c8:	dc400117 	ldw	r17,4(sp)
   104cc:	dc000017 	ldw	r16,0(sp)
   104d0:	dec00504 	addi	sp,sp,20
   104d4:	f800283a 	ret
		if (newCurr == QUITLETTER) { *running = 0; }					// If quitting letter is encountered, setting running to 0
   104d8:	18c01f98 	cmpnei	r3,r3,126
   104dc:	1800011e 	bne	r3,zero,104e4 <generate_text+0x88>
   104e0:	98000015 	stw	zero,0(r19)
		text[idx] = newCurr;								// Add the next letter to the text buffer
   104e4:	9407883a 	add	r3,r18,r16
   104e8:	18800005 	stb	r2,0(r3)
		idx++;										// Keep track of the number of characters read
   104ec:	84000044 	addi	r16,r16,1
		newCurr = alt_getchar();							// Get the next character
   104f0:	00158040 	call	15804 <alt_getchar>
   104f4:	003fe906 	br	1049c <generate_text+0x40>
}
   104f8:	f800283a 	ret

000104fc <display_message>:
void display_message(char *text){
	char *last = strtok(text, ",");
   104fc:	01400074 	movhi	r5,1
void display_message(char *text){
   10500:	defffb04 	addi	sp,sp,-20
	char *last = strtok(text, ",");
   10504:	2957e804 	addi	r5,r5,24480
void display_message(char *text){
   10508:	dfc00415 	stw	ra,16(sp)
   1050c:	dcc00315 	stw	r19,12(sp)
   10510:	dc800215 	stw	r18,8(sp)
   10514:	dc400115 	stw	r17,4(sp)
   10518:	dc000015 	stw	r16,0(sp)
	char *last = strtok(text, ",");
   1051c:	0014cb40 	call	14cb4 <strtok>
	// char *last = strrchr(text, ',');
	int hexdisplay[6] = {getBin(last[3]), getBin(last[2]), 0b1111111, 0b1111111, getBin(last[1]), getBin(last[0])};
   10520:	110000c7 	ldb	r4,3(r2)
	char *last = strtok(text, ",");
   10524:	1021883a 	mov	r16,r2
	int hexdisplay[6] = {getBin(last[3]), getBin(last[2]), 0b1111111, 0b1111111, getBin(last[1]), getBin(last[0])};
   10528:	001040c0 	call	1040c <getBin>
   1052c:	81000087 	ldb	r4,2(r16)
   10530:	1023883a 	mov	r17,r2
   10534:	001040c0 	call	1040c <getBin>
   10538:	81000047 	ldb	r4,1(r16)
   1053c:	1025883a 	mov	r18,r2
   10540:	001040c0 	call	1040c <getBin>
   10544:	81000007 	ldb	r4,0(r16)
   10548:	1027883a 	mov	r19,r2
   1054c:	001040c0 	call	1040c <getBin>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   10550:	00c000b4 	movhi	r3,2
   10554:	18841035 	stwio	r2,4160(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10558:	008000b4 	movhi	r2,2
   1055c:	14c41435 	stwio	r19,4176(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10560:	00801fc4 	movi	r2,127
   10564:	18841835 	stwio	r2,4192(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10568:	18841c35 	stwio	r2,4208(r3)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   1056c:	008000b4 	movhi	r2,2
   10570:	14842035 	stwio	r18,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10574:	14442435 	stwio	r17,4240(r2)

	print(hexdisplay[5], hexdisplay[4], hexdisplay[3], hexdisplay[2], hexdisplay[1], hexdisplay[0]);

}
   10578:	dfc00417 	ldw	ra,16(sp)
   1057c:	dcc00317 	ldw	r19,12(sp)
   10580:	dc800217 	ldw	r18,8(sp)
   10584:	dc400117 	ldw	r17,4(sp)
   10588:	dc000017 	ldw	r16,0(sp)
   1058c:	dec00504 	addi	sp,sp,20
   10590:	f800283a 	ret

00010594 <collect_username>:

void collect_username(){
   10594:	defff304 	addi	sp,sp,-52
   10598:	dd800915 	stw	r22,36(sp)
   1059c:	dd400815 	stw	r21,32(sp)
   105a0:	dc800515 	stw	r18,20(sp)
   105a4:	dc400415 	stw	r17,16(sp)
   105a8:	dc000315 	stw	r16,12(sp)
   105ac:	dfc00c15 	stw	ra,48(sp)
   105b0:	df000b15 	stw	fp,44(sp)
   105b4:	ddc00a15 	stw	r23,40(sp)
   105b8:	dd000715 	stw	r20,28(sp)
   105bc:	dcc00615 	stw	r19,24(sp)
    int hexdisplay[6] = {0b1111111,0b1111111,0b1111111,0b1111111, 0b1111111, 0b1111111};
	int digit;
	int switch_datain = 0b0000000000;
	int tmp = 0b0000000000;
    int index = 0;
    int switch_data_single = 0;
   105c0:	d8000215 	stw	zero,8(sp)
	char charValue;

    while(index<4){
   105c4:	040000c4 	movi	r16,3
    int hexdisplay[6] = {0b1111111,0b1111111,0b1111111,0b1111111, 0b1111111, 0b1111111};
   105c8:	02001fc4 	movi	r8,127
   105cc:	05401fc4 	movi	r21,127
   105d0:	05801fc4 	movi	r22,127
	int tmp = 0b0000000000;
   105d4:	0025883a 	mov	r18,zero
    int usernameout = 0;
   105d8:	0023883a 	mov	r17,zero
			int temp;
			for (int i=2; i>=0; i--){
				temp = hexdisplay[i];
				hexdisplay[i+1] = temp;
			}
			hexdisplay[0] = digit;
   105dc:	9005883a 	mov	r2,r18
    while(index<4){
   105e0:	80ffffd8 	cmpnei	r3,r16,-1
   105e4:	1800201e 	bne	r3,zero,10668 <collect_username+0xd4>
			print(hexdisplay[5], hexdisplay[4], hexdisplay[3], hexdisplay[2], hexdisplay[1], hexdisplay[0]);
            index++;
        }
    }
	int button_datain;
	button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   105e8:	008000b4 	movhi	r2,2
   105ec:	10c43037 	ldwio	r3,4288(r2)
	while (button_datain != 2){
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
		if (button_datain == 2){
			alt_printf("Usernamex%x\n",usernameout);
   105f0:	01000074 	movhi	r4,1
   105f4:	2117e904 	addi	r4,r4,24484
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   105f8:	04001fc4 	movi	r16,127
	while (button_datain != 2){
   105fc:	18c00098 	cmpnei	r3,r3,2
   10600:	18000d26 	beq	r3,zero,10638 <collect_username+0xa4>
		button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10604:	008000b4 	movhi	r2,2
   10608:	10c43037 	ldwio	r3,4288(r2)
		if (button_datain == 2){
   1060c:	18800098 	cmpnei	r2,r3,2
   10610:	103ffa1e 	bne	r2,zero,105fc <collect_username+0x68>
			alt_printf("Usernamex%x\n",usernameout);
   10614:	880b883a 	mov	r5,r17
   10618:	001598c0 	call	1598c <alt_printf>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   1061c:	008000b4 	movhi	r2,2
   10620:	14041035 	stwio	r16,4160(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10624:	14041435 	stwio	r16,4176(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   10628:	14041835 	stwio	r16,4192(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   1062c:	14041c35 	stwio	r16,4208(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10630:	14042035 	stwio	r16,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   10634:	14042435 	stwio	r16,4240(r2)
			print(0b1111111, 0b1111111, 0b1111111, 0b1111111, 0b1111111, 0b1111111);
		}
	}


}
   10638:	dfc00c17 	ldw	ra,48(sp)
   1063c:	df000b17 	ldw	fp,44(sp)
   10640:	ddc00a17 	ldw	r23,40(sp)
   10644:	dd800917 	ldw	r22,36(sp)
   10648:	dd400817 	ldw	r21,32(sp)
   1064c:	dd000717 	ldw	r20,28(sp)
   10650:	dcc00617 	ldw	r19,24(sp)
   10654:	dc800517 	ldw	r18,20(sp)
   10658:	dc400417 	ldw	r17,16(sp)
   1065c:	dc000317 	ldw	r16,12(sp)
   10660:	dec00d04 	addi	sp,sp,52
   10664:	f800283a 	ret
        switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
   10668:	010000b4 	movhi	r4,2
   1066c:	24842c37 	ldwio	r18,4272(r4)
        switch_data_single = tmp ^ switch_datain;
   10670:	1488f03a 	xor	r4,r2,r18
   10674:	d9000215 	stw	r4,8(sp)
		if (switch_data_single != 0){ // if switch_datain has changed
   10678:	14bfda26 	beq	r2,r18,105e4 <collect_username+0x50>
			switch_data_in_to_int(&switch_data_single);
   1067c:	d9000204 	addi	r4,sp,8
   10680:	da000115 	stw	r8,4(sp)
   10684:	00103540 	call	10354 <switch_data_in_to_int>
			charValue=switch_data_single+'0'; // int to char
   10688:	da800217 	ldw	r10,8(sp)
   1068c:	55000c04 	addi	r20,r10,48
            digit = getBin(charValue);
   10690:	a5003fcc 	andi	r20,r20,255
   10694:	a500201c 	xori	r20,r20,128
   10698:	a53fe004 	addi	r20,r20,-128
   1069c:	a009883a 	mov	r4,r20
			charValue=switch_data_single+'0'; // int to char
   106a0:	da800015 	stw	r10,0(sp)
            digit = getBin(charValue);
   106a4:	001040c0 	call	1040c <getBin>
            usernameout += switch_data_single*pow(10,(3-index));
   106a8:	8009883a 	mov	r4,r16
            digit = getBin(charValue);
   106ac:	1027883a 	mov	r19,r2
            usernameout += switch_data_single*pow(10,(3-index));
   106b0:	001491c0 	call	1491c <__floatsidf>
   106b4:	100d883a 	mov	r6,r2
   106b8:	180f883a 	mov	r7,r3
   106bc:	01500934 	movhi	r5,16420
   106c0:	0009883a 	mov	r4,zero
   106c4:	00109180 	call	10918 <pow>
   106c8:	da800017 	ldw	r10,0(sp)
   106cc:	1039883a 	mov	fp,r2
   106d0:	182f883a 	mov	r23,r3
   106d4:	5009883a 	mov	r4,r10
   106d8:	001491c0 	call	1491c <__floatsidf>
   106dc:	e00d883a 	mov	r6,fp
   106e0:	b80f883a 	mov	r7,r23
   106e4:	180b883a 	mov	r5,r3
   106e8:	1009883a 	mov	r4,r2
   106ec:	00137e80 	call	137e8 <__muldf3>
   106f0:	8809883a 	mov	r4,r17
   106f4:	1039883a 	mov	fp,r2
   106f8:	182f883a 	mov	r23,r3
   106fc:	001491c0 	call	1491c <__floatsidf>
   10700:	100d883a 	mov	r6,r2
   10704:	180f883a 	mov	r7,r3
   10708:	e009883a 	mov	r4,fp
   1070c:	b80b883a 	mov	r5,r23
   10710:	00123780 	call	12378 <__adddf3>
   10714:	180b883a 	mov	r5,r3
   10718:	1009883a 	mov	r4,r2
   1071c:	001489c0 	call	1489c <__fixdfsi>
			printf("%c",charValue);
   10720:	a009883a 	mov	r4,r20
            usernameout += switch_data_single*pow(10,(3-index));
   10724:	1023883a 	mov	r17,r2
			printf("%c",charValue);
   10728:	0014c9c0 	call	14c9c <putchar>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, let5);
   1072c:	008000b4 	movhi	r2,2
   10730:	02401fc4 	movi	r9,127
   10734:	12441035 	stwio	r9,4160(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, let4);
   10738:	12441435 	stwio	r9,4176(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, let3);
   1073c:	da000117 	ldw	r8,4(sp)
   10740:	12041835 	stwio	r8,4192(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, let2);
   10744:	15441c35 	stwio	r21,4208(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, let1);
   10748:	15842035 	stwio	r22,4224(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, let0);
   1074c:	14c42435 	stwio	r19,4240(r2)
				hexdisplay[i+1] = temp;
   10750:	a811883a 	mov	r8,r21
   10754:	843fffc4 	addi	r16,r16,-1
   10758:	b02b883a 	mov	r21,r22
			hexdisplay[0] = digit;
   1075c:	982d883a 	mov	r22,r19
   10760:	003f9e06 	br	105dc <collect_username+0x48>

00010764 <collect_game_data>:

void collect_game_data() {
	alt_32 x_read, y_read, z_read;
	int button_datain;
	alt_up_accelerometer_spi_dev * acc_dev;
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10764:	01000074 	movhi	r4,1
void collect_game_data() {
   10768:	defffb04 	addi	sp,sp,-20
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1076c:	2117ed04 	addi	r4,r4,24500
void collect_game_data() {
   10770:	dc000315 	stw	r16,12(sp)
   10774:	dfc00415 	stw	ra,16(sp)
	acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10778:	0015c780 	call	15c78 <alt_up_accelerometer_spi_open_dev>
   1077c:	1021883a 	mov	r16,r2
	if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10780:	1000031e 	bne	r2,zero,10790 <collect_game_data+0x2c>
		printf("error1");
   10784:	01000074 	movhi	r4,1
   10788:	2117f304 	addi	r4,r4,24524
   1078c:	0014c4c0 	call	14c4c <printf>
	}

    alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10790:	d80b883a 	mov	r5,sp
   10794:	8009883a 	mov	r4,r16
   10798:	0015cd00 	call	15cd0 <alt_up_accelerometer_spi_read_x_axis>
    alt_up_accelerometer_spi_read_y_axis(acc_dev, & y_read);
   1079c:	d9400104 	addi	r5,sp,4
   107a0:	8009883a 	mov	r4,r16
   107a4:	0015d2c0 	call	15d2c <alt_up_accelerometer_spi_read_y_axis>
    alt_up_accelerometer_spi_read_z_axis(acc_dev, & z_read);
   107a8:	d9400204 	addi	r5,sp,8
   107ac:	8009883a 	mov	r4,r16
   107b0:	0015d880 	call	15d88 <alt_up_accelerometer_spi_read_z_axis>

    alt_printf(" Rx%x/",x_read);
   107b4:	d9400017 	ldw	r5,0(sp)
   107b8:	01000074 	movhi	r4,1
   107bc:	2117f504 	addi	r4,r4,24532
   107c0:	001598c0 	call	1598c <alt_printf>
    alt_printf(" Ry%x/",y_read);
   107c4:	d9400117 	ldw	r5,4(sp)
   107c8:	01000074 	movhi	r4,1
   107cc:	2117f704 	addi	r4,r4,24540
   107d0:	001598c0 	call	1598c <alt_printf>
    alt_printf(" Rz%x/",z_read);
   107d4:	d9400217 	ldw	r5,8(sp)
   107d8:	01000074 	movhi	r4,1
   107dc:	2117f904 	addi	r4,r4,24548
   107e0:	001598c0 	call	1598c <alt_printf>

    button_datain = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   107e4:	008000b4 	movhi	r2,2
   107e8:	14043037 	ldwio	r16,4288(r2)
    alt_printf("B%x/\n",button_datain);//button_datain=0/1bomb/2eat
   107ec:	01000074 	movhi	r4,1
   107f0:	800b883a 	mov	r5,r16
   107f4:	2117fb04 	addi	r4,r4,24556
   107f8:	001598c0 	call	1598c <alt_printf>

    if (button_datain == 1 && bomb_flag == 0 && cd_countdown == 0){
   107fc:	80800058 	cmpnei	r2,r16,1
   10800:	10000c1e 	bne	r2,zero,10834 <collect_game_data+0xd0>
   10804:	d0a07717 	ldw	r2,-32292(gp)
   10808:	1000051e 	bne	r2,zero,10820 <collect_game_data+0xbc>
   1080c:	d0a07907 	ldb	r2,-32284(gp)
   10810:	1000031e 	bne	r2,zero,10820 <collect_game_data+0xbc>
        bomb_flag = 1;
        cd_countdown = 10;
   10814:	00800284 	movi	r2,10
        bomb_flag = 1;
   10818:	d4207715 	stw	r16,-32292(gp)
        cd_countdown = 10;
   1081c:	d0a07905 	stb	r2,-32284(gp)
    if (button_datain == 2 && init_flag == 0){
        init_flag = 1;
        alt_printf("Ix%x/ Iy%x/ Iz%x\/n",x_read,y_read,z_read);
    }
    if (button_datain !=2){
        init_flag = 0;
   10820:	d0207815 	stw	zero,-32288(gp)
    }
}
   10824:	dfc00417 	ldw	ra,16(sp)
   10828:	dc000317 	ldw	r16,12(sp)
   1082c:	dec00504 	addi	sp,sp,20
   10830:	f800283a 	ret
        bomb_flag = 0;
   10834:	d0207715 	stw	zero,-32292(gp)
    if (button_datain == 2 && init_flag == 0){
   10838:	840000a0 	cmpeqi	r16,r16,2
   1083c:	803ff826 	beq	r16,zero,10820 <collect_game_data+0xbc>
   10840:	d0a07817 	ldw	r2,-32288(gp)
   10844:	103ff71e 	bne	r2,zero,10824 <collect_game_data+0xc0>
        alt_printf("Ix%x/ Iy%x/ Iz%x\/n",x_read,y_read,z_read);
   10848:	d9c00217 	ldw	r7,8(sp)
   1084c:	d9800117 	ldw	r6,4(sp)
   10850:	d9400017 	ldw	r5,0(sp)
   10854:	01000074 	movhi	r4,1
        init_flag = 1;
   10858:	00800044 	movi	r2,1
        alt_printf("Ix%x/ Iy%x/ Iz%x\/n",x_read,y_read,z_read);
   1085c:	2117fd04 	addi	r4,r4,24564
        init_flag = 1;
   10860:	d0a07815 	stw	r2,-32288(gp)
        alt_printf("Ix%x/ Iy%x/ Iz%x\/n",x_read,y_read,z_read);
   10864:	001598c0 	call	1598c <alt_printf>
}
   10868:	003fee06 	br	10824 <collect_game_data+0xc0>

0001086c <sys_timer_isr_2>:
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_SEND_BASE, 0);
   1086c:	008000b4 	movhi	r2,2
   10870:	10040035 	stwio	zero,4096(r2)
    collect_game_data();
   10874:	00107641 	jmpi	10764 <collect_game_data>

00010878 <read_chars>:

int read_chars() {
   10878:	deff7d04 	addi	sp,sp,-524
	char text[2*CHARLIM];
	char prevLetter = '!';
	int length = 0;
	int running = 1;
   1087c:	00800044 	movi	r2,1
int read_chars() {
   10880:	dfc08215 	stw	ra,520(sp)
	int length = 0;
   10884:	d8000015 	stw	zero,0(sp)
	int running = 1;
   10888:	d8800115 	stw	r2,4(sp)

	prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   1088c:	00158040 	call	15804 <alt_getchar>
	prevLetter = generate_text(prevLetter, &length, text, &running);		// Process input text
   10890:	11003fcc 	andi	r4,r2,255
   10894:	2100201c 	xori	r4,r4,128
   10898:	d9c00104 	addi	r7,sp,4
   1089c:	d9800204 	addi	r6,sp,8
   108a0:	d80b883a 	mov	r5,sp
   108a4:	213fe004 	addi	r4,r4,-128
   108a8:	001045c0 	call	1045c <generate_text>

	if(text[0] == 'P'){
   108ac:	d8800207 	ldb	r2,8(sp)
   108b0:	10801418 	cmpnei	r2,r2,80
   108b4:	1000011e 	bne	r2,zero,108bc <read_chars+0x44>
	    collect_username();
   108b8:	00105940 	call	10594 <collect_username>
	}
	timer_init(sys_timer_isr);
   108bc:	01000074 	movhi	r4,1
   108c0:	2100cb04 	addi	r4,r4,812
   108c4:	00101cc0 	call	101cc <timer_init>
	timer_init_2(sys_timer_isr_2);
   108c8:	01000074 	movhi	r4,1
   108cc:	21021b04 	addi	r4,r4,2156
   108d0:	001021c0 	call	1021c <timer_init_2>
	while (1) {									// Keep running until QUITLETTER is encountered
		//printf("open");
		//print(0b1111111, 0b1100011, 0b1111111, 0b1111111, 0b1111111, 0b1111111);
		prevLetter = alt_getchar();							// Extract the first character (and create a hold until one arrives)
   108d4:	00158040 	call	15804 <alt_getchar>
		prevLetter = generate_text(prevLetter, &length, text, &running);		// Process input text
   108d8:	11003fcc 	andi	r4,r2,255
   108dc:	2100201c 	xori	r4,r4,128
   108e0:	d9c00104 	addi	r7,sp,4
   108e4:	d9800204 	addi	r6,sp,8
   108e8:	d80b883a 	mov	r5,sp
   108ec:	213fe004 	addi	r4,r4,-128
   108f0:	001045c0 	call	1045c <generate_text>
		//print(0b1111111, 0b1100011, 0b1111111, 0b1111111, 0b1111111, 0b1111111);
		if(text[0] == ',' ) {
   108f4:	d8800207 	ldb	r2,8(sp)
   108f8:	10800b18 	cmpnei	r2,r2,44
   108fc:	103ff51e 	bne	r2,zero,108d4 <read_chars+0x5c>
			display_message(text);
   10900:	d9000204 	addi	r4,sp,8
   10904:	00104fc0 	call	104fc <display_message>
   10908:	003ff206 	br	108d4 <read_chars+0x5c>

0001090c <main>:
		}
	}
	return 0;
}

int main() {
   1090c:	deffff04 	addi	sp,sp,-4
   10910:	dfc00015 	stw	ra,0(sp)
	return read_chars();
   10914:	00108780 	call	10878 <read_chars>

00010918 <pow>:
   10918:	defff704 	addi	sp,sp,-36
   1091c:	dd400515 	stw	r21,20(sp)
   10920:	dd000415 	stw	r20,16(sp)
   10924:	dcc00315 	stw	r19,12(sp)
   10928:	dc800215 	stw	r18,8(sp)
   1092c:	dc400115 	stw	r17,4(sp)
   10930:	dc000015 	stw	r16,0(sp)
   10934:	202b883a 	mov	r21,r4
   10938:	dfc00815 	stw	ra,32(sp)
   1093c:	ddc00715 	stw	r23,28(sp)
   10940:	dd800615 	stw	r22,24(sp)
   10944:	2823883a 	mov	r17,r5
   10948:	3021883a 	mov	r16,r6
   1094c:	3825883a 	mov	r18,r7
   10950:	0010cb00 	call	10cb0 <__ieee754_pow>
   10954:	01000074 	movhi	r4,1
   10958:	2218b017 	ldw	r8,25280(r4)
   1095c:	1029883a 	mov	r20,r2
   10960:	1827883a 	mov	r19,r3
   10964:	423fffe0 	cmpeqi	r8,r8,-1
   10968:	40002f1e 	bne	r8,zero,10a28 <pow+0x110>
   1096c:	800d883a 	mov	r6,r16
   10970:	900f883a 	mov	r7,r18
   10974:	8009883a 	mov	r4,r16
   10978:	900b883a 	mov	r5,r18
   1097c:	00148480 	call	14848 <__unorddf2>
   10980:	1000291e 	bne	r2,zero,10a28 <pow+0x110>
   10984:	a80d883a 	mov	r6,r21
   10988:	880f883a 	mov	r7,r17
   1098c:	a809883a 	mov	r4,r21
   10990:	880b883a 	mov	r5,r17
   10994:	00148480 	call	14848 <__unorddf2>
   10998:	000d883a 	mov	r6,zero
   1099c:	000f883a 	mov	r7,zero
   109a0:	1000a61e 	bne	r2,zero,10c3c <pow+0x324>
   109a4:	a809883a 	mov	r4,r21
   109a8:	880b883a 	mov	r5,r17
   109ac:	00135980 	call	13598 <__eqdf2>
   109b0:	10002a1e 	bne	r2,zero,10a5c <pow+0x144>
   109b4:	000d883a 	mov	r6,zero
   109b8:	000f883a 	mov	r7,zero
   109bc:	8009883a 	mov	r4,r16
   109c0:	900b883a 	mov	r5,r18
   109c4:	00135980 	call	13598 <__eqdf2>
   109c8:	1000a026 	beq	r2,zero,10c4c <pow+0x334>
   109cc:	01600034 	movhi	r5,32768
   109d0:	297fffc4 	addi	r5,r5,-1
   109d4:	9162703a 	and	r17,r18,r5
   109d8:	01dffc34 	movhi	r7,32752
   109dc:	01bfffc4 	movi	r6,-1
   109e0:	39ffffc4 	addi	r7,r7,-1
   109e4:	8009883a 	mov	r4,r16
   109e8:	880b883a 	mov	r5,r17
   109ec:	00148480 	call	14848 <__unorddf2>
   109f0:	10000d1e 	bne	r2,zero,10a28 <pow+0x110>
   109f4:	01dffc34 	movhi	r7,32752
   109f8:	01bfffc4 	movi	r6,-1
   109fc:	39ffffc4 	addi	r7,r7,-1
   10a00:	8009883a 	mov	r4,r16
   10a04:	880b883a 	mov	r5,r17
   10a08:	00136180 	call	13618 <__gedf2>
   10a0c:	00800616 	blt	zero,r2,10a28 <pow+0x110>
   10a10:	000d883a 	mov	r6,zero
   10a14:	000f883a 	mov	r7,zero
   10a18:	8009883a 	mov	r4,r16
   10a1c:	900b883a 	mov	r5,r18
   10a20:	00137000 	call	13700 <__ledf2>
   10a24:	10008c16 	blt	r2,zero,10c58 <pow+0x340>
   10a28:	a005883a 	mov	r2,r20
   10a2c:	9807883a 	mov	r3,r19
   10a30:	dfc00817 	ldw	ra,32(sp)
   10a34:	ddc00717 	ldw	r23,28(sp)
   10a38:	dd800617 	ldw	r22,24(sp)
   10a3c:	dd400517 	ldw	r21,20(sp)
   10a40:	dd000417 	ldw	r20,16(sp)
   10a44:	dcc00317 	ldw	r19,12(sp)
   10a48:	dc800217 	ldw	r18,8(sp)
   10a4c:	dc400117 	ldw	r17,4(sp)
   10a50:	dc000017 	ldw	r16,0(sp)
   10a54:	dec00904 	addi	sp,sp,36
   10a58:	f800283a 	ret
   10a5c:	01600034 	movhi	r5,32768
   10a60:	297fffc4 	addi	r5,r5,-1
   10a64:	996c703a 	and	r22,r19,r5
   10a68:	01dffc34 	movhi	r7,32752
   10a6c:	01bfffc4 	movi	r6,-1
   10a70:	39ffffc4 	addi	r7,r7,-1
   10a74:	a009883a 	mov	r4,r20
   10a78:	b00b883a 	mov	r5,r22
   10a7c:	00148480 	call	14848 <__unorddf2>
   10a80:	1000331e 	bne	r2,zero,10b50 <pow+0x238>
   10a84:	01dffc34 	movhi	r7,32752
   10a88:	01bfffc4 	movi	r6,-1
   10a8c:	39ffffc4 	addi	r7,r7,-1
   10a90:	a009883a 	mov	r4,r20
   10a94:	b00b883a 	mov	r5,r22
   10a98:	00136180 	call	13618 <__gedf2>
   10a9c:	00802c16 	blt	zero,r2,10b50 <pow+0x238>
   10aa0:	000d883a 	mov	r6,zero
   10aa4:	000f883a 	mov	r7,zero
   10aa8:	a009883a 	mov	r4,r20
   10aac:	980b883a 	mov	r5,r19
   10ab0:	00135980 	call	13598 <__eqdf2>
   10ab4:	103fdc1e 	bne	r2,zero,10a28 <pow+0x110>
   10ab8:	05a00034 	movhi	r22,32768
   10abc:	b5bfffc4 	addi	r22,r22,-1
   10ac0:	8da2703a 	and	r17,r17,r22
   10ac4:	01dffc34 	movhi	r7,32752
   10ac8:	01bfffc4 	movi	r6,-1
   10acc:	39ffffc4 	addi	r7,r7,-1
   10ad0:	a809883a 	mov	r4,r21
   10ad4:	880b883a 	mov	r5,r17
   10ad8:	00148480 	call	14848 <__unorddf2>
   10adc:	103fd21e 	bne	r2,zero,10a28 <pow+0x110>
   10ae0:	01dffc34 	movhi	r7,32752
   10ae4:	01bfffc4 	movi	r6,-1
   10ae8:	39ffffc4 	addi	r7,r7,-1
   10aec:	a809883a 	mov	r4,r21
   10af0:	880b883a 	mov	r5,r17
   10af4:	00136180 	call	13618 <__gedf2>
   10af8:	00bfcb16 	blt	zero,r2,10a28 <pow+0x110>
   10afc:	95a4703a 	and	r18,r18,r22
   10b00:	01dffc34 	movhi	r7,32752
   10b04:	01bfffc4 	movi	r6,-1
   10b08:	39ffffc4 	addi	r7,r7,-1
   10b0c:	8009883a 	mov	r4,r16
   10b10:	900b883a 	mov	r5,r18
   10b14:	00148480 	call	14848 <__unorddf2>
   10b18:	103fc31e 	bne	r2,zero,10a28 <pow+0x110>
   10b1c:	01dffc34 	movhi	r7,32752
   10b20:	01bfffc4 	movi	r6,-1
   10b24:	39ffffc4 	addi	r7,r7,-1
   10b28:	8009883a 	mov	r4,r16
   10b2c:	900b883a 	mov	r5,r18
   10b30:	00136180 	call	13618 <__gedf2>
   10b34:	00bfbc16 	blt	zero,r2,10a28 <pow+0x110>
   10b38:	0014c040 	call	14c04 <__errno>
   10b3c:	00c00884 	movi	r3,34
   10b40:	10c00015 	stw	r3,0(r2)
   10b44:	0029883a 	mov	r20,zero
   10b48:	0027883a 	mov	r19,zero
   10b4c:	003fb606 	br	10a28 <pow+0x110>
   10b50:	05a00034 	movhi	r22,32768
   10b54:	b5bfffc4 	addi	r22,r22,-1
   10b58:	8dae703a 	and	r23,r17,r22
   10b5c:	01dffc34 	movhi	r7,32752
   10b60:	01bfffc4 	movi	r6,-1
   10b64:	39ffffc4 	addi	r7,r7,-1
   10b68:	a809883a 	mov	r4,r21
   10b6c:	b80b883a 	mov	r5,r23
   10b70:	00148480 	call	14848 <__unorddf2>
   10b74:	103fac1e 	bne	r2,zero,10a28 <pow+0x110>
   10b78:	01dffc34 	movhi	r7,32752
   10b7c:	01bfffc4 	movi	r6,-1
   10b80:	39ffffc4 	addi	r7,r7,-1
   10b84:	a809883a 	mov	r4,r21
   10b88:	b80b883a 	mov	r5,r23
   10b8c:	00136180 	call	13618 <__gedf2>
   10b90:	00bfa516 	blt	zero,r2,10a28 <pow+0x110>
   10b94:	95ac703a 	and	r22,r18,r22
   10b98:	01dffc34 	movhi	r7,32752
   10b9c:	01bfffc4 	movi	r6,-1
   10ba0:	39ffffc4 	addi	r7,r7,-1
   10ba4:	8009883a 	mov	r4,r16
   10ba8:	b00b883a 	mov	r5,r22
   10bac:	00148480 	call	14848 <__unorddf2>
   10bb0:	103fbb1e 	bne	r2,zero,10aa0 <pow+0x188>
   10bb4:	01dffc34 	movhi	r7,32752
   10bb8:	01bfffc4 	movi	r6,-1
   10bbc:	39ffffc4 	addi	r7,r7,-1
   10bc0:	8009883a 	mov	r4,r16
   10bc4:	b00b883a 	mov	r5,r22
   10bc8:	00136180 	call	13618 <__gedf2>
   10bcc:	00bfb416 	blt	zero,r2,10aa0 <pow+0x188>
   10bd0:	a00d883a 	mov	r6,r20
   10bd4:	980f883a 	mov	r7,r19
   10bd8:	a009883a 	mov	r4,r20
   10bdc:	980b883a 	mov	r5,r19
   10be0:	00148480 	call	14848 <__unorddf2>
   10be4:	1000271e 	bne	r2,zero,10c84 <pow+0x36c>
   10be8:	0014c040 	call	14c04 <__errno>
   10bec:	00c00884 	movi	r3,34
   10bf0:	10c00015 	stw	r3,0(r2)
   10bf4:	000d883a 	mov	r6,zero
   10bf8:	000f883a 	mov	r7,zero
   10bfc:	a809883a 	mov	r4,r21
   10c00:	880b883a 	mov	r5,r17
   10c04:	00137000 	call	13700 <__ledf2>
   10c08:	1000190e 	bge	r2,zero,10c70 <pow+0x358>
   10c0c:	8009883a 	mov	r4,r16
   10c10:	900b883a 	mov	r5,r18
   10c14:	0011fdc0 	call	11fdc <rint>
   10c18:	800d883a 	mov	r6,r16
   10c1c:	900f883a 	mov	r7,r18
   10c20:	1009883a 	mov	r4,r2
   10c24:	180b883a 	mov	r5,r3
   10c28:	00135980 	call	13598 <__eqdf2>
   10c2c:	0029883a 	mov	r20,zero
   10c30:	10001226 	beq	r2,zero,10c7c <pow+0x364>
   10c34:	04fffc34 	movhi	r19,65520
   10c38:	003f7b06 	br	10a28 <pow+0x110>
   10c3c:	8009883a 	mov	r4,r16
   10c40:	900b883a 	mov	r5,r18
   10c44:	00135980 	call	13598 <__eqdf2>
   10c48:	103f771e 	bne	r2,zero,10a28 <pow+0x110>
   10c4c:	0029883a 	mov	r20,zero
   10c50:	04cffc34 	movhi	r19,16368
   10c54:	003f7406 	br	10a28 <pow+0x110>
   10c58:	0014c040 	call	14c04 <__errno>
   10c5c:	00c00844 	movi	r3,33
   10c60:	10c00015 	stw	r3,0(r2)
   10c64:	0029883a 	mov	r20,zero
   10c68:	04fffc34 	movhi	r19,65520
   10c6c:	003f6e06 	br	10a28 <pow+0x110>
   10c70:	0029883a 	mov	r20,zero
   10c74:	04dffc34 	movhi	r19,32752
   10c78:	003f6b06 	br	10a28 <pow+0x110>
   10c7c:	04dffc34 	movhi	r19,32752
   10c80:	003f6906 	br	10a28 <pow+0x110>
   10c84:	0014c040 	call	14c04 <__errno>
   10c88:	00c00844 	movi	r3,33
   10c8c:	10c00015 	stw	r3,0(r2)
   10c90:	000d883a 	mov	r6,zero
   10c94:	000f883a 	mov	r7,zero
   10c98:	0009883a 	mov	r4,zero
   10c9c:	000b883a 	mov	r5,zero
   10ca0:	0012c680 	call	12c68 <__divdf3>
   10ca4:	1029883a 	mov	r20,r2
   10ca8:	1827883a 	mov	r19,r3
   10cac:	003f5e06 	br	10a28 <pow+0x110>

00010cb0 <__ieee754_pow>:
   10cb0:	00e00034 	movhi	r3,32768
   10cb4:	18ffffc4 	addi	r3,r3,-1
   10cb8:	deffeb04 	addi	sp,sp,-84
   10cbc:	38c4703a 	and	r2,r7,r3
   10cc0:	dfc01415 	stw	ra,80(sp)
   10cc4:	df001315 	stw	fp,76(sp)
   10cc8:	ddc01215 	stw	r23,72(sp)
   10ccc:	dd801115 	stw	r22,68(sp)
   10cd0:	dd401015 	stw	r21,64(sp)
   10cd4:	dd000f15 	stw	r20,60(sp)
   10cd8:	dcc00e15 	stw	r19,56(sp)
   10cdc:	dc800d15 	stw	r18,52(sp)
   10ce0:	dc400c15 	stw	r17,48(sp)
   10ce4:	dc000b15 	stw	r16,44(sp)
   10ce8:	1190b03a 	or	r8,r2,r6
   10cec:	40003626 	beq	r8,zero,10dc8 <__ieee754_pow+0x118>
   10cf0:	28e8703a 	and	r20,r5,r3
   10cf4:	00dffc34 	movhi	r3,32752
   10cf8:	282b883a 	mov	r21,r5
   10cfc:	1d00130e 	bge	r3,r20,10d4c <__ieee754_pow+0x9c>
   10d00:	00f00434 	movhi	r3,49168
   10d04:	a0c7883a 	add	r3,r20,r3
   10d08:	1906b03a 	or	r3,r3,r4
   10d0c:	002d883a 	mov	r22,zero
   10d10:	1800321e 	bne	r3,zero,10ddc <__ieee754_pow+0x12c>
   10d14:	00cffc34 	movhi	r3,16368
   10d18:	b005883a 	mov	r2,r22
   10d1c:	dfc01417 	ldw	ra,80(sp)
   10d20:	df001317 	ldw	fp,76(sp)
   10d24:	ddc01217 	ldw	r23,72(sp)
   10d28:	dd801117 	ldw	r22,68(sp)
   10d2c:	dd401017 	ldw	r21,64(sp)
   10d30:	dd000f17 	ldw	r20,60(sp)
   10d34:	dcc00e17 	ldw	r19,56(sp)
   10d38:	dc800d17 	ldw	r18,52(sp)
   10d3c:	dc400c17 	ldw	r17,48(sp)
   10d40:	dc000b17 	ldw	r16,44(sp)
   10d44:	dec01504 	addi	sp,sp,84
   10d48:	f800283a 	ret
   10d4c:	3823883a 	mov	r17,r7
   10d50:	3021883a 	mov	r16,r6
   10d54:	a0c01e26 	beq	r20,r3,10dd0 <__ieee754_pow+0x120>
   10d58:	18bfe916 	blt	r3,r2,10d00 <__ieee754_pow+0x50>
   10d5c:	00dffc34 	movhi	r3,32752
   10d60:	10c04226 	beq	r2,r3,10e6c <__ieee754_pow+0x1bc>
   10d64:	a8001f16 	blt	r21,zero,10de4 <__ieee754_pow+0x134>
   10d68:	0025883a 	mov	r18,zero
   10d6c:	80002c1e 	bne	r16,zero,10e20 <__ieee754_pow+0x170>
   10d70:	00dffc34 	movhi	r3,32752
   10d74:	10c07426 	beq	r2,r3,10f48 <__ieee754_pow+0x298>
   10d78:	00cffc34 	movhi	r3,16368
   10d7c:	10c32726 	beq	r2,r3,11a1c <__ieee754_pow+0xd6c>
   10d80:	00d00034 	movhi	r3,16384
   10d84:	88c3cb26 	beq	r17,r3,11cb4 <__ieee754_pow+0x1004>
   10d88:	00cff834 	movhi	r3,16352
   10d8c:	88c0241e 	bne	r17,r3,10e20 <__ieee754_pow+0x170>
   10d90:	a8002316 	blt	r21,zero,10e20 <__ieee754_pow+0x170>
   10d94:	a80b883a 	mov	r5,r21
   10d98:	dfc01417 	ldw	ra,80(sp)
   10d9c:	df001317 	ldw	fp,76(sp)
   10da0:	ddc01217 	ldw	r23,72(sp)
   10da4:	dd801117 	ldw	r22,68(sp)
   10da8:	dd401017 	ldw	r21,64(sp)
   10dac:	dd000f17 	ldw	r20,60(sp)
   10db0:	dcc00e17 	ldw	r19,56(sp)
   10db4:	dc800d17 	ldw	r18,52(sp)
   10db8:	dc400c17 	ldw	r17,48(sp)
   10dbc:	dc000b17 	ldw	r16,44(sp)
   10dc0:	dec01504 	addi	sp,sp,84
   10dc4:	0011d701 	jmpi	11d70 <__ieee754_sqrt>
   10dc8:	002d883a 	mov	r22,zero
   10dcc:	003fd106 	br	10d14 <__ieee754_pow+0x64>
   10dd0:	2000011e 	bne	r4,zero,10dd8 <__ieee754_pow+0x128>
   10dd4:	a0bfe10e 	bge	r20,r2,10d5c <__ieee754_pow+0xac>
   10dd8:	002d883a 	mov	r22,zero
   10ddc:	00dffe34 	movhi	r3,32760
   10de0:	003fcd06 	br	10d18 <__ieee754_pow+0x68>
   10de4:	00d0d034 	movhi	r3,17216
   10de8:	10c0540e 	bge	r2,r3,10f3c <__ieee754_pow+0x28c>
   10dec:	00cffc34 	movhi	r3,16368
   10df0:	10c00916 	blt	r2,r3,10e18 <__ieee754_pow+0x168>
   10df4:	1007d53a 	srai	r3,r2,20
   10df8:	18ff0044 	addi	r3,r3,-1023
   10dfc:	19400550 	cmplti	r5,r3,21
   10e00:	2803a41e 	bne	r5,zero,11c94 <__ieee754_pow+0xfe4>
   10e04:	01400d04 	movi	r5,52
   10e08:	28c7c83a 	sub	r3,r5,r3
   10e0c:	80cad83a 	srl	r5,r16,r3
   10e10:	28c6983a 	sll	r3,r5,r3
   10e14:	1c03cb26 	beq	r3,r16,11d44 <__ieee754_pow+0x1094>
   10e18:	0025883a 	mov	r18,zero
   10e1c:	803fd626 	beq	r16,zero,10d78 <__ieee754_pow+0xc8>
   10e20:	00e00034 	movhi	r3,32768
   10e24:	18ffffc4 	addi	r3,r3,-1
   10e28:	202d883a 	mov	r22,r4
   10e2c:	a8c6703a 	and	r3,r21,r3
   10e30:	20001626 	beq	r4,zero,10e8c <__ieee754_pow+0x1dc>
   10e34:	a826d7fa 	srli	r19,r21,31
   10e38:	9cffffc4 	addi	r19,r19,-1
   10e3c:	94cab03a 	or	r5,r18,r19
   10e40:	28002126 	beq	r5,zero,10ec8 <__ieee754_pow+0x218>
   10e44:	01507834 	movhi	r5,16864
   10e48:	2880490e 	bge	r5,r2,10f70 <__ieee754_pow+0x2c0>
   10e4c:	0150fc34 	movhi	r5,17392
   10e50:	28831e0e 	bge	r5,r2,11acc <__ieee754_pow+0xe1c>
   10e54:	008ffc34 	movhi	r2,16368
   10e58:	a080270e 	bge	r20,r2,10ef8 <__ieee754_pow+0x248>
   10e5c:	88002716 	blt	r17,zero,10efc <__ieee754_pow+0x24c>
   10e60:	002d883a 	mov	r22,zero
   10e64:	0007883a 	mov	r3,zero
   10e68:	003fab06 	br	10d18 <__ieee754_pow+0x68>
   10e6c:	803fbd26 	beq	r16,zero,10d64 <__ieee754_pow+0xb4>
   10e70:	003fa306 	br	10d00 <__ieee754_pow+0x50>
   10e74:	2000141e 	bne	r4,zero,10ec8 <__ieee754_pow+0x218>
   10e78:	00e00034 	movhi	r3,32768
   10e7c:	18ffffc4 	addi	r3,r3,-1
   10e80:	002d883a 	mov	r22,zero
   10e84:	a8c6703a 	and	r3,r21,r3
   10e88:	0025883a 	mov	r18,zero
   10e8c:	a0000526 	beq	r20,zero,10ea4 <__ieee754_pow+0x1f4>
   10e90:	01500034 	movhi	r5,16384
   10e94:	297fffc4 	addi	r5,r5,-1
   10e98:	a94a703a 	and	r5,r21,r5
   10e9c:	018ffc34 	movhi	r6,16368
   10ea0:	29bfe41e 	bne	r5,r6,10e34 <__ieee754_pow+0x184>
   10ea4:	88001e16 	blt	r17,zero,10f20 <__ieee754_pow+0x270>
   10ea8:	a83f9b0e 	bge	r21,zero,10d18 <__ieee754_pow+0x68>
   10eac:	00b00434 	movhi	r2,49168
   10eb0:	a085883a 	add	r2,r20,r2
   10eb4:	1484b03a 	or	r2,r2,r18
   10eb8:	10038b1e 	bne	r2,zero,11ce8 <__ieee754_pow+0x1038>
   10ebc:	b00d883a 	mov	r6,r22
   10ec0:	180f883a 	mov	r7,r3
   10ec4:	00000206 	br	10ed0 <__ieee754_pow+0x220>
   10ec8:	200d883a 	mov	r6,r4
   10ecc:	a80f883a 	mov	r7,r21
   10ed0:	3009883a 	mov	r4,r6
   10ed4:	380b883a 	mov	r5,r7
   10ed8:	0013f940 	call	13f94 <__subdf3>
   10edc:	100d883a 	mov	r6,r2
   10ee0:	180f883a 	mov	r7,r3
   10ee4:	1009883a 	mov	r4,r2
   10ee8:	180b883a 	mov	r5,r3
   10eec:	0012c680 	call	12c68 <__divdf3>
   10ef0:	102d883a 	mov	r22,r2
   10ef4:	003f8806 	br	10d18 <__ieee754_pow+0x68>
   10ef8:	047fd90e 	bge	zero,r17,10e60 <__ieee754_pow+0x1b0>
   10efc:	01a20034 	movhi	r6,34816
   10f00:	01df8e34 	movhi	r7,32312
   10f04:	319d6704 	addi	r6,r6,30108
   10f08:	39f90f04 	addi	r7,r7,-7108
   10f0c:	3009883a 	mov	r4,r6
   10f10:	380b883a 	mov	r5,r7
   10f14:	00137e80 	call	137e8 <__muldf3>
   10f18:	102d883a 	mov	r22,r2
   10f1c:	003f7e06 	br	10d18 <__ieee754_pow+0x68>
   10f20:	180f883a 	mov	r7,r3
   10f24:	000d883a 	mov	r6,zero
   10f28:	0009883a 	mov	r4,zero
   10f2c:	014ffc34 	movhi	r5,16368
   10f30:	0012c680 	call	12c68 <__divdf3>
   10f34:	102d883a 	mov	r22,r2
   10f38:	003fdb06 	br	10ea8 <__ieee754_pow+0x1f8>
   10f3c:	04800084 	movi	r18,2
   10f40:	803fb71e 	bne	r16,zero,10e20 <__ieee754_pow+0x170>
   10f44:	003f8a06 	br	10d70 <__ieee754_pow+0xc0>
   10f48:	00b00434 	movhi	r2,49168
   10f4c:	a085883a 	add	r2,r20,r2
   10f50:	1108b03a 	or	r4,r2,r4
   10f54:	203f9c26 	beq	r4,zero,10dc8 <__ieee754_pow+0x118>
   10f58:	008ffc34 	movhi	r2,16368
   10f5c:	002d883a 	mov	r22,zero
   10f60:	a0833416 	blt	r20,r2,11c34 <__ieee754_pow+0xf84>
   10f64:	883fbf16 	blt	r17,zero,10e64 <__ieee754_pow+0x1b4>
   10f68:	8807883a 	mov	r3,r17
   10f6c:	003f6a06 	br	10d18 <__ieee754_pow+0x68>
   10f70:	a95ffc2c 	andhi	r5,r21,32752
   10f74:	000d883a 	mov	r6,zero
   10f78:	2800061e 	bne	r5,zero,10f94 <__ieee754_pow+0x2e4>
   10f7c:	01d0d034 	movhi	r7,17216
   10f80:	180b883a 	mov	r5,r3
   10f84:	00137e80 	call	137e8 <__muldf3>
   10f88:	102d883a 	mov	r22,r2
   10f8c:	1829883a 	mov	r20,r3
   10f90:	01bff2c4 	movi	r6,-53
   10f94:	a00bd53a 	srai	r5,r20,20
   10f98:	00800434 	movhi	r2,16
   10f9c:	10bfffc4 	addi	r2,r2,-1
   10fa0:	01000134 	movhi	r4,4
   10fa4:	297f0044 	addi	r5,r5,-1023
   10fa8:	a086703a 	and	r3,r20,r2
   10fac:	21262384 	addi	r4,r4,-26482
   10fb0:	2999883a 	add	r12,r5,r6
   10fb4:	1f0ffc34 	orhi	fp,r3,16368
   10fb8:	20c0060e 	bge	r4,r3,10fd4 <__ieee754_pow+0x324>
   10fbc:	00800334 	movhi	r2,12
   10fc0:	10ad9e44 	addi	r2,r2,-18823
   10fc4:	10c34c0e 	bge	r2,r3,11cf8 <__ieee754_pow+0x1048>
   10fc8:	00bffc34 	movhi	r2,65520
   10fcc:	63000044 	addi	r12,r12,1
   10fd0:	e0b9883a 	add	fp,fp,r2
   10fd4:	d8000015 	stw	zero,0(sp)
   10fd8:	d8000115 	stw	zero,4(sp)
   10fdc:	d8000a15 	stw	zero,40(sp)
   10fe0:	001f883a 	mov	r15,zero
   10fe4:	002f883a 	mov	r23,zero
   10fe8:	034ffc34 	movhi	r13,16368
   10fec:	680f883a 	mov	r7,r13
   10ff0:	b009883a 	mov	r4,r22
   10ff4:	e00b883a 	mov	r5,fp
   10ff8:	000d883a 	mov	r6,zero
   10ffc:	dbc00915 	stw	r15,36(sp)
   11000:	db000815 	stw	r12,32(sp)
   11004:	db400215 	stw	r13,8(sp)
   11008:	0013f940 	call	13f94 <__subdf3>
   1100c:	db400217 	ldw	r13,8(sp)
   11010:	b009883a 	mov	r4,r22
   11014:	e00b883a 	mov	r5,fp
   11018:	680f883a 	mov	r7,r13
   1101c:	000d883a 	mov	r6,zero
   11020:	db400615 	stw	r13,24(sp)
   11024:	d8800315 	stw	r2,12(sp)
   11028:	d8c00215 	stw	r3,8(sp)
   1102c:	00123780 	call	12378 <__adddf3>
   11030:	100d883a 	mov	r6,r2
   11034:	180f883a 	mov	r7,r3
   11038:	0009883a 	mov	r4,zero
   1103c:	014ffc34 	movhi	r5,16368
   11040:	0012c680 	call	12c68 <__divdf3>
   11044:	dac00217 	ldw	r11,8(sp)
   11048:	da400317 	ldw	r9,12(sp)
   1104c:	100d883a 	mov	r6,r2
   11050:	580b883a 	mov	r5,r11
   11054:	4809883a 	mov	r4,r9
   11058:	180f883a 	mov	r7,r3
   1105c:	d8800515 	stw	r2,20(sp)
   11060:	d8c00415 	stw	r3,16(sp)
   11064:	00137e80 	call	137e8 <__muldf3>
   11068:	e009d07a 	srai	r4,fp,1
   1106c:	01400234 	movhi	r5,8
   11070:	000d883a 	mov	r6,zero
   11074:	21080034 	orhi	r4,r4,8192
   11078:	2149883a 	add	r4,r4,r5
   1107c:	25ef883a 	add	r23,r4,r23
   11080:	b80f883a 	mov	r7,r23
   11084:	0009883a 	mov	r4,zero
   11088:	180b883a 	mov	r5,r3
   1108c:	1829883a 	mov	r20,r3
   11090:	102b883a 	mov	r21,r2
   11094:	00137e80 	call	137e8 <__muldf3>
   11098:	da400317 	ldw	r9,12(sp)
   1109c:	dac00217 	ldw	r11,8(sp)
   110a0:	100d883a 	mov	r6,r2
   110a4:	4809883a 	mov	r4,r9
   110a8:	580b883a 	mov	r5,r11
   110ac:	180f883a 	mov	r7,r3
   110b0:	0013f940 	call	13f94 <__subdf3>
   110b4:	db400617 	ldw	r13,24(sp)
   110b8:	b80b883a 	mov	r5,r23
   110bc:	000d883a 	mov	r6,zero
   110c0:	680f883a 	mov	r7,r13
   110c4:	0009883a 	mov	r4,zero
   110c8:	182f883a 	mov	r23,r3
   110cc:	d8800215 	stw	r2,8(sp)
   110d0:	0013f940 	call	13f94 <__subdf3>
   110d4:	b009883a 	mov	r4,r22
   110d8:	e00b883a 	mov	r5,fp
   110dc:	100d883a 	mov	r6,r2
   110e0:	180f883a 	mov	r7,r3
   110e4:	0013f940 	call	13f94 <__subdf3>
   110e8:	a00f883a 	mov	r7,r20
   110ec:	000d883a 	mov	r6,zero
   110f0:	1009883a 	mov	r4,r2
   110f4:	180b883a 	mov	r5,r3
   110f8:	00137e80 	call	137e8 <__muldf3>
   110fc:	dac00217 	ldw	r11,8(sp)
   11100:	b80b883a 	mov	r5,r23
   11104:	100d883a 	mov	r6,r2
   11108:	5809883a 	mov	r4,r11
   1110c:	180f883a 	mov	r7,r3
   11110:	0013f940 	call	13f94 <__subdf3>
   11114:	da000417 	ldw	r8,16(sp)
   11118:	da800517 	ldw	r10,20(sp)
   1111c:	1009883a 	mov	r4,r2
   11120:	400f883a 	mov	r7,r8
   11124:	500d883a 	mov	r6,r10
   11128:	180b883a 	mov	r5,r3
   1112c:	00137e80 	call	137e8 <__muldf3>
   11130:	a80d883a 	mov	r6,r21
   11134:	a00f883a 	mov	r7,r20
   11138:	a809883a 	mov	r4,r21
   1113c:	a00b883a 	mov	r5,r20
   11140:	d8800415 	stw	r2,16(sp)
   11144:	d8c00315 	stw	r3,12(sp)
   11148:	00137e80 	call	137e8 <__muldf3>
   1114c:	01929174 	movhi	r6,19013
   11150:	01cff2b4 	movhi	r7,16330
   11154:	3193bbc4 	addi	r6,r6,20207
   11158:	39df8a04 	addi	r7,r7,32296
   1115c:	1009883a 	mov	r4,r2
   11160:	180b883a 	mov	r5,r3
   11164:	102f883a 	mov	r23,r2
   11168:	182d883a 	mov	r22,r3
   1116c:	00137e80 	call	137e8 <__muldf3>
   11170:	01a4f2b4 	movhi	r6,37834
   11174:	01cff3b4 	movhi	r7,16334
   11178:	31b6d944 	addi	r6,r6,-9371
   1117c:	39e19284 	addi	r7,r7,-31158
   11180:	1009883a 	mov	r4,r2
   11184:	180b883a 	mov	r5,r3
   11188:	00123780 	call	12378 <__adddf3>
   1118c:	b80d883a 	mov	r6,r23
   11190:	b00f883a 	mov	r7,r22
   11194:	1009883a 	mov	r4,r2
   11198:	180b883a 	mov	r5,r3
   1119c:	00137e80 	call	137e8 <__muldf3>
   111a0:	01aa4774 	movhi	r6,43293
   111a4:	01cff474 	movhi	r7,16337
   111a8:	31904044 	addi	r6,r6,16641
   111ac:	39dd1804 	addi	r7,r7,29792
   111b0:	1009883a 	mov	r4,r2
   111b4:	180b883a 	mov	r5,r3
   111b8:	00123780 	call	12378 <__adddf3>
   111bc:	b80d883a 	mov	r6,r23
   111c0:	b00f883a 	mov	r7,r22
   111c4:	1009883a 	mov	r4,r2
   111c8:	180b883a 	mov	r5,r3
   111cc:	00137e80 	call	137e8 <__muldf3>
   111d0:	019463f4 	movhi	r6,20879
   111d4:	01cff574 	movhi	r7,16341
   111d8:	31899344 	addi	r6,r6,9805
   111dc:	39d55544 	addi	r7,r7,21845
   111e0:	1009883a 	mov	r4,r2
   111e4:	180b883a 	mov	r5,r3
   111e8:	00123780 	call	12378 <__adddf3>
   111ec:	b80d883a 	mov	r6,r23
   111f0:	b00f883a 	mov	r7,r22
   111f4:	1009883a 	mov	r4,r2
   111f8:	180b883a 	mov	r5,r3
   111fc:	00137e80 	call	137e8 <__muldf3>
   11200:	01b6dc34 	movhi	r6,56176
   11204:	01cff6f4 	movhi	r7,16347
   11208:	31aaffc4 	addi	r6,r6,-21505
   1120c:	39db6d84 	addi	r7,r7,28086
   11210:	1009883a 	mov	r4,r2
   11214:	180b883a 	mov	r5,r3
   11218:	00123780 	call	12378 <__adddf3>
   1121c:	b80d883a 	mov	r6,r23
   11220:	b00f883a 	mov	r7,r22
   11224:	1009883a 	mov	r4,r2
   11228:	180b883a 	mov	r5,r3
   1122c:	00137e80 	call	137e8 <__muldf3>
   11230:	018cccf4 	movhi	r6,13107
   11234:	01cff8f4 	movhi	r7,16355
   11238:	318cc0c4 	addi	r6,r6,13059
   1123c:	39ccccc4 	addi	r7,r7,13107
   11240:	1009883a 	mov	r4,r2
   11244:	180b883a 	mov	r5,r3
   11248:	00123780 	call	12378 <__adddf3>
   1124c:	b80d883a 	mov	r6,r23
   11250:	b00f883a 	mov	r7,r22
   11254:	b809883a 	mov	r4,r23
   11258:	b00b883a 	mov	r5,r22
   1125c:	1839883a 	mov	fp,r3
   11260:	d8800215 	stw	r2,8(sp)
   11264:	00137e80 	call	137e8 <__muldf3>
   11268:	dac00217 	ldw	r11,8(sp)
   1126c:	e00b883a 	mov	r5,fp
   11270:	100d883a 	mov	r6,r2
   11274:	5809883a 	mov	r4,r11
   11278:	180f883a 	mov	r7,r3
   1127c:	00137e80 	call	137e8 <__muldf3>
   11280:	a00f883a 	mov	r7,r20
   11284:	a809883a 	mov	r4,r21
   11288:	a00b883a 	mov	r5,r20
   1128c:	000d883a 	mov	r6,zero
   11290:	102f883a 	mov	r23,r2
   11294:	182d883a 	mov	r22,r3
   11298:	00123780 	call	12378 <__adddf3>
   1129c:	da800417 	ldw	r10,16(sp)
   112a0:	da400317 	ldw	r9,12(sp)
   112a4:	1009883a 	mov	r4,r2
   112a8:	500d883a 	mov	r6,r10
   112ac:	480f883a 	mov	r7,r9
   112b0:	180b883a 	mov	r5,r3
   112b4:	da800715 	stw	r10,28(sp)
   112b8:	da400615 	stw	r9,24(sp)
   112bc:	00137e80 	call	137e8 <__muldf3>
   112c0:	b80d883a 	mov	r6,r23
   112c4:	b00f883a 	mov	r7,r22
   112c8:	1009883a 	mov	r4,r2
   112cc:	180b883a 	mov	r5,r3
   112d0:	00123780 	call	12378 <__adddf3>
   112d4:	a00f883a 	mov	r7,r20
   112d8:	a00b883a 	mov	r5,r20
   112dc:	000d883a 	mov	r6,zero
   112e0:	0009883a 	mov	r4,zero
   112e4:	d8800315 	stw	r2,12(sp)
   112e8:	d8c00215 	stw	r3,8(sp)
   112ec:	00137e80 	call	137e8 <__muldf3>
   112f0:	000d883a 	mov	r6,zero
   112f4:	01d00234 	movhi	r7,16392
   112f8:	1009883a 	mov	r4,r2
   112fc:	180b883a 	mov	r5,r3
   11300:	d8800515 	stw	r2,20(sp)
   11304:	d8c00415 	stw	r3,16(sp)
   11308:	00123780 	call	12378 <__adddf3>
   1130c:	da000317 	ldw	r8,12(sp)
   11310:	dac00217 	ldw	r11,8(sp)
   11314:	1009883a 	mov	r4,r2
   11318:	400d883a 	mov	r6,r8
   1131c:	580f883a 	mov	r7,r11
   11320:	180b883a 	mov	r5,r3
   11324:	00123780 	call	12378 <__adddf3>
   11328:	a00b883a 	mov	r5,r20
   1132c:	000d883a 	mov	r6,zero
   11330:	180f883a 	mov	r7,r3
   11334:	0009883a 	mov	r4,zero
   11338:	182d883a 	mov	r22,r3
   1133c:	00137e80 	call	137e8 <__muldf3>
   11340:	b00b883a 	mov	r5,r22
   11344:	000d883a 	mov	r6,zero
   11348:	01d00234 	movhi	r7,16392
   1134c:	0009883a 	mov	r4,zero
   11350:	1039883a 	mov	fp,r2
   11354:	182f883a 	mov	r23,r3
   11358:	0013f940 	call	13f94 <__subdf3>
   1135c:	db800517 	ldw	r14,20(sp)
   11360:	db400417 	ldw	r13,16(sp)
   11364:	1009883a 	mov	r4,r2
   11368:	700d883a 	mov	r6,r14
   1136c:	680f883a 	mov	r7,r13
   11370:	180b883a 	mov	r5,r3
   11374:	0013f940 	call	13f94 <__subdf3>
   11378:	da000317 	ldw	r8,12(sp)
   1137c:	dac00217 	ldw	r11,8(sp)
   11380:	100d883a 	mov	r6,r2
   11384:	4009883a 	mov	r4,r8
   11388:	580b883a 	mov	r5,r11
   1138c:	180f883a 	mov	r7,r3
   11390:	0013f940 	call	13f94 <__subdf3>
   11394:	a80d883a 	mov	r6,r21
   11398:	a00f883a 	mov	r7,r20
   1139c:	1009883a 	mov	r4,r2
   113a0:	180b883a 	mov	r5,r3
   113a4:	00137e80 	call	137e8 <__muldf3>
   113a8:	da800717 	ldw	r10,28(sp)
   113ac:	da400617 	ldw	r9,24(sp)
   113b0:	b00f883a 	mov	r7,r22
   113b4:	5009883a 	mov	r4,r10
   113b8:	480b883a 	mov	r5,r9
   113bc:	000d883a 	mov	r6,zero
   113c0:	102b883a 	mov	r21,r2
   113c4:	1829883a 	mov	r20,r3
   113c8:	00137e80 	call	137e8 <__muldf3>
   113cc:	a809883a 	mov	r4,r21
   113d0:	a00b883a 	mov	r5,r20
   113d4:	100d883a 	mov	r6,r2
   113d8:	180f883a 	mov	r7,r3
   113dc:	00123780 	call	12378 <__adddf3>
   113e0:	e009883a 	mov	r4,fp
   113e4:	b80b883a 	mov	r5,r23
   113e8:	100d883a 	mov	r6,r2
   113ec:	180f883a 	mov	r7,r3
   113f0:	102d883a 	mov	r22,r2
   113f4:	182b883a 	mov	r21,r3
   113f8:	00123780 	call	12378 <__adddf3>
   113fc:	01cffbf4 	movhi	r7,16367
   11400:	01b80034 	movhi	r6,57344
   11404:	39f1c244 	addi	r7,r7,-14583
   11408:	0009883a 	mov	r4,zero
   1140c:	180b883a 	mov	r5,r3
   11410:	1829883a 	mov	r20,r3
   11414:	00137e80 	call	137e8 <__muldf3>
   11418:	e00d883a 	mov	r6,fp
   1141c:	b80f883a 	mov	r7,r23
   11420:	a00b883a 	mov	r5,r20
   11424:	0009883a 	mov	r4,zero
   11428:	1039883a 	mov	fp,r2
   1142c:	182f883a 	mov	r23,r3
   11430:	0013f940 	call	13f94 <__subdf3>
   11434:	b009883a 	mov	r4,r22
   11438:	a80b883a 	mov	r5,r21
   1143c:	100d883a 	mov	r6,r2
   11440:	180f883a 	mov	r7,r3
   11444:	0013f940 	call	13f94 <__subdf3>
   11448:	01b70eb4 	movhi	r6,56378
   1144c:	01cffbf4 	movhi	r7,16367
   11450:	3180ff44 	addi	r6,r6,1021
   11454:	39f1c244 	addi	r7,r7,-14583
   11458:	1009883a 	mov	r4,r2
   1145c:	180b883a 	mov	r5,r3
   11460:	00137e80 	call	137e8 <__muldf3>
   11464:	018516f4 	movhi	r6,5211
   11468:	01ef8fb4 	movhi	r7,48702
   1146c:	a00b883a 	mov	r5,r20
   11470:	31807d44 	addi	r6,r6,501
   11474:	39cbf804 	addi	r7,r7,12256
   11478:	0009883a 	mov	r4,zero
   1147c:	102d883a 	mov	r22,r2
   11480:	182b883a 	mov	r21,r3
   11484:	00137e80 	call	137e8 <__muldf3>
   11488:	b009883a 	mov	r4,r22
   1148c:	a80b883a 	mov	r5,r21
   11490:	100d883a 	mov	r6,r2
   11494:	180f883a 	mov	r7,r3
   11498:	00123780 	call	12378 <__adddf3>
   1149c:	dbc00917 	ldw	r15,36(sp)
   114a0:	d9800a17 	ldw	r6,40(sp)
   114a4:	180b883a 	mov	r5,r3
   114a8:	780f883a 	mov	r7,r15
   114ac:	1009883a 	mov	r4,r2
   114b0:	00123780 	call	12378 <__adddf3>
   114b4:	db000817 	ldw	r12,32(sp)
   114b8:	102d883a 	mov	r22,r2
   114bc:	182b883a 	mov	r21,r3
   114c0:	6009883a 	mov	r4,r12
   114c4:	001491c0 	call	1491c <__floatsidf>
   114c8:	b00d883a 	mov	r6,r22
   114cc:	a80f883a 	mov	r7,r21
   114d0:	e009883a 	mov	r4,fp
   114d4:	b80b883a 	mov	r5,r23
   114d8:	d8800315 	stw	r2,12(sp)
   114dc:	d8c00215 	stw	r3,8(sp)
   114e0:	00123780 	call	12378 <__adddf3>
   114e4:	d9800017 	ldw	r6,0(sp)
   114e8:	d9c00117 	ldw	r7,4(sp)
   114ec:	1009883a 	mov	r4,r2
   114f0:	180b883a 	mov	r5,r3
   114f4:	00123780 	call	12378 <__adddf3>
   114f8:	da800317 	ldw	r10,12(sp)
   114fc:	da400217 	ldw	r9,8(sp)
   11500:	1009883a 	mov	r4,r2
   11504:	500d883a 	mov	r6,r10
   11508:	480f883a 	mov	r7,r9
   1150c:	180b883a 	mov	r5,r3
   11510:	00123780 	call	12378 <__adddf3>
   11514:	da800317 	ldw	r10,12(sp)
   11518:	da400217 	ldw	r9,8(sp)
   1151c:	0009883a 	mov	r4,zero
   11520:	500d883a 	mov	r6,r10
   11524:	480f883a 	mov	r7,r9
   11528:	180b883a 	mov	r5,r3
   1152c:	1829883a 	mov	r20,r3
   11530:	0013f940 	call	13f94 <__subdf3>
   11534:	d9800017 	ldw	r6,0(sp)
   11538:	d9c00117 	ldw	r7,4(sp)
   1153c:	1009883a 	mov	r4,r2
   11540:	180b883a 	mov	r5,r3
   11544:	0013f940 	call	13f94 <__subdf3>
   11548:	e00d883a 	mov	r6,fp
   1154c:	b80f883a 	mov	r7,r23
   11550:	1009883a 	mov	r4,r2
   11554:	180b883a 	mov	r5,r3
   11558:	0013f940 	call	13f94 <__subdf3>
   1155c:	b009883a 	mov	r4,r22
   11560:	100d883a 	mov	r6,r2
   11564:	180f883a 	mov	r7,r3
   11568:	a80b883a 	mov	r5,r21
   1156c:	94bfffc4 	addi	r18,r18,-1
   11570:	0013f940 	call	13f94 <__subdf3>
   11574:	94e6b03a 	or	r19,r18,r19
   11578:	102f883a 	mov	r23,r2
   1157c:	182d883a 	mov	r22,r3
   11580:	9801501e 	bne	r19,zero,11ac4 <__ieee754_pow+0xe14>
   11584:	04effc34 	movhi	r19,49136
   11588:	880f883a 	mov	r7,r17
   1158c:	8009883a 	mov	r4,r16
   11590:	880b883a 	mov	r5,r17
   11594:	000d883a 	mov	r6,zero
   11598:	0013f940 	call	13f94 <__subdf3>
   1159c:	a00f883a 	mov	r7,r20
   115a0:	000d883a 	mov	r6,zero
   115a4:	1009883a 	mov	r4,r2
   115a8:	180b883a 	mov	r5,r3
   115ac:	00137e80 	call	137e8 <__muldf3>
   115b0:	800d883a 	mov	r6,r16
   115b4:	880f883a 	mov	r7,r17
   115b8:	b809883a 	mov	r4,r23
   115bc:	b00b883a 	mov	r5,r22
   115c0:	102b883a 	mov	r21,r2
   115c4:	1825883a 	mov	r18,r3
   115c8:	00137e80 	call	137e8 <__muldf3>
   115cc:	a809883a 	mov	r4,r21
   115d0:	900b883a 	mov	r5,r18
   115d4:	100d883a 	mov	r6,r2
   115d8:	180f883a 	mov	r7,r3
   115dc:	00123780 	call	12378 <__adddf3>
   115e0:	880f883a 	mov	r7,r17
   115e4:	a00b883a 	mov	r5,r20
   115e8:	000d883a 	mov	r6,zero
   115ec:	0009883a 	mov	r4,zero
   115f0:	1029883a 	mov	r20,r2
   115f4:	182b883a 	mov	r21,r3
   115f8:	00137e80 	call	137e8 <__muldf3>
   115fc:	a80b883a 	mov	r5,r21
   11600:	100d883a 	mov	r6,r2
   11604:	180f883a 	mov	r7,r3
   11608:	a009883a 	mov	r4,r20
   1160c:	1023883a 	mov	r17,r2
   11610:	1825883a 	mov	r18,r3
   11614:	00123780 	call	12378 <__adddf3>
   11618:	01502434 	movhi	r5,16528
   1161c:	1821883a 	mov	r16,r3
   11620:	8817883a 	mov	r11,r17
   11624:	902f883a 	mov	r23,r18
   11628:	102d883a 	mov	r22,r2
   1162c:	1839883a 	mov	fp,r3
   11630:	1940fe16 	blt	r3,r5,11a2c <__ieee754_pow+0xd7c>
   11634:	1947c83a 	sub	r3,r3,r5
   11638:	1d86b03a 	or	r3,r3,r22
   1163c:	1801851e 	bne	r3,zero,11c54 <__ieee754_pow+0xfa4>
   11640:	01994b34 	movhi	r6,25900
   11644:	01cf25f4 	movhi	r7,15511
   11648:	31a0bf84 	addi	r6,r6,-32002
   1164c:	39c551c4 	addi	r7,r7,5447
   11650:	a009883a 	mov	r4,r20
   11654:	a80b883a 	mov	r5,r21
   11658:	00123780 	call	12378 <__adddf3>
   1165c:	880d883a 	mov	r6,r17
   11660:	900f883a 	mov	r7,r18
   11664:	b009883a 	mov	r4,r22
   11668:	800b883a 	mov	r5,r16
   1166c:	1039883a 	mov	fp,r2
   11670:	182f883a 	mov	r23,r3
   11674:	0013f940 	call	13f94 <__subdf3>
   11678:	100d883a 	mov	r6,r2
   1167c:	180f883a 	mov	r7,r3
   11680:	e009883a 	mov	r4,fp
   11684:	b80b883a 	mov	r5,r23
   11688:	00136180 	call	13618 <__gedf2>
   1168c:	00817116 	blt	zero,r2,11c54 <__ieee754_pow+0xfa4>
   11690:	800bd53a 	srai	r5,r16,20
   11694:	2941ffcc 	andi	r5,r5,2047
   11698:	00c00434 	movhi	r3,16
   1169c:	297f0084 	addi	r5,r5,-1022
   116a0:	194bd83a 	sra	r5,r3,r5
   116a4:	00800434 	movhi	r2,16
   116a8:	10bfffc4 	addi	r2,r2,-1
   116ac:	2c07883a 	add	r3,r5,r16
   116b0:	1809d53a 	srai	r4,r3,20
   116b4:	18ac703a 	and	r22,r3,r2
   116b8:	b5800434 	orhi	r22,r22,16
   116bc:	2101ffcc 	andi	r4,r4,2047
   116c0:	213f0044 	addi	r4,r4,-1023
   116c4:	110fd83a 	sra	r7,r2,r4
   116c8:	00800504 	movi	r2,20
   116cc:	1109c83a 	sub	r4,r2,r4
   116d0:	b105d83a 	sra	r2,r22,r4
   116d4:	01ce303a 	nor	r7,zero,r7
   116d8:	38ce703a 	and	r7,r7,r3
   116dc:	d8800315 	stw	r2,12(sp)
   116e0:	8000020e 	bge	r16,zero,116ec <__ieee754_pow+0xa3c>
   116e4:	0085c83a 	sub	r2,zero,r2
   116e8:	d8800315 	stw	r2,12(sp)
   116ec:	000d883a 	mov	r6,zero
   116f0:	8809883a 	mov	r4,r17
   116f4:	900b883a 	mov	r5,r18
   116f8:	0013f940 	call	13f94 <__subdf3>
   116fc:	100d883a 	mov	r6,r2
   11700:	180f883a 	mov	r7,r3
   11704:	a009883a 	mov	r4,r20
   11708:	a80b883a 	mov	r5,r21
   1170c:	182f883a 	mov	r23,r3
   11710:	d8800015 	stw	r2,0(sp)
   11714:	00123780 	call	12378 <__adddf3>
   11718:	d8800317 	ldw	r2,12(sp)
   1171c:	dac00017 	ldw	r11,0(sp)
   11720:	1839883a 	mov	fp,r3
   11724:	1014953a 	slli	r10,r2,20
   11728:	01cff9b4 	movhi	r7,16358
   1172c:	e00b883a 	mov	r5,fp
   11730:	000d883a 	mov	r6,zero
   11734:	39cb90c4 	addi	r7,r7,11843
   11738:	0009883a 	mov	r4,zero
   1173c:	da800215 	stw	r10,8(sp)
   11740:	dac00015 	stw	r11,0(sp)
   11744:	00137e80 	call	137e8 <__muldf3>
   11748:	dac00017 	ldw	r11,0(sp)
   1174c:	b80f883a 	mov	r7,r23
   11750:	e00b883a 	mov	r5,fp
   11754:	580d883a 	mov	r6,r11
   11758:	0009883a 	mov	r4,zero
   1175c:	102d883a 	mov	r22,r2
   11760:	182f883a 	mov	r23,r3
   11764:	0013f940 	call	13f94 <__subdf3>
   11768:	a009883a 	mov	r4,r20
   1176c:	a80b883a 	mov	r5,r21
   11770:	100d883a 	mov	r6,r2
   11774:	180f883a 	mov	r7,r3
   11778:	0013f940 	call	13f94 <__subdf3>
   1177c:	01bfbeb4 	movhi	r6,65274
   11780:	01cff9b4 	movhi	r7,16358
   11784:	318e7bc4 	addi	r6,r6,14831
   11788:	39cb9084 	addi	r7,r7,11842
   1178c:	1009883a 	mov	r4,r2
   11790:	180b883a 	mov	r5,r3
   11794:	00137e80 	call	137e8 <__muldf3>
   11798:	01832a34 	movhi	r6,3240
   1179c:	01ef8834 	movhi	r7,48672
   117a0:	e00b883a 	mov	r5,fp
   117a4:	319b0e44 	addi	r6,r6,27705
   117a8:	39d71844 	addi	r7,r7,23649
   117ac:	0009883a 	mov	r4,zero
   117b0:	1023883a 	mov	r17,r2
   117b4:	1821883a 	mov	r16,r3
   117b8:	00137e80 	call	137e8 <__muldf3>
   117bc:	8809883a 	mov	r4,r17
   117c0:	800b883a 	mov	r5,r16
   117c4:	100d883a 	mov	r6,r2
   117c8:	180f883a 	mov	r7,r3
   117cc:	00123780 	call	12378 <__adddf3>
   117d0:	100d883a 	mov	r6,r2
   117d4:	180f883a 	mov	r7,r3
   117d8:	b009883a 	mov	r4,r22
   117dc:	b80b883a 	mov	r5,r23
   117e0:	1029883a 	mov	r20,r2
   117e4:	1825883a 	mov	r18,r3
   117e8:	00123780 	call	12378 <__adddf3>
   117ec:	b00d883a 	mov	r6,r22
   117f0:	b80f883a 	mov	r7,r23
   117f4:	1009883a 	mov	r4,r2
   117f8:	180b883a 	mov	r5,r3
   117fc:	1023883a 	mov	r17,r2
   11800:	1821883a 	mov	r16,r3
   11804:	0013f940 	call	13f94 <__subdf3>
   11808:	a009883a 	mov	r4,r20
   1180c:	900b883a 	mov	r5,r18
   11810:	100d883a 	mov	r6,r2
   11814:	180f883a 	mov	r7,r3
   11818:	0013f940 	call	13f94 <__subdf3>
   1181c:	880d883a 	mov	r6,r17
   11820:	800f883a 	mov	r7,r16
   11824:	8809883a 	mov	r4,r17
   11828:	800b883a 	mov	r5,r16
   1182c:	1039883a 	mov	fp,r2
   11830:	182b883a 	mov	r21,r3
   11834:	00137e80 	call	137e8 <__muldf3>
   11838:	019caff4 	movhi	r6,29375
   1183c:	01cf99b4 	movhi	r7,15974
   11840:	31a93404 	addi	r6,r6,-23344
   11844:	39cdda44 	addi	r7,r7,14185
   11848:	1009883a 	mov	r4,r2
   1184c:	180b883a 	mov	r5,r3
   11850:	1029883a 	mov	r20,r2
   11854:	1825883a 	mov	r18,r3
   11858:	00137e80 	call	137e8 <__muldf3>
   1185c:	01b174b4 	movhi	r6,50642
   11860:	01cfaf34 	movhi	r7,16060
   11864:	319afc44 	addi	r6,r6,27633
   11868:	39ef5044 	addi	r7,r7,-17087
   1186c:	1009883a 	mov	r4,r2
   11870:	180b883a 	mov	r5,r3
   11874:	0013f940 	call	13f94 <__subdf3>
   11878:	a00d883a 	mov	r6,r20
   1187c:	900f883a 	mov	r7,r18
   11880:	1009883a 	mov	r4,r2
   11884:	180b883a 	mov	r5,r3
   11888:	00137e80 	call	137e8 <__muldf3>
   1188c:	01abc9b4 	movhi	r6,44838
   11890:	01cfc474 	movhi	r7,16145
   11894:	31b78b04 	addi	r6,r6,-8660
   11898:	39d59a84 	addi	r7,r7,22122
   1189c:	1009883a 	mov	r4,r2
   118a0:	180b883a 	mov	r5,r3
   118a4:	00123780 	call	12378 <__adddf3>
   118a8:	a00d883a 	mov	r6,r20
   118ac:	900f883a 	mov	r7,r18
   118b0:	1009883a 	mov	r4,r2
   118b4:	180b883a 	mov	r5,r3
   118b8:	00137e80 	call	137e8 <__muldf3>
   118bc:	0185aff4 	movhi	r6,5823
   118c0:	01cfd9f4 	movhi	r7,16231
   118c4:	31af64c4 	addi	r6,r6,-17005
   118c8:	39f05b04 	addi	r7,r7,-16020
   118cc:	1009883a 	mov	r4,r2
   118d0:	180b883a 	mov	r5,r3
   118d4:	0013f940 	call	13f94 <__subdf3>
   118d8:	a00d883a 	mov	r6,r20
   118dc:	900f883a 	mov	r7,r18
   118e0:	1009883a 	mov	r4,r2
   118e4:	180b883a 	mov	r5,r3
   118e8:	00137e80 	call	137e8 <__muldf3>
   118ec:	01955574 	movhi	r6,21845
   118f0:	01cff174 	movhi	r7,16325
   118f4:	31954f84 	addi	r6,r6,21822
   118f8:	39d55544 	addi	r7,r7,21845
   118fc:	1009883a 	mov	r4,r2
   11900:	180b883a 	mov	r5,r3
   11904:	00123780 	call	12378 <__adddf3>
   11908:	a00d883a 	mov	r6,r20
   1190c:	900f883a 	mov	r7,r18
   11910:	1009883a 	mov	r4,r2
   11914:	180b883a 	mov	r5,r3
   11918:	00137e80 	call	137e8 <__muldf3>
   1191c:	100d883a 	mov	r6,r2
   11920:	180f883a 	mov	r7,r3
   11924:	8809883a 	mov	r4,r17
   11928:	800b883a 	mov	r5,r16
   1192c:	0013f940 	call	13f94 <__subdf3>
   11930:	100d883a 	mov	r6,r2
   11934:	180f883a 	mov	r7,r3
   11938:	8809883a 	mov	r4,r17
   1193c:	800b883a 	mov	r5,r16
   11940:	1029883a 	mov	r20,r2
   11944:	1825883a 	mov	r18,r3
   11948:	00137e80 	call	137e8 <__muldf3>
   1194c:	a009883a 	mov	r4,r20
   11950:	900b883a 	mov	r5,r18
   11954:	000d883a 	mov	r6,zero
   11958:	01d00034 	movhi	r7,16384
   1195c:	d8800115 	stw	r2,4(sp)
   11960:	d8c00015 	stw	r3,0(sp)
   11964:	0013f940 	call	13f94 <__subdf3>
   11968:	da400117 	ldw	r9,4(sp)
   1196c:	da000017 	ldw	r8,0(sp)
   11970:	100d883a 	mov	r6,r2
   11974:	4809883a 	mov	r4,r9
   11978:	400b883a 	mov	r5,r8
   1197c:	180f883a 	mov	r7,r3
   11980:	0012c680 	call	12c68 <__divdf3>
   11984:	e00d883a 	mov	r6,fp
   11988:	a80f883a 	mov	r7,r21
   1198c:	8809883a 	mov	r4,r17
   11990:	800b883a 	mov	r5,r16
   11994:	1029883a 	mov	r20,r2
   11998:	1825883a 	mov	r18,r3
   1199c:	00137e80 	call	137e8 <__muldf3>
   119a0:	e00d883a 	mov	r6,fp
   119a4:	a80f883a 	mov	r7,r21
   119a8:	1009883a 	mov	r4,r2
   119ac:	180b883a 	mov	r5,r3
   119b0:	00123780 	call	12378 <__adddf3>
   119b4:	100d883a 	mov	r6,r2
   119b8:	180f883a 	mov	r7,r3
   119bc:	a009883a 	mov	r4,r20
   119c0:	900b883a 	mov	r5,r18
   119c4:	0013f940 	call	13f94 <__subdf3>
   119c8:	880d883a 	mov	r6,r17
   119cc:	800f883a 	mov	r7,r16
   119d0:	1009883a 	mov	r4,r2
   119d4:	180b883a 	mov	r5,r3
   119d8:	0013f940 	call	13f94 <__subdf3>
   119dc:	100d883a 	mov	r6,r2
   119e0:	0009883a 	mov	r4,zero
   119e4:	014ffc34 	movhi	r5,16368
   119e8:	180f883a 	mov	r7,r3
   119ec:	0013f940 	call	13f94 <__subdf3>
   119f0:	da800217 	ldw	r10,8(sp)
   119f4:	1009883a 	mov	r4,r2
   119f8:	50cd883a 	add	r6,r10,r3
   119fc:	300bd53a 	srai	r5,r6,20
   11a00:	0140ca0e 	bge	zero,r5,11d2c <__ieee754_pow+0x107c>
   11a04:	300b883a 	mov	r5,r6
   11a08:	000d883a 	mov	r6,zero
   11a0c:	980f883a 	mov	r7,r19
   11a10:	00137e80 	call	137e8 <__muldf3>
   11a14:	102d883a 	mov	r22,r2
   11a18:	003cbf06 	br	10d18 <__ieee754_pow+0x68>
   11a1c:	8800ab16 	blt	r17,zero,11ccc <__ieee754_pow+0x101c>
   11a20:	202d883a 	mov	r22,r4
   11a24:	a807883a 	mov	r3,r21
   11a28:	003cbb06 	br	10d18 <__ieee754_pow+0x68>
   11a2c:	01600034 	movhi	r5,32768
   11a30:	297fffc4 	addi	r5,r5,-1
   11a34:	00902474 	movhi	r2,16529
   11a38:	194a703a 	and	r5,r3,r5
   11a3c:	10b2ffc4 	addi	r2,r2,-13313
   11a40:	11407f0e 	bge	r2,r5,11c40 <__ieee754_pow+0xf90>
   11a44:	008fdbf4 	movhi	r2,16239
   11a48:	108d0004 	addi	r2,r2,13312
   11a4c:	1885883a 	add	r2,r3,r2
   11a50:	1584b03a 	or	r2,r2,r22
   11a54:	10000b1e 	bne	r2,zero,11a84 <__ieee754_pow+0xdd4>
   11a58:	880d883a 	mov	r6,r17
   11a5c:	900f883a 	mov	r7,r18
   11a60:	b009883a 	mov	r4,r22
   11a64:	180b883a 	mov	r5,r3
   11a68:	0013f940 	call	13f94 <__subdf3>
   11a6c:	a00d883a 	mov	r6,r20
   11a70:	a80f883a 	mov	r7,r21
   11a74:	1009883a 	mov	r4,r2
   11a78:	180b883a 	mov	r5,r3
   11a7c:	00136180 	call	13618 <__gedf2>
   11a80:	103f0316 	blt	r2,zero,11690 <__ieee754_pow+0x9e0>
   11a84:	01b0be74 	movhi	r6,49913
   11a88:	01c06974 	movhi	r7,421
   11a8c:	31bcd644 	addi	r6,r6,-3239
   11a90:	39db87c4 	addi	r7,r7,28191
   11a94:	0009883a 	mov	r4,zero
   11a98:	980b883a 	mov	r5,r19
   11a9c:	00137e80 	call	137e8 <__muldf3>
   11aa0:	01b0be74 	movhi	r6,49913
   11aa4:	01c06974 	movhi	r7,421
   11aa8:	31bcd644 	addi	r6,r6,-3239
   11aac:	39db87c4 	addi	r7,r7,28191
   11ab0:	1009883a 	mov	r4,r2
   11ab4:	180b883a 	mov	r5,r3
   11ab8:	00137e80 	call	137e8 <__muldf3>
   11abc:	102d883a 	mov	r22,r2
   11ac0:	003c9506 	br	10d18 <__ieee754_pow+0x68>
   11ac4:	04cffc34 	movhi	r19,16368
   11ac8:	003eaf06 	br	11588 <__ieee754_pow+0x8d8>
   11acc:	008ffc34 	movhi	r2,16368
   11ad0:	10bfff84 	addi	r2,r2,-2
   11ad4:	153ce10e 	bge	r2,r20,10e5c <__ieee754_pow+0x1ac>
   11ad8:	008ffc34 	movhi	r2,16368
   11adc:	153d0616 	blt	r2,r20,10ef8 <__ieee754_pow+0x248>
   11ae0:	000d883a 	mov	r6,zero
   11ae4:	01cffc34 	movhi	r7,16368
   11ae8:	180b883a 	mov	r5,r3
   11aec:	0013f940 	call	13f94 <__subdf3>
   11af0:	01cffdf4 	movhi	r7,16375
   11af4:	01980034 	movhi	r6,24576
   11af8:	39c551c4 	addi	r7,r7,5447
   11afc:	1009883a 	mov	r4,r2
   11b00:	180b883a 	mov	r5,r3
   11b04:	102b883a 	mov	r21,r2
   11b08:	1829883a 	mov	r20,r3
   11b0c:	00137e80 	call	137e8 <__muldf3>
   11b10:	01be17b4 	movhi	r6,63582
   11b14:	01cf9574 	movhi	r7,15957
   11b18:	a809883a 	mov	r4,r21
   11b1c:	a00b883a 	mov	r5,r20
   11b20:	31b7d104 	addi	r6,r6,-8380
   11b24:	39eb82c4 	addi	r7,r7,-20981
   11b28:	1039883a 	mov	fp,r2
   11b2c:	182f883a 	mov	r23,r3
   11b30:	00137e80 	call	137e8 <__muldf3>
   11b34:	a809883a 	mov	r4,r21
   11b38:	a00b883a 	mov	r5,r20
   11b3c:	000d883a 	mov	r6,zero
   11b40:	01cff434 	movhi	r7,16336
   11b44:	182d883a 	mov	r22,r3
   11b48:	d8800215 	stw	r2,8(sp)
   11b4c:	00137e80 	call	137e8 <__muldf3>
   11b50:	01155574 	movhi	r4,21845
   11b54:	014ff574 	movhi	r5,16341
   11b58:	100d883a 	mov	r6,r2
   11b5c:	180f883a 	mov	r7,r3
   11b60:	21155544 	addi	r4,r4,21845
   11b64:	29555544 	addi	r5,r5,21845
   11b68:	0013f940 	call	13f94 <__subdf3>
   11b6c:	a80d883a 	mov	r6,r21
   11b70:	a00f883a 	mov	r7,r20
   11b74:	1009883a 	mov	r4,r2
   11b78:	180b883a 	mov	r5,r3
   11b7c:	00137e80 	call	137e8 <__muldf3>
   11b80:	100d883a 	mov	r6,r2
   11b84:	180f883a 	mov	r7,r3
   11b88:	0009883a 	mov	r4,zero
   11b8c:	014ff834 	movhi	r5,16352
   11b90:	0013f940 	call	13f94 <__subdf3>
   11b94:	a80d883a 	mov	r6,r21
   11b98:	a00f883a 	mov	r7,r20
   11b9c:	a809883a 	mov	r4,r21
   11ba0:	a00b883a 	mov	r5,r20
   11ba4:	d8800115 	stw	r2,4(sp)
   11ba8:	d8c00015 	stw	r3,0(sp)
   11bac:	00137e80 	call	137e8 <__muldf3>
   11bb0:	da800117 	ldw	r10,4(sp)
   11bb4:	da400017 	ldw	r9,0(sp)
   11bb8:	100d883a 	mov	r6,r2
   11bbc:	5009883a 	mov	r4,r10
   11bc0:	480b883a 	mov	r5,r9
   11bc4:	180f883a 	mov	r7,r3
   11bc8:	00137e80 	call	137e8 <__muldf3>
   11bcc:	01994b34 	movhi	r6,25900
   11bd0:	01cffdf4 	movhi	r7,16375
   11bd4:	31a0bf84 	addi	r6,r6,-32002
   11bd8:	39c551c4 	addi	r7,r7,5447
   11bdc:	1009883a 	mov	r4,r2
   11be0:	180b883a 	mov	r5,r3
   11be4:	00137e80 	call	137e8 <__muldf3>
   11be8:	da000217 	ldw	r8,8(sp)
   11bec:	b00b883a 	mov	r5,r22
   11bf0:	100d883a 	mov	r6,r2
   11bf4:	4009883a 	mov	r4,r8
   11bf8:	180f883a 	mov	r7,r3
   11bfc:	0013f940 	call	13f94 <__subdf3>
   11c00:	100d883a 	mov	r6,r2
   11c04:	180f883a 	mov	r7,r3
   11c08:	e009883a 	mov	r4,fp
   11c0c:	b80b883a 	mov	r5,r23
   11c10:	102d883a 	mov	r22,r2
   11c14:	182b883a 	mov	r21,r3
   11c18:	00123780 	call	12378 <__adddf3>
   11c1c:	1829883a 	mov	r20,r3
   11c20:	e00d883a 	mov	r6,fp
   11c24:	b80f883a 	mov	r7,r23
   11c28:	0009883a 	mov	r4,zero
   11c2c:	180b883a 	mov	r5,r3
   11c30:	003e4906 	br	11558 <__ieee754_pow+0x8a8>
   11c34:	883c8b0e 	bge	r17,zero,10e64 <__ieee754_pow+0x1b4>
   11c38:	88e0003c 	xorhi	r3,r17,32768
   11c3c:	003c3606 	br	10d18 <__ieee754_pow+0x68>
   11c40:	008ff834 	movhi	r2,16352
   11c44:	11404816 	blt	r2,r5,11d68 <__ieee754_pow+0x10b8>
   11c48:	0015883a 	mov	r10,zero
   11c4c:	d8000315 	stw	zero,12(sp)
   11c50:	003eb506 	br	11728 <__ieee754_pow+0xa78>
   11c54:	01a20034 	movhi	r6,34816
   11c58:	01df8e34 	movhi	r7,32312
   11c5c:	319d6704 	addi	r6,r6,30108
   11c60:	39f90f04 	addi	r7,r7,-7108
   11c64:	0009883a 	mov	r4,zero
   11c68:	980b883a 	mov	r5,r19
   11c6c:	00137e80 	call	137e8 <__muldf3>
   11c70:	01a20034 	movhi	r6,34816
   11c74:	01df8e34 	movhi	r7,32312
   11c78:	319d6704 	addi	r6,r6,30108
   11c7c:	39f90f04 	addi	r7,r7,-7108
   11c80:	1009883a 	mov	r4,r2
   11c84:	180b883a 	mov	r5,r3
   11c88:	00137e80 	call	137e8 <__muldf3>
   11c8c:	102d883a 	mov	r22,r2
   11c90:	003c2106 	br	10d18 <__ieee754_pow+0x68>
   11c94:	803c771e 	bne	r16,zero,10e74 <__ieee754_pow+0x1c4>
   11c98:	01400504 	movi	r5,20
   11c9c:	28c7c83a 	sub	r3,r5,r3
   11ca0:	10cbd83a 	sra	r5,r2,r3
   11ca4:	28c6983a 	sll	r3,r5,r3
   11ca8:	18802b26 	beq	r3,r2,11d58 <__ieee754_pow+0x10a8>
   11cac:	0025883a 	mov	r18,zero
   11cb0:	003c3106 	br	10d78 <__ieee754_pow+0xc8>
   11cb4:	200d883a 	mov	r6,r4
   11cb8:	a80f883a 	mov	r7,r21
   11cbc:	a80b883a 	mov	r5,r21
   11cc0:	00137e80 	call	137e8 <__muldf3>
   11cc4:	102d883a 	mov	r22,r2
   11cc8:	003c1306 	br	10d18 <__ieee754_pow+0x68>
   11ccc:	200d883a 	mov	r6,r4
   11cd0:	a80f883a 	mov	r7,r21
   11cd4:	0009883a 	mov	r4,zero
   11cd8:	014ffc34 	movhi	r5,16368
   11cdc:	0012c680 	call	12c68 <__divdf3>
   11ce0:	102d883a 	mov	r22,r2
   11ce4:	003c0c06 	br	10d18 <__ieee754_pow+0x68>
   11ce8:	94800058 	cmpnei	r18,r18,1
   11cec:	903c0a1e 	bne	r18,zero,10d18 <__ieee754_pow+0x68>
   11cf0:	18e0003c 	xorhi	r3,r3,32768
   11cf4:	003c0806 	br	10d18 <__ieee754_pow+0x68>
   11cf8:	008ff8f4 	movhi	r2,16355
   11cfc:	10ae00c4 	addi	r2,r2,-18429
   11d00:	00d0f434 	movhi	r3,17360
   11d04:	03cf9374 	movhi	r15,15949
   11d08:	01100034 	movhi	r4,16384
   11d0c:	d8800115 	stw	r2,4(sp)
   11d10:	18b40184 	addi	r2,r3,-12282
   11d14:	d9000015 	stw	r4,0(sp)
   11d18:	d8800a15 	stw	r2,40(sp)
   11d1c:	7bff7ac4 	addi	r15,r15,-533
   11d20:	05c00134 	movhi	r23,4
   11d24:	034ffe34 	movhi	r13,16376
   11d28:	003cb006 	br	10fec <__ieee754_pow+0x33c>
   11d2c:	d9800317 	ldw	r6,12(sp)
   11d30:	180b883a 	mov	r5,r3
   11d34:	00121b80 	call	121b8 <scalbn>
   11d38:	1009883a 	mov	r4,r2
   11d3c:	180b883a 	mov	r5,r3
   11d40:	003f3106 	br	11a08 <__ieee754_pow+0xd58>
   11d44:	2940004c 	andi	r5,r5,1
   11d48:	04800084 	movi	r18,2
   11d4c:	9165c83a 	sub	r18,r18,r5
   11d50:	803c331e 	bne	r16,zero,10e20 <__ieee754_pow+0x170>
   11d54:	003c0806 	br	10d78 <__ieee754_pow+0xc8>
   11d58:	2940004c 	andi	r5,r5,1
   11d5c:	04800084 	movi	r18,2
   11d60:	9165c83a 	sub	r18,r18,r5
   11d64:	003c0406 	br	10d78 <__ieee754_pow+0xc8>
   11d68:	280bd53a 	srai	r5,r5,20
   11d6c:	003e4a06 	br	11698 <__ieee754_pow+0x9e8>

00011d70 <__ieee754_sqrt>:
   11d70:	defffd04 	addi	sp,sp,-12
   11d74:	dc400115 	stw	r17,4(sp)
   11d78:	dc000015 	stw	r16,0(sp)
   11d7c:	dfc00215 	stw	ra,8(sp)
   11d80:	28dffc2c 	andhi	r3,r5,32752
   11d84:	009ffc34 	movhi	r2,32752
   11d88:	2821883a 	mov	r16,r5
   11d8c:	2023883a 	mov	r17,r4
   11d90:	18807726 	beq	r3,r2,11f70 <__ieee754_sqrt+0x200>
   11d94:	2011883a 	mov	r8,r4
   11d98:	01403a0e 	bge	zero,r5,11e84 <__ieee754_sqrt+0x114>
   11d9c:	280bd53a 	srai	r5,r5,20
   11da0:	28004626 	beq	r5,zero,11ebc <__ieee754_sqrt+0x14c>
   11da4:	00800434 	movhi	r2,16
   11da8:	10bfffc4 	addi	r2,r2,-1
   11dac:	4006d7fa 	srli	r3,r8,31
   11db0:	8084703a 	and	r2,r16,r2
   11db4:	297f0044 	addi	r5,r5,-1023
   11db8:	10800434 	orhi	r2,r2,16
   11dbc:	1085883a 	add	r2,r2,r2
   11dc0:	2980004c 	andi	r6,r5,1
   11dc4:	10c7883a 	add	r3,r2,r3
   11dc8:	4209883a 	add	r4,r8,r8
   11dcc:	30000426 	beq	r6,zero,11de0 <__ieee754_sqrt+0x70>
   11dd0:	2004d7fa 	srli	r2,r4,31
   11dd4:	400890ba 	slli	r4,r8,2
   11dd8:	18c7883a 	add	r3,r3,r3
   11ddc:	1887883a 	add	r3,r3,r2
   11de0:	2815d07a 	srai	r10,r5,1
   11de4:	01c00584 	movi	r7,22
   11de8:	0019883a 	mov	r12,zero
   11dec:	000b883a 	mov	r5,zero
   11df0:	00800834 	movhi	r2,32
   11df4:	288d883a 	add	r6,r5,r2
   11df8:	2010d7fa 	srli	r8,r4,31
   11dfc:	39ffffc4 	addi	r7,r7,-1
   11e00:	19800316 	blt	r3,r6,11e10 <__ieee754_sqrt+0xa0>
   11e04:	1987c83a 	sub	r3,r3,r6
   11e08:	308b883a 	add	r5,r6,r2
   11e0c:	6099883a 	add	r12,r12,r2
   11e10:	18c7883a 	add	r3,r3,r3
   11e14:	1004d07a 	srli	r2,r2,1
   11e18:	40c7883a 	add	r3,r8,r3
   11e1c:	2109883a 	add	r4,r4,r4
   11e20:	383ff41e 	bne	r7,zero,11df4 <__ieee754_sqrt+0x84>
   11e24:	0013883a 	mov	r9,zero
   11e28:	00800804 	movi	r2,32
   11e2c:	01a00034 	movhi	r6,32768
   11e30:	00000806 	br	11e54 <__ieee754_sqrt+0xe4>
   11e34:	19403326 	beq	r3,r5,11f04 <__ieee754_sqrt+0x194>
   11e38:	2010d7fa 	srli	r8,r4,31
   11e3c:	18c7883a 	add	r3,r3,r3
   11e40:	10bfffc4 	addi	r2,r2,-1
   11e44:	300cd07a 	srli	r6,r6,1
   11e48:	1a07883a 	add	r3,r3,r8
   11e4c:	2109883a 	add	r4,r4,r4
   11e50:	10003226 	beq	r2,zero,11f1c <__ieee754_sqrt+0x1ac>
   11e54:	31d1883a 	add	r8,r6,r7
   11e58:	28fff60e 	bge	r5,r3,11e34 <__ieee754_sqrt+0xc4>
   11e5c:	418f883a 	add	r7,r8,r6
   11e60:	40002516 	blt	r8,zero,11ef8 <__ieee754_sqrt+0x188>
   11e64:	2817883a 	mov	r11,r5
   11e68:	1947c83a 	sub	r3,r3,r5
   11e6c:	2200012e 	bgeu	r4,r8,11e74 <__ieee754_sqrt+0x104>
   11e70:	18ffffc4 	addi	r3,r3,-1
   11e74:	2209c83a 	sub	r4,r4,r8
   11e78:	4993883a 	add	r9,r9,r6
   11e7c:	580b883a 	mov	r5,r11
   11e80:	003fed06 	br	11e38 <__ieee754_sqrt+0xc8>
   11e84:	00a00034 	movhi	r2,32768
   11e88:	10bfffc4 	addi	r2,r2,-1
   11e8c:	2884703a 	and	r2,r5,r2
   11e90:	1104b03a 	or	r2,r2,r4
   11e94:	10004826 	beq	r2,zero,11fb8 <__ieee754_sqrt+0x248>
   11e98:	28003e1e 	bne	r5,zero,11f94 <__ieee754_sqrt+0x224>
   11e9c:	000b883a 	mov	r5,zero
   11ea0:	4004d2fa 	srli	r2,r8,11
   11ea4:	297ffac4 	addi	r5,r5,-21
   11ea8:	4010957a 	slli	r8,r8,21
   11eac:	1021883a 	mov	r16,r2
   11eb0:	103ffb26 	beq	r2,zero,11ea0 <__ieee754_sqrt+0x130>
   11eb4:	10c0042c 	andhi	r3,r2,16
   11eb8:	1800441e 	bne	r3,zero,11fcc <__ieee754_sqrt+0x25c>
   11ebc:	0005883a 	mov	r2,zero
   11ec0:	8421883a 	add	r16,r16,r16
   11ec4:	8100042c 	andhi	r4,r16,16
   11ec8:	1007883a 	mov	r3,r2
   11ecc:	10800044 	addi	r2,r2,1
   11ed0:	203ffb26 	beq	r4,zero,11ec0 <__ieee754_sqrt+0x150>
   11ed4:	01800804 	movi	r6,32
   11ed8:	4009883a 	mov	r4,r8
   11edc:	308dc83a 	sub	r6,r6,r2
   11ee0:	4090983a 	sll	r8,r8,r2
   11ee4:	8005883a 	mov	r2,r16
   11ee8:	218ed83a 	srl	r7,r4,r6
   11eec:	28cbc83a 	sub	r5,r5,r3
   11ef0:	38a0b03a 	or	r16,r7,r2
   11ef4:	003fab06 	br	11da4 <__ieee754_sqrt+0x34>
   11ef8:	383fda16 	blt	r7,zero,11e64 <__ieee754_sqrt+0xf4>
   11efc:	2ac00044 	addi	r11,r5,1
   11f00:	003fd906 	br	11e68 <__ieee754_sqrt+0xf8>
   11f04:	223fcc36 	bltu	r4,r8,11e38 <__ieee754_sqrt+0xc8>
   11f08:	418f883a 	add	r7,r8,r6
   11f0c:	403ffa16 	blt	r8,zero,11ef8 <__ieee754_sqrt+0x188>
   11f10:	1817883a 	mov	r11,r3
   11f14:	0007883a 	mov	r3,zero
   11f18:	003fd606 	br	11e74 <__ieee754_sqrt+0x104>
   11f1c:	1906b03a 	or	r3,r3,r4
   11f20:	18000e1e 	bne	r3,zero,11f5c <__ieee754_sqrt+0x1ec>
   11f24:	4804d07a 	srli	r2,r9,1
   11f28:	6007d07a 	srai	r3,r12,1
   11f2c:	01cff834 	movhi	r7,16352
   11f30:	6300004c 	andi	r12,r12,1
   11f34:	19cf883a 	add	r7,r3,r7
   11f38:	60000126 	beq	r12,zero,11f40 <__ieee754_sqrt+0x1d0>
   11f3c:	10a00034 	orhi	r2,r2,32768
   11f40:	5006953a 	slli	r3,r10,20
   11f44:	19c7883a 	add	r3,r3,r7
   11f48:	dfc00217 	ldw	ra,8(sp)
   11f4c:	dc400117 	ldw	r17,4(sp)
   11f50:	dc000017 	ldw	r16,0(sp)
   11f54:	dec00304 	addi	sp,sp,12
   11f58:	f800283a 	ret
   11f5c:	48ffffd8 	cmpnei	r3,r9,-1
   11f60:	18001826 	beq	r3,zero,11fc4 <__ieee754_sqrt+0x254>
   11f64:	48800044 	addi	r2,r9,1
   11f68:	1004d07a 	srli	r2,r2,1
   11f6c:	003fee06 	br	11f28 <__ieee754_sqrt+0x1b8>
   11f70:	200d883a 	mov	r6,r4
   11f74:	280f883a 	mov	r7,r5
   11f78:	00137e80 	call	137e8 <__muldf3>
   11f7c:	880d883a 	mov	r6,r17
   11f80:	800f883a 	mov	r7,r16
   11f84:	1009883a 	mov	r4,r2
   11f88:	180b883a 	mov	r5,r3
   11f8c:	00123780 	call	12378 <__adddf3>
   11f90:	003fed06 	br	11f48 <__ieee754_sqrt+0x1d8>
   11f94:	200d883a 	mov	r6,r4
   11f98:	280f883a 	mov	r7,r5
   11f9c:	0013f940 	call	13f94 <__subdf3>
   11fa0:	100d883a 	mov	r6,r2
   11fa4:	180f883a 	mov	r7,r3
   11fa8:	1009883a 	mov	r4,r2
   11fac:	180b883a 	mov	r5,r3
   11fb0:	0012c680 	call	12c68 <__divdf3>
   11fb4:	003fe406 	br	11f48 <__ieee754_sqrt+0x1d8>
   11fb8:	2005883a 	mov	r2,r4
   11fbc:	2807883a 	mov	r3,r5
   11fc0:	003fe106 	br	11f48 <__ieee754_sqrt+0x1d8>
   11fc4:	63000044 	addi	r12,r12,1
   11fc8:	003fd706 	br	11f28 <__ieee754_sqrt+0x1b8>
   11fcc:	4009883a 	mov	r4,r8
   11fd0:	01800804 	movi	r6,32
   11fd4:	00ffffc4 	movi	r3,-1
   11fd8:	003fc306 	br	11ee8 <__ieee754_sqrt+0x178>

00011fdc <rint>:
   11fdc:	2811d53a 	srai	r8,r5,20
   11fe0:	defff904 	addi	sp,sp,-28
   11fe4:	dc000215 	stw	r16,8(sp)
   11fe8:	4201ffcc 	andi	r8,r8,2047
   11fec:	427f0044 	addi	r9,r8,-1023
   11ff0:	dfc00615 	stw	ra,24(sp)
   11ff4:	dcc00515 	stw	r19,20(sp)
   11ff8:	dc800415 	stw	r18,16(sp)
   11ffc:	dc400315 	stw	r17,12(sp)
   12000:	4a800508 	cmpgei	r10,r9,20
   12004:	2816d7fa 	srli	r11,r5,31
   12008:	2821883a 	mov	r16,r5
   1200c:	2005883a 	mov	r2,r4
   12010:	280f883a 	mov	r7,r5
   12014:	200d883a 	mov	r6,r4
   12018:	50002b1e 	bne	r10,zero,120c8 <rint+0xec>
   1201c:	48002316 	blt	r9,zero,120ac <rint+0xd0>
   12020:	01000434 	movhi	r4,16
   12024:	213fffc4 	addi	r4,r4,-1
   12028:	2249d83a 	sra	r4,r4,r9
   1202c:	2906703a 	and	r3,r5,r4
   12030:	1886b03a 	or	r3,r3,r2
   12034:	18002826 	beq	r3,zero,120d8 <rint+0xfc>
   12038:	2008d07a 	srli	r4,r4,1
   1203c:	2904703a 	and	r2,r5,r4
   12040:	308cb03a 	or	r6,r6,r2
   12044:	30000826 	beq	r6,zero,12068 <rint+0x8c>
   12048:	488004e0 	cmpeqi	r2,r9,19
   1204c:	1000581e 	bne	r2,zero,121b0 <rint+0x1d4>
   12050:	000d883a 	mov	r6,zero
   12054:	01c00134 	movhi	r7,4
   12058:	3a47d83a 	sra	r3,r7,r9
   1205c:	0108303a 	nor	r4,zero,r4
   12060:	2408703a 	and	r4,r4,r16
   12064:	20ceb03a 	or	r7,r4,r3
   12068:	580890fa 	slli	r4,r11,3
   1206c:	00800074 	movhi	r2,1
   12070:	10980d04 	addi	r2,r2,24628
   12074:	1105883a 	add	r2,r2,r4
   12078:	14400017 	ldw	r17,0(r2)
   1207c:	14000117 	ldw	r16,4(r2)
   12080:	8809883a 	mov	r4,r17
   12084:	800b883a 	mov	r5,r16
   12088:	00123780 	call	12378 <__adddf3>
   1208c:	d8800015 	stw	r2,0(sp)
   12090:	d8c00115 	stw	r3,4(sp)
   12094:	d9000017 	ldw	r4,0(sp)
   12098:	d9400117 	ldw	r5,4(sp)
   1209c:	880d883a 	mov	r6,r17
   120a0:	800f883a 	mov	r7,r16
   120a4:	0013f940 	call	13f94 <__subdf3>
   120a8:	00000c06 	br	120dc <rint+0x100>
   120ac:	04600034 	movhi	r17,32768
   120b0:	8c7fffc4 	addi	r17,r17,-1
   120b4:	2c46703a 	and	r3,r5,r17
   120b8:	1906b03a 	or	r3,r3,r4
   120bc:	18001c1e 	bne	r3,zero,12130 <rint+0x154>
   120c0:	8007883a 	mov	r3,r16
   120c4:	00000506 	br	120dc <rint+0x100>
   120c8:	48c00d10 	cmplti	r3,r9,52
   120cc:	18000a1e 	bne	r3,zero,120f8 <rint+0x11c>
   120d0:	4a410018 	cmpnei	r9,r9,1024
   120d4:	48003426 	beq	r9,zero,121a8 <rint+0x1cc>
   120d8:	3807883a 	mov	r3,r7
   120dc:	dfc00617 	ldw	ra,24(sp)
   120e0:	dcc00517 	ldw	r19,20(sp)
   120e4:	dc800417 	ldw	r18,16(sp)
   120e8:	dc400317 	ldw	r17,12(sp)
   120ec:	dc000217 	ldw	r16,8(sp)
   120f0:	dec00704 	addi	sp,sp,28
   120f4:	f800283a 	ret
   120f8:	423efb44 	addi	r8,r8,-1043
   120fc:	00ffffc4 	movi	r3,-1
   12100:	1a06d83a 	srl	r3,r3,r8
   12104:	20c8703a 	and	r4,r4,r3
   12108:	203fed26 	beq	r4,zero,120c0 <rint+0xe4>
   1210c:	1806d07a 	srli	r3,r3,1
   12110:	10c4703a 	and	r2,r2,r3
   12114:	103fd426 	beq	r2,zero,12068 <rint+0x8c>
   12118:	00900034 	movhi	r2,16384
   1211c:	1211d83a 	sra	r8,r2,r8
   12120:	00c6303a 	nor	r3,zero,r3
   12124:	1986703a 	and	r3,r3,r6
   12128:	1a0cb03a 	or	r6,r3,r8
   1212c:	003fce06 	br	12068 <rint+0x8c>
   12130:	00c00434 	movhi	r3,16
   12134:	18ffffc4 	addi	r3,r3,-1
   12138:	28c6703a 	and	r3,r5,r3
   1213c:	1906b03a 	or	r3,r3,r4
   12140:	580890fa 	slli	r4,r11,3
   12144:	00cfc83a 	sub	r7,zero,r3
   12148:	01400074 	movhi	r5,1
   1214c:	38c6b03a 	or	r3,r7,r3
   12150:	29580d04 	addi	r5,r5,24628
   12154:	290b883a 	add	r5,r5,r4
   12158:	1806d33a 	srli	r3,r3,12
   1215c:	2cc00017 	ldw	r19,0(r5)
   12160:	2c800117 	ldw	r18,4(r5)
   12164:	18c0022c 	andhi	r3,r3,8
   12168:	81ffffac 	andhi	r7,r16,65534
   1216c:	19ceb03a 	or	r7,r3,r7
   12170:	9809883a 	mov	r4,r19
   12174:	900b883a 	mov	r5,r18
   12178:	00123780 	call	12378 <__adddf3>
   1217c:	d8800015 	stw	r2,0(sp)
   12180:	d8c00115 	stw	r3,4(sp)
   12184:	d9000017 	ldw	r4,0(sp)
   12188:	d9400117 	ldw	r5,4(sp)
   1218c:	900f883a 	mov	r7,r18
   12190:	980d883a 	mov	r6,r19
   12194:	0013f940 	call	13f94 <__subdf3>
   12198:	1c4e703a 	and	r7,r3,r17
   1219c:	80e0002c 	andhi	r3,r16,32768
   121a0:	38c6b03a 	or	r3,r7,r3
   121a4:	003fcd06 	br	120dc <rint+0x100>
   121a8:	00123780 	call	12378 <__adddf3>
   121ac:	003fcb06 	br	120dc <rint+0x100>
   121b0:	01a00034 	movhi	r6,32768
   121b4:	003fa706 	br	12054 <rint+0x78>

000121b8 <scalbn>:
   121b8:	2807d53a 	srai	r3,r5,20
   121bc:	defffe04 	addi	sp,sp,-8
   121c0:	dc000015 	stw	r16,0(sp)
   121c4:	dfc00115 	stw	ra,4(sp)
   121c8:	18c1ffcc 	andi	r3,r3,2047
   121cc:	280f883a 	mov	r7,r5
   121d0:	2005883a 	mov	r2,r4
   121d4:	3021883a 	mov	r16,r6
   121d8:	1800241e 	bne	r3,zero,1226c <scalbn+0xb4>
   121dc:	00e00034 	movhi	r3,32768
   121e0:	18ffffc4 	addi	r3,r3,-1
   121e4:	28c6703a 	and	r3,r5,r3
   121e8:	1906b03a 	or	r3,r3,r4
   121ec:	18003626 	beq	r3,zero,122c8 <scalbn+0x110>
   121f0:	000d883a 	mov	r6,zero
   121f4:	01d0d434 	movhi	r7,17232
   121f8:	00137e80 	call	137e8 <__muldf3>
   121fc:	01bffff4 	movhi	r6,65535
   12200:	318f2c04 	addi	r6,r6,15536
   12204:	1009883a 	mov	r4,r2
   12208:	180f883a 	mov	r7,r3
   1220c:	81804d16 	blt	r16,r6,12344 <scalbn+0x18c>
   12210:	1807d53a 	srai	r3,r3,20
   12214:	3811883a 	mov	r8,r7
   12218:	18c1ffcc 	andi	r3,r3,2047
   1221c:	18fff284 	addi	r3,r3,-54
   12220:	80c7883a 	add	r3,r16,r3
   12224:	1901ffd0 	cmplti	r4,r3,2047
   12228:	20001926 	beq	r4,zero,12290 <scalbn+0xd8>
   1222c:	00c03c16 	blt	zero,r3,12320 <scalbn+0x168>
   12230:	193ff2c8 	cmpgei	r4,r3,-53
   12234:	20002c1e 	bne	r4,zero,122e8 <scalbn+0x130>
   12238:	00b0d414 	movui	r2,50000
   1223c:	14001416 	blt	r2,r16,12290 <scalbn+0xd8>
   12240:	0130be74 	movhi	r4,49913
   12244:	01406974 	movhi	r5,421
   12248:	213cd644 	addi	r4,r4,-3239
   1224c:	295b87c4 	addi	r5,r5,28191
   12250:	38004616 	blt	r7,zero,1236c <scalbn+0x1b4>
   12254:	01b0be74 	movhi	r6,49913
   12258:	01c06974 	movhi	r7,421
   1225c:	31bcd644 	addi	r6,r6,-3239
   12260:	39db87c4 	addi	r7,r7,28191
   12264:	00137e80 	call	137e8 <__muldf3>
   12268:	00001306 	br	122b8 <scalbn+0x100>
   1226c:	1981ffd8 	cmpnei	r6,r3,2047
   12270:	2811883a 	mov	r8,r5
   12274:	303fea1e 	bne	r6,zero,12220 <scalbn+0x68>
   12278:	200d883a 	mov	r6,r4
   1227c:	00123780 	call	12378 <__adddf3>
   12280:	dfc00117 	ldw	ra,4(sp)
   12284:	dc000017 	ldw	r16,0(sp)
   12288:	dec00204 	addi	sp,sp,8
   1228c:	f800283a 	ret
   12290:	01220034 	movhi	r4,34816
   12294:	015f8e34 	movhi	r5,32312
   12298:	211d6704 	addi	r4,r4,30108
   1229c:	29790f04 	addi	r5,r5,-7108
   122a0:	38000e16 	blt	r7,zero,122dc <scalbn+0x124>
   122a4:	01a20034 	movhi	r6,34816
   122a8:	01df8e34 	movhi	r7,32312
   122ac:	319d6704 	addi	r6,r6,30108
   122b0:	39f90f04 	addi	r7,r7,-7108
   122b4:	00137e80 	call	137e8 <__muldf3>
   122b8:	dfc00117 	ldw	ra,4(sp)
   122bc:	dc000017 	ldw	r16,0(sp)
   122c0:	dec00204 	addi	sp,sp,8
   122c4:	f800283a 	ret
   122c8:	2807883a 	mov	r3,r5
   122cc:	dfc00117 	ldw	ra,4(sp)
   122d0:	dc000017 	ldw	r16,0(sp)
   122d4:	dec00204 	addi	sp,sp,8
   122d8:	f800283a 	ret
   122dc:	017f8e34 	movhi	r5,65080
   122e0:	29790f04 	addi	r5,r5,-7108
   122e4:	003fef06 	br	122a4 <scalbn+0xec>
   122e8:	18c00d84 	addi	r3,r3,54
   122ec:	1806953a 	slli	r3,r3,20
   122f0:	01600434 	movhi	r5,32784
   122f4:	297fffc4 	addi	r5,r5,-1
   122f8:	414a703a 	and	r5,r8,r5
   122fc:	000d883a 	mov	r6,zero
   12300:	01cf2434 	movhi	r7,15504
   12304:	1009883a 	mov	r4,r2
   12308:	194ab03a 	or	r5,r3,r5
   1230c:	00137e80 	call	137e8 <__muldf3>
   12310:	dfc00117 	ldw	ra,4(sp)
   12314:	dc000017 	ldw	r16,0(sp)
   12318:	dec00204 	addi	sp,sp,8
   1231c:	f800283a 	ret
   12320:	1806953a 	slli	r3,r3,20
   12324:	01e00434 	movhi	r7,32784
   12328:	39ffffc4 	addi	r7,r7,-1
   1232c:	41ce703a 	and	r7,r8,r7
   12330:	38c6b03a 	or	r3,r7,r3
   12334:	dfc00117 	ldw	ra,4(sp)
   12338:	dc000017 	ldw	r16,0(sp)
   1233c:	dec00204 	addi	sp,sp,8
   12340:	f800283a 	ret
   12344:	01b0be74 	movhi	r6,49913
   12348:	01c06974 	movhi	r7,421
   1234c:	31bcd644 	addi	r6,r6,-3239
   12350:	39db87c4 	addi	r7,r7,28191
   12354:	180b883a 	mov	r5,r3
   12358:	00137e80 	call	137e8 <__muldf3>
   1235c:	dfc00117 	ldw	ra,4(sp)
   12360:	dc000017 	ldw	r16,0(sp)
   12364:	dec00204 	addi	sp,sp,8
   12368:	f800283a 	ret
   1236c:	01606974 	movhi	r5,33189
   12370:	295b87c4 	addi	r5,r5,28191
   12374:	003fb706 	br	12254 <scalbn+0x9c>

00012378 <__adddf3>:
   12378:	02000434 	movhi	r8,16
   1237c:	423fffc4 	addi	r8,r8,-1
   12380:	2806d53a 	srli	r3,r5,20
   12384:	3804d53a 	srli	r2,r7,20
   12388:	2a14703a 	and	r10,r5,r8
   1238c:	3a12703a 	and	r9,r7,r8
   12390:	280ad7fa 	srli	r5,r5,31
   12394:	501490fa 	slli	r10,r10,3
   12398:	2018d77a 	srli	r12,r4,29
   1239c:	481290fa 	slli	r9,r9,3
   123a0:	3016d77a 	srli	r11,r6,29
   123a4:	380ed7fa 	srli	r7,r7,31
   123a8:	defffb04 	addi	sp,sp,-20
   123ac:	dc800215 	stw	r18,8(sp)
   123b0:	dc000015 	stw	r16,0(sp)
   123b4:	1c81ffcc 	andi	r18,r3,2047
   123b8:	1081ffcc 	andi	r2,r2,2047
   123bc:	dfc00415 	stw	ra,16(sp)
   123c0:	dcc00315 	stw	r19,12(sp)
   123c4:	dc400115 	stw	r17,4(sp)
   123c8:	201c90fa 	slli	r14,r4,3
   123cc:	301a90fa 	slli	r13,r6,3
   123d0:	2821883a 	mov	r16,r5
   123d4:	6294b03a 	or	r10,r12,r10
   123d8:	5a52b03a 	or	r9,r11,r9
   123dc:	9087c83a 	sub	r3,r18,r2
   123e0:	29c06126 	beq	r5,r7,12568 <__adddf3+0x1f0>
   123e4:	00c0550e 	bge	zero,r3,1253c <__adddf3+0x1c4>
   123e8:	10007326 	beq	r2,zero,125b8 <__adddf3+0x240>
   123ec:	9081ffd8 	cmpnei	r2,r18,2047
   123f0:	1000bd26 	beq	r2,zero,126e8 <__adddf3+0x370>
   123f4:	4a402034 	orhi	r9,r9,128
   123f8:	18800e48 	cmpgei	r2,r3,57
   123fc:	1000ef1e 	bne	r2,zero,127bc <__adddf3+0x444>
   12400:	18800808 	cmpgei	r2,r3,32
   12404:	1001321e 	bne	r2,zero,128d0 <__adddf3+0x558>
   12408:	00800804 	movi	r2,32
   1240c:	10c5c83a 	sub	r2,r2,r3
   12410:	68c8d83a 	srl	r4,r13,r3
   12414:	48a2983a 	sll	r17,r9,r2
   12418:	689a983a 	sll	r13,r13,r2
   1241c:	48c6d83a 	srl	r3,r9,r3
   12420:	8922b03a 	or	r17,r17,r4
   12424:	681ac03a 	cmpne	r13,r13,zero
   12428:	8b62b03a 	or	r17,r17,r13
   1242c:	50d5c83a 	sub	r10,r10,r3
   12430:	7463c83a 	sub	r17,r14,r17
   12434:	7451803a 	cmpltu	r8,r14,r17
   12438:	5211c83a 	sub	r8,r10,r8
   1243c:	4080202c 	andhi	r2,r8,128
   12440:	10008d26 	beq	r2,zero,12678 <__adddf3+0x300>
   12444:	02402034 	movhi	r9,128
   12448:	4a7fffc4 	addi	r9,r9,-1
   1244c:	4266703a 	and	r19,r8,r9
   12450:	9800b326 	beq	r19,zero,12720 <__adddf3+0x3a8>
   12454:	9809883a 	mov	r4,r19
   12458:	00149d40 	call	149d4 <__clzsi2>
   1245c:	10fffe04 	addi	r3,r2,-8
   12460:	02000804 	movi	r8,32
   12464:	40d1c83a 	sub	r8,r8,r3
   12468:	8a10d83a 	srl	r8,r17,r8
   1246c:	98d2983a 	sll	r9,r19,r3
   12470:	88e2983a 	sll	r17,r17,r3
   12474:	4250b03a 	or	r8,r8,r9
   12478:	1c80b216 	blt	r3,r18,12744 <__adddf3+0x3cc>
   1247c:	1c87c83a 	sub	r3,r3,r18
   12480:	19000044 	addi	r4,r3,1
   12484:	20800808 	cmpgei	r2,r4,32
   12488:	10006f1e 	bne	r2,zero,12648 <__adddf3+0x2d0>
   1248c:	00800804 	movi	r2,32
   12490:	1105c83a 	sub	r2,r2,r4
   12494:	8906d83a 	srl	r3,r17,r4
   12498:	88a2983a 	sll	r17,r17,r2
   1249c:	4084983a 	sll	r2,r8,r2
   124a0:	4110d83a 	srl	r8,r8,r4
   124a4:	8822c03a 	cmpne	r17,r17,zero
   124a8:	10c4b03a 	or	r2,r2,r3
   124ac:	1462b03a 	or	r17,r2,r17
   124b0:	0025883a 	mov	r18,zero
   124b4:	888001cc 	andi	r2,r17,7
   124b8:	10000726 	beq	r2,zero,124d8 <__adddf3+0x160>
   124bc:	888003cc 	andi	r2,r17,15
   124c0:	10800120 	cmpeqi	r2,r2,4
   124c4:	1000041e 	bne	r2,zero,124d8 <__adddf3+0x160>
   124c8:	88c00104 	addi	r3,r17,4
   124cc:	1c63803a 	cmpltu	r17,r3,r17
   124d0:	4451883a 	add	r8,r8,r17
   124d4:	1823883a 	mov	r17,r3
   124d8:	4080202c 	andhi	r2,r8,128
   124dc:	10006826 	beq	r2,zero,12680 <__adddf3+0x308>
   124e0:	90c00044 	addi	r3,r18,1
   124e4:	1881ffe0 	cmpeqi	r2,r3,2047
   124e8:	18c1ffcc 	andi	r3,r3,2047
   124ec:	10007a1e 	bne	r2,zero,126d8 <__adddf3+0x360>
   124f0:	00bfe034 	movhi	r2,65408
   124f4:	10bfffc4 	addi	r2,r2,-1
   124f8:	4090703a 	and	r8,r8,r2
   124fc:	4004977a 	slli	r2,r8,29
   12500:	4010927a 	slli	r8,r8,9
   12504:	8822d0fa 	srli	r17,r17,3
   12508:	4010d33a 	srli	r8,r8,12
   1250c:	1444b03a 	or	r2,r2,r17
   12510:	1806953a 	slli	r3,r3,20
   12514:	802097fa 	slli	r16,r16,31
   12518:	1a06b03a 	or	r3,r3,r8
   1251c:	1c06b03a 	or	r3,r3,r16
   12520:	dfc00417 	ldw	ra,16(sp)
   12524:	dcc00317 	ldw	r19,12(sp)
   12528:	dc800217 	ldw	r18,8(sp)
   1252c:	dc400117 	ldw	r17,4(sp)
   12530:	dc000017 	ldw	r16,0(sp)
   12534:	dec00504 	addi	sp,sp,20
   12538:	f800283a 	ret
   1253c:	18002626 	beq	r3,zero,125d8 <__adddf3+0x260>
   12540:	1487c83a 	sub	r3,r2,r18
   12544:	9000ba1e 	bne	r18,zero,12830 <__adddf3+0x4b8>
   12548:	5388b03a 	or	r4,r10,r14
   1254c:	20011826 	beq	r4,zero,129b0 <__adddf3+0x638>
   12550:	193fffc4 	addi	r4,r3,-1
   12554:	20015726 	beq	r4,zero,12ab4 <__adddf3+0x73c>
   12558:	18c1ffd8 	cmpnei	r3,r3,2047
   1255c:	18013026 	beq	r3,zero,12a20 <__adddf3+0x6a8>
   12560:	2007883a 	mov	r3,r4
   12564:	0000b506 	br	1283c <__adddf3+0x4c4>
   12568:	00c07b0e 	bge	zero,r3,12758 <__adddf3+0x3e0>
   1256c:	10002e26 	beq	r2,zero,12628 <__adddf3+0x2b0>
   12570:	9081ffd8 	cmpnei	r2,r18,2047
   12574:	10005c26 	beq	r2,zero,126e8 <__adddf3+0x370>
   12578:	4a402034 	orhi	r9,r9,128
   1257c:	18800e48 	cmpgei	r2,r3,57
   12580:	10004b1e 	bne	r2,zero,126b0 <__adddf3+0x338>
   12584:	18800808 	cmpgei	r2,r3,32
   12588:	1000ec26 	beq	r2,zero,1293c <__adddf3+0x5c4>
   1258c:	1c7ff804 	addi	r17,r3,-32
   12590:	19000820 	cmpeqi	r4,r3,32
   12594:	4c44d83a 	srl	r2,r9,r17
   12598:	2000041e 	bne	r4,zero,125ac <__adddf3+0x234>
   1259c:	01001004 	movi	r4,64
   125a0:	20c7c83a 	sub	r3,r4,r3
   125a4:	48d2983a 	sll	r9,r9,r3
   125a8:	6a5ab03a 	or	r13,r13,r9
   125ac:	6822c03a 	cmpne	r17,r13,zero
   125b0:	88a2b03a 	or	r17,r17,r2
   125b4:	00004006 	br	126b8 <__adddf3+0x340>
   125b8:	4b44b03a 	or	r2,r9,r13
   125bc:	10008226 	beq	r2,zero,127c8 <__adddf3+0x450>
   125c0:	18bfffc4 	addi	r2,r3,-1
   125c4:	10011026 	beq	r2,zero,12a08 <__adddf3+0x690>
   125c8:	18c1ffd8 	cmpnei	r3,r3,2047
   125cc:	18004626 	beq	r3,zero,126e8 <__adddf3+0x370>
   125d0:	1007883a 	mov	r3,r2
   125d4:	003f8806 	br	123f8 <__adddf3+0x80>
   125d8:	90800044 	addi	r2,r18,1
   125dc:	1081ff8c 	andi	r2,r2,2046
   125e0:	1000a51e 	bne	r2,zero,12878 <__adddf3+0x500>
   125e4:	538ab03a 	or	r5,r10,r14
   125e8:	4b44b03a 	or	r2,r9,r13
   125ec:	9000f81e 	bne	r18,zero,129d0 <__adddf3+0x658>
   125f0:	28013726 	beq	r5,zero,12ad0 <__adddf3+0x758>
   125f4:	10011226 	beq	r2,zero,12a40 <__adddf3+0x6c8>
   125f8:	7363c83a 	sub	r17,r14,r13
   125fc:	7445803a 	cmpltu	r2,r14,r17
   12600:	5251c83a 	sub	r8,r10,r9
   12604:	4091c83a 	sub	r8,r8,r2
   12608:	4080202c 	andhi	r2,r8,128
   1260c:	10018f26 	beq	r2,zero,12c4c <__adddf3+0x8d4>
   12610:	6ba3c83a 	sub	r17,r13,r14
   12614:	4a95c83a 	sub	r10,r9,r10
   12618:	6c51803a 	cmpltu	r8,r13,r17
   1261c:	5211c83a 	sub	r8,r10,r8
   12620:	3821883a 	mov	r16,r7
   12624:	003fa306 	br	124b4 <__adddf3+0x13c>
   12628:	4b44b03a 	or	r2,r9,r13
   1262c:	10006626 	beq	r2,zero,127c8 <__adddf3+0x450>
   12630:	18bfffc4 	addi	r2,r3,-1
   12634:	1000ec26 	beq	r2,zero,129e8 <__adddf3+0x670>
   12638:	18c1ffd8 	cmpnei	r3,r3,2047
   1263c:	18012d26 	beq	r3,zero,12af4 <__adddf3+0x77c>
   12640:	1007883a 	mov	r3,r2
   12644:	003fcd06 	br	1257c <__adddf3+0x204>
   12648:	18fff844 	addi	r3,r3,-31
   1264c:	20800820 	cmpeqi	r2,r4,32
   12650:	40c6d83a 	srl	r3,r8,r3
   12654:	1000041e 	bne	r2,zero,12668 <__adddf3+0x2f0>
   12658:	00801004 	movi	r2,64
   1265c:	1109c83a 	sub	r4,r2,r4
   12660:	4110983a 	sll	r8,r8,r4
   12664:	8a22b03a 	or	r17,r17,r8
   12668:	8822c03a 	cmpne	r17,r17,zero
   1266c:	88e2b03a 	or	r17,r17,r3
   12670:	0011883a 	mov	r8,zero
   12674:	0025883a 	mov	r18,zero
   12678:	888001cc 	andi	r2,r17,7
   1267c:	103f8f1e 	bne	r2,zero,124bc <__adddf3+0x144>
   12680:	8822d0fa 	srli	r17,r17,3
   12684:	4004977a 	slli	r2,r8,29
   12688:	4014d0fa 	srli	r10,r8,3
   1268c:	9007883a 	mov	r3,r18
   12690:	8884b03a 	or	r2,r17,r2
   12694:	1901ffe0 	cmpeqi	r4,r3,2047
   12698:	2000191e 	bne	r4,zero,12700 <__adddf3+0x388>
   1269c:	02000434 	movhi	r8,16
   126a0:	423fffc4 	addi	r8,r8,-1
   126a4:	5210703a 	and	r8,r10,r8
   126a8:	18c1ffcc 	andi	r3,r3,2047
   126ac:	003f9806 	br	12510 <__adddf3+0x198>
   126b0:	4b62b03a 	or	r17,r9,r13
   126b4:	8822c03a 	cmpne	r17,r17,zero
   126b8:	8ba3883a 	add	r17,r17,r14
   126bc:	8b91803a 	cmpltu	r8,r17,r14
   126c0:	4291883a 	add	r8,r8,r10
   126c4:	4080202c 	andhi	r2,r8,128
   126c8:	103feb26 	beq	r2,zero,12678 <__adddf3+0x300>
   126cc:	94800044 	addi	r18,r18,1
   126d0:	9081ffe0 	cmpeqi	r2,r18,2047
   126d4:	10007426 	beq	r2,zero,128a8 <__adddf3+0x530>
   126d8:	00c1ffc4 	movi	r3,2047
   126dc:	0011883a 	mov	r8,zero
   126e0:	0005883a 	mov	r2,zero
   126e4:	003f8a06 	br	12510 <__adddf3+0x198>
   126e8:	500a977a 	slli	r5,r10,29
   126ec:	00c80034 	movhi	r3,8192
   126f0:	18ffffc4 	addi	r3,r3,-1
   126f4:	5014d0fa 	srli	r10,r10,3
   126f8:	20c4703a 	and	r2,r4,r3
   126fc:	1144b03a 	or	r2,r2,r5
   12700:	1286b03a 	or	r3,r2,r10
   12704:	18015426 	beq	r3,zero,12c58 <__adddf3+0x8e0>
   12708:	00c00434 	movhi	r3,16
   1270c:	18ffffc4 	addi	r3,r3,-1
   12710:	52000234 	orhi	r8,r10,8
   12714:	40d0703a 	and	r8,r8,r3
   12718:	00c1ffc4 	movi	r3,2047
   1271c:	003f7c06 	br	12510 <__adddf3+0x198>
   12720:	8809883a 	mov	r4,r17
   12724:	00149d40 	call	149d4 <__clzsi2>
   12728:	10c00604 	addi	r3,r2,24
   1272c:	19000808 	cmpgei	r4,r3,32
   12730:	203f4b26 	beq	r4,zero,12460 <__adddf3+0xe8>
   12734:	123ffe04 	addi	r8,r2,-8
   12738:	8a10983a 	sll	r8,r17,r8
   1273c:	0023883a 	mov	r17,zero
   12740:	1cbf4e0e 	bge	r3,r18,1247c <__adddf3+0x104>
   12744:	00bfe034 	movhi	r2,65408
   12748:	10bfffc4 	addi	r2,r2,-1
   1274c:	90e5c83a 	sub	r18,r18,r3
   12750:	4090703a 	and	r8,r8,r2
   12754:	003f5706 	br	124b4 <__adddf3+0x13c>
   12758:	18002226 	beq	r3,zero,127e4 <__adddf3+0x46c>
   1275c:	1487c83a 	sub	r3,r2,r18
   12760:	90006e26 	beq	r18,zero,1291c <__adddf3+0x5a4>
   12764:	1101ffd8 	cmpnei	r4,r2,2047
   12768:	2000e926 	beq	r4,zero,12b10 <__adddf3+0x798>
   1276c:	52802034 	orhi	r10,r10,128
   12770:	19000e48 	cmpgei	r4,r3,57
   12774:	2000b91e 	bne	r4,zero,12a5c <__adddf3+0x6e4>
   12778:	19000808 	cmpgei	r4,r3,32
   1277c:	2001101e 	bne	r4,zero,12bc0 <__adddf3+0x848>
   12780:	01000804 	movi	r4,32
   12784:	20c9c83a 	sub	r4,r4,r3
   12788:	5122983a 	sll	r17,r10,r4
   1278c:	70cad83a 	srl	r5,r14,r3
   12790:	7108983a 	sll	r4,r14,r4
   12794:	50d4d83a 	srl	r10,r10,r3
   12798:	8962b03a 	or	r17,r17,r5
   1279c:	2008c03a 	cmpne	r4,r4,zero
   127a0:	8922b03a 	or	r17,r17,r4
   127a4:	4a93883a 	add	r9,r9,r10
   127a8:	8b63883a 	add	r17,r17,r13
   127ac:	8b51803a 	cmpltu	r8,r17,r13
   127b0:	4251883a 	add	r8,r8,r9
   127b4:	1025883a 	mov	r18,r2
   127b8:	003fc206 	br	126c4 <__adddf3+0x34c>
   127bc:	4b62b03a 	or	r17,r9,r13
   127c0:	8822c03a 	cmpne	r17,r17,zero
   127c4:	003f1a06 	br	12430 <__adddf3+0xb8>
   127c8:	500c977a 	slli	r6,r10,29
   127cc:	01480034 	movhi	r5,8192
   127d0:	297fffc4 	addi	r5,r5,-1
   127d4:	2144703a 	and	r2,r4,r5
   127d8:	5014d0fa 	srli	r10,r10,3
   127dc:	1184b03a 	or	r2,r2,r6
   127e0:	003fac06 	br	12694 <__adddf3+0x31c>
   127e4:	90800044 	addi	r2,r18,1
   127e8:	1141ff8c 	andi	r5,r2,2046
   127ec:	28005e1e 	bne	r5,zero,12968 <__adddf3+0x5f0>
   127f0:	5384b03a 	or	r2,r10,r14
   127f4:	9000a71e 	bne	r18,zero,12a94 <__adddf3+0x71c>
   127f8:	1000e526 	beq	r2,zero,12b90 <__adddf3+0x818>
   127fc:	4b44b03a 	or	r2,r9,r13
   12800:	10008f26 	beq	r2,zero,12a40 <__adddf3+0x6c8>
   12804:	7363883a 	add	r17,r14,r13
   12808:	5255883a 	add	r10,r10,r9
   1280c:	8b91803a 	cmpltu	r8,r17,r14
   12810:	5211883a 	add	r8,r10,r8
   12814:	4080202c 	andhi	r2,r8,128
   12818:	103f9726 	beq	r2,zero,12678 <__adddf3+0x300>
   1281c:	00bfe034 	movhi	r2,65408
   12820:	10bfffc4 	addi	r2,r2,-1
   12824:	4090703a 	and	r8,r8,r2
   12828:	04800044 	movi	r18,1
   1282c:	003f9206 	br	12678 <__adddf3+0x300>
   12830:	1101ffd8 	cmpnei	r4,r2,2047
   12834:	20007a26 	beq	r4,zero,12a20 <__adddf3+0x6a8>
   12838:	52802034 	orhi	r10,r10,128
   1283c:	19000e48 	cmpgei	r4,r3,57
   12840:	20002e1e 	bne	r4,zero,128fc <__adddf3+0x584>
   12844:	19000808 	cmpgei	r4,r3,32
   12848:	2000871e 	bne	r4,zero,12a68 <__adddf3+0x6f0>
   1284c:	01000804 	movi	r4,32
   12850:	20c9c83a 	sub	r4,r4,r3
   12854:	5122983a 	sll	r17,r10,r4
   12858:	70cad83a 	srl	r5,r14,r3
   1285c:	711c983a 	sll	r14,r14,r4
   12860:	50d4d83a 	srl	r10,r10,r3
   12864:	8962b03a 	or	r17,r17,r5
   12868:	701cc03a 	cmpne	r14,r14,zero
   1286c:	8ba2b03a 	or	r17,r17,r14
   12870:	4a93c83a 	sub	r9,r9,r10
   12874:	00002306 	br	12904 <__adddf3+0x58c>
   12878:	7363c83a 	sub	r17,r14,r13
   1287c:	5267c83a 	sub	r19,r10,r9
   12880:	7451803a 	cmpltu	r8,r14,r17
   12884:	9a27c83a 	sub	r19,r19,r8
   12888:	9880202c 	andhi	r2,r19,128
   1288c:	1000421e 	bne	r2,zero,12998 <__adddf3+0x620>
   12890:	8cc4b03a 	or	r2,r17,r19
   12894:	103eee1e 	bne	r2,zero,12450 <__adddf3+0xd8>
   12898:	0015883a 	mov	r10,zero
   1289c:	0021883a 	mov	r16,zero
   128a0:	003f7e06 	br	1269c <__adddf3+0x324>
   128a4:	04800084 	movi	r18,2
   128a8:	00bfe034 	movhi	r2,65408
   128ac:	10bfffc4 	addi	r2,r2,-1
   128b0:	8806d07a 	srli	r3,r17,1
   128b4:	4090703a 	and	r8,r8,r2
   128b8:	400497fa 	slli	r2,r8,31
   128bc:	8c40004c 	andi	r17,r17,1
   128c0:	1c62b03a 	or	r17,r3,r17
   128c4:	4010d07a 	srli	r8,r8,1
   128c8:	1462b03a 	or	r17,r2,r17
   128cc:	003ef906 	br	124b4 <__adddf3+0x13c>
   128d0:	1c7ff804 	addi	r17,r3,-32
   128d4:	19000820 	cmpeqi	r4,r3,32
   128d8:	4c44d83a 	srl	r2,r9,r17
   128dc:	2000041e 	bne	r4,zero,128f0 <__adddf3+0x578>
   128e0:	01001004 	movi	r4,64
   128e4:	20c7c83a 	sub	r3,r4,r3
   128e8:	48d2983a 	sll	r9,r9,r3
   128ec:	6a5ab03a 	or	r13,r13,r9
   128f0:	6822c03a 	cmpne	r17,r13,zero
   128f4:	88a2b03a 	or	r17,r17,r2
   128f8:	003ecd06 	br	12430 <__adddf3+0xb8>
   128fc:	5394b03a 	or	r10,r10,r14
   12900:	5022c03a 	cmpne	r17,r10,zero
   12904:	6c63c83a 	sub	r17,r13,r17
   12908:	6c51803a 	cmpltu	r8,r13,r17
   1290c:	4a11c83a 	sub	r8,r9,r8
   12910:	3821883a 	mov	r16,r7
   12914:	1025883a 	mov	r18,r2
   12918:	003ec806 	br	1243c <__adddf3+0xc4>
   1291c:	5388b03a 	or	r4,r10,r14
   12920:	20008226 	beq	r4,zero,12b2c <__adddf3+0x7b4>
   12924:	193fffc4 	addi	r4,r3,-1
   12928:	2000b026 	beq	r4,zero,12bec <__adddf3+0x874>
   1292c:	18c1ffd8 	cmpnei	r3,r3,2047
   12930:	18007726 	beq	r3,zero,12b10 <__adddf3+0x798>
   12934:	2007883a 	mov	r3,r4
   12938:	003f8d06 	br	12770 <__adddf3+0x3f8>
   1293c:	00800804 	movi	r2,32
   12940:	10c5c83a 	sub	r2,r2,r3
   12944:	68c8d83a 	srl	r4,r13,r3
   12948:	48a2983a 	sll	r17,r9,r2
   1294c:	689a983a 	sll	r13,r13,r2
   12950:	48c6d83a 	srl	r3,r9,r3
   12954:	8922b03a 	or	r17,r17,r4
   12958:	681ac03a 	cmpne	r13,r13,zero
   1295c:	8b62b03a 	or	r17,r17,r13
   12960:	50d5883a 	add	r10,r10,r3
   12964:	003f5406 	br	126b8 <__adddf3+0x340>
   12968:	10c1ffe0 	cmpeqi	r3,r2,2047
   1296c:	183f5a1e 	bne	r3,zero,126d8 <__adddf3+0x360>
   12970:	7351883a 	add	r8,r14,r13
   12974:	4387803a 	cmpltu	r3,r8,r14
   12978:	5255883a 	add	r10,r10,r9
   1297c:	50c7883a 	add	r3,r10,r3
   12980:	401ad07a 	srli	r13,r8,1
   12984:	182297fa 	slli	r17,r3,31
   12988:	1810d07a 	srli	r8,r3,1
   1298c:	1025883a 	mov	r18,r2
   12990:	8b62b03a 	or	r17,r17,r13
   12994:	003f3806 	br	12678 <__adddf3+0x300>
   12998:	6ba3c83a 	sub	r17,r13,r14
   1299c:	4a93c83a 	sub	r9,r9,r10
   129a0:	6c51803a 	cmpltu	r8,r13,r17
   129a4:	4a27c83a 	sub	r19,r9,r8
   129a8:	3821883a 	mov	r16,r7
   129ac:	003ea806 	br	12450 <__adddf3+0xd8>
   129b0:	480a977a 	slli	r5,r9,29
   129b4:	01080034 	movhi	r4,8192
   129b8:	213fffc4 	addi	r4,r4,-1
   129bc:	3104703a 	and	r2,r6,r4
   129c0:	4814d0fa 	srli	r10,r9,3
   129c4:	1144b03a 	or	r2,r2,r5
   129c8:	3821883a 	mov	r16,r7
   129cc:	003f3106 	br	12694 <__adddf3+0x31c>
   129d0:	28005d1e 	bne	r5,zero,12b48 <__adddf3+0x7d0>
   129d4:	1000121e 	bne	r2,zero,12a20 <__adddf3+0x6a8>
   129d8:	0021883a 	mov	r16,zero
   129dc:	4015883a 	mov	r10,r8
   129e0:	00bfffc4 	movi	r2,-1
   129e4:	003f4806 	br	12708 <__adddf3+0x390>
   129e8:	7363883a 	add	r17,r14,r13
   129ec:	5255883a 	add	r10,r10,r9
   129f0:	8b91803a 	cmpltu	r8,r17,r14
   129f4:	5211883a 	add	r8,r10,r8
   129f8:	4080202c 	andhi	r2,r8,128
   129fc:	103fa91e 	bne	r2,zero,128a4 <__adddf3+0x52c>
   12a00:	04800044 	movi	r18,1
   12a04:	003f1c06 	br	12678 <__adddf3+0x300>
   12a08:	7363c83a 	sub	r17,r14,r13
   12a0c:	5255c83a 	sub	r10,r10,r9
   12a10:	7451803a 	cmpltu	r8,r14,r17
   12a14:	5211c83a 	sub	r8,r10,r8
   12a18:	04800044 	movi	r18,1
   12a1c:	003e8706 	br	1243c <__adddf3+0xc4>
   12a20:	4806977a 	slli	r3,r9,29
   12a24:	00880034 	movhi	r2,8192
   12a28:	10bfffc4 	addi	r2,r2,-1
   12a2c:	3084703a 	and	r2,r6,r2
   12a30:	4814d0fa 	srli	r10,r9,3
   12a34:	10c4b03a 	or	r2,r2,r3
   12a38:	3821883a 	mov	r16,r7
   12a3c:	003f3006 	br	12700 <__adddf3+0x388>
   12a40:	500a977a 	slli	r5,r10,29
   12a44:	00880034 	movhi	r2,8192
   12a48:	10bfffc4 	addi	r2,r2,-1
   12a4c:	2084703a 	and	r2,r4,r2
   12a50:	5014d0fa 	srli	r10,r10,3
   12a54:	1144b03a 	or	r2,r2,r5
   12a58:	003f1006 	br	1269c <__adddf3+0x324>
   12a5c:	5394b03a 	or	r10,r10,r14
   12a60:	5022c03a 	cmpne	r17,r10,zero
   12a64:	003f5006 	br	127a8 <__adddf3+0x430>
   12a68:	1c7ff804 	addi	r17,r3,-32
   12a6c:	19400820 	cmpeqi	r5,r3,32
   12a70:	5448d83a 	srl	r4,r10,r17
   12a74:	2800041e 	bne	r5,zero,12a88 <__adddf3+0x710>
   12a78:	01401004 	movi	r5,64
   12a7c:	28c7c83a 	sub	r3,r5,r3
   12a80:	50d4983a 	sll	r10,r10,r3
   12a84:	729cb03a 	or	r14,r14,r10
   12a88:	7022c03a 	cmpne	r17,r14,zero
   12a8c:	8922b03a 	or	r17,r17,r4
   12a90:	003f9c06 	br	12904 <__adddf3+0x58c>
   12a94:	10005a1e 	bne	r2,zero,12c00 <__adddf3+0x888>
   12a98:	4804977a 	slli	r2,r9,29
   12a9c:	00c80034 	movhi	r3,8192
   12aa0:	18ffffc4 	addi	r3,r3,-1
   12aa4:	30cc703a 	and	r6,r6,r3
   12aa8:	4814d0fa 	srli	r10,r9,3
   12aac:	1184b03a 	or	r2,r2,r6
   12ab0:	003f1306 	br	12700 <__adddf3+0x388>
   12ab4:	6ba3c83a 	sub	r17,r13,r14
   12ab8:	4a95c83a 	sub	r10,r9,r10
   12abc:	6c51803a 	cmpltu	r8,r13,r17
   12ac0:	5211c83a 	sub	r8,r10,r8
   12ac4:	3821883a 	mov	r16,r7
   12ac8:	04800044 	movi	r18,1
   12acc:	003e5b06 	br	1243c <__adddf3+0xc4>
   12ad0:	103f7126 	beq	r2,zero,12898 <__adddf3+0x520>
   12ad4:	4808977a 	slli	r4,r9,29
   12ad8:	00880034 	movhi	r2,8192
   12adc:	10bfffc4 	addi	r2,r2,-1
   12ae0:	3084703a 	and	r2,r6,r2
   12ae4:	4814d0fa 	srli	r10,r9,3
   12ae8:	1104b03a 	or	r2,r2,r4
   12aec:	3821883a 	mov	r16,r7
   12af0:	003eea06 	br	1269c <__adddf3+0x324>
   12af4:	5006977a 	slli	r3,r10,29
   12af8:	00880034 	movhi	r2,8192
   12afc:	10bfffc4 	addi	r2,r2,-1
   12b00:	2084703a 	and	r2,r4,r2
   12b04:	5014d0fa 	srli	r10,r10,3
   12b08:	10c4b03a 	or	r2,r2,r3
   12b0c:	003efc06 	br	12700 <__adddf3+0x388>
   12b10:	4806977a 	slli	r3,r9,29
   12b14:	00880034 	movhi	r2,8192
   12b18:	10bfffc4 	addi	r2,r2,-1
   12b1c:	3084703a 	and	r2,r6,r2
   12b20:	4814d0fa 	srli	r10,r9,3
   12b24:	10c4b03a 	or	r2,r2,r3
   12b28:	003ef506 	br	12700 <__adddf3+0x388>
   12b2c:	4808977a 	slli	r4,r9,29
   12b30:	00880034 	movhi	r2,8192
   12b34:	10bfffc4 	addi	r2,r2,-1
   12b38:	3084703a 	and	r2,r6,r2
   12b3c:	4814d0fa 	srli	r10,r9,3
   12b40:	1104b03a 	or	r2,r2,r4
   12b44:	003ed306 	br	12694 <__adddf3+0x31c>
   12b48:	500a977a 	slli	r5,r10,29
   12b4c:	5014d0fa 	srli	r10,r10,3
   12b50:	10001626 	beq	r2,zero,12bac <__adddf3+0x834>
   12b54:	00c80034 	movhi	r3,8192
   12b58:	18ffffc4 	addi	r3,r3,-1
   12b5c:	20c4703a 	and	r2,r4,r3
   12b60:	5100022c 	andhi	r4,r10,8
   12b64:	1144b03a 	or	r2,r2,r5
   12b68:	203ee526 	beq	r4,zero,12700 <__adddf3+0x388>
   12b6c:	4808d0fa 	srli	r4,r9,3
   12b70:	2140022c 	andhi	r5,r4,8
   12b74:	283ee21e 	bne	r5,zero,12700 <__adddf3+0x388>
   12b78:	4812977a 	slli	r9,r9,29
   12b7c:	30c4703a 	and	r2,r6,r3
   12b80:	3821883a 	mov	r16,r7
   12b84:	1244b03a 	or	r2,r2,r9
   12b88:	2015883a 	mov	r10,r4
   12b8c:	003edc06 	br	12700 <__adddf3+0x388>
   12b90:	4804977a 	slli	r2,r9,29
   12b94:	01080034 	movhi	r4,8192
   12b98:	213fffc4 	addi	r4,r4,-1
   12b9c:	310c703a 	and	r6,r6,r4
   12ba0:	4814d0fa 	srli	r10,r9,3
   12ba4:	1184b03a 	or	r2,r2,r6
   12ba8:	003ebc06 	br	1269c <__adddf3+0x324>
   12bac:	00880034 	movhi	r2,8192
   12bb0:	10bfffc4 	addi	r2,r2,-1
   12bb4:	2084703a 	and	r2,r4,r2
   12bb8:	1144b03a 	or	r2,r2,r5
   12bbc:	003ed006 	br	12700 <__adddf3+0x388>
   12bc0:	193ff804 	addi	r4,r3,-32
   12bc4:	19400820 	cmpeqi	r5,r3,32
   12bc8:	5108d83a 	srl	r4,r10,r4
   12bcc:	2800041e 	bne	r5,zero,12be0 <__adddf3+0x868>
   12bd0:	01401004 	movi	r5,64
   12bd4:	28c7c83a 	sub	r3,r5,r3
   12bd8:	50d4983a 	sll	r10,r10,r3
   12bdc:	729cb03a 	or	r14,r14,r10
   12be0:	7022c03a 	cmpne	r17,r14,zero
   12be4:	8922b03a 	or	r17,r17,r4
   12be8:	003eef06 	br	127a8 <__adddf3+0x430>
   12bec:	7363883a 	add	r17,r14,r13
   12bf0:	5255883a 	add	r10,r10,r9
   12bf4:	8b51803a 	cmpltu	r8,r17,r13
   12bf8:	5211883a 	add	r8,r10,r8
   12bfc:	003f7e06 	br	129f8 <__adddf3+0x680>
   12c00:	4b50b03a 	or	r8,r9,r13
   12c04:	500a977a 	slli	r5,r10,29
   12c08:	5014d0fa 	srli	r10,r10,3
   12c0c:	403fe726 	beq	r8,zero,12bac <__adddf3+0x834>
   12c10:	00c80034 	movhi	r3,8192
   12c14:	18ffffc4 	addi	r3,r3,-1
   12c18:	20c4703a 	and	r2,r4,r3
   12c1c:	5100022c 	andhi	r4,r10,8
   12c20:	1144b03a 	or	r2,r2,r5
   12c24:	203eb626 	beq	r4,zero,12700 <__adddf3+0x388>
   12c28:	4808d0fa 	srli	r4,r9,3
   12c2c:	2140022c 	andhi	r5,r4,8
   12c30:	283eb31e 	bne	r5,zero,12700 <__adddf3+0x388>
   12c34:	4804977a 	slli	r2,r9,29
   12c38:	30cc703a 	and	r6,r6,r3
   12c3c:	3821883a 	mov	r16,r7
   12c40:	3084b03a 	or	r2,r6,r2
   12c44:	2015883a 	mov	r10,r4
   12c48:	003ead06 	br	12700 <__adddf3+0x388>
   12c4c:	8a04b03a 	or	r2,r17,r8
   12c50:	103f1126 	beq	r2,zero,12898 <__adddf3+0x520>
   12c54:	003e8806 	br	12678 <__adddf3+0x300>
   12c58:	0005883a 	mov	r2,zero
   12c5c:	00c1ffc4 	movi	r3,2047
   12c60:	0011883a 	mov	r8,zero
   12c64:	003e2a06 	br	12510 <__adddf3+0x198>

00012c68 <__divdf3>:
   12c68:	2810d53a 	srli	r8,r5,20
   12c6c:	defff004 	addi	sp,sp,-64
   12c70:	dc000615 	stw	r16,24(sp)
   12c74:	04000434 	movhi	r16,16
   12c78:	df000e15 	stw	fp,56(sp)
   12c7c:	ddc00d15 	stw	r23,52(sp)
   12c80:	dd800c15 	stw	r22,48(sp)
   12c84:	dd000a15 	stw	r20,40(sp)
   12c88:	843fffc4 	addi	r16,r16,-1
   12c8c:	dfc00f15 	stw	ra,60(sp)
   12c90:	dd400b15 	stw	r21,44(sp)
   12c94:	dcc00915 	stw	r19,36(sp)
   12c98:	dc800815 	stw	r18,32(sp)
   12c9c:	dc400715 	stw	r17,28(sp)
   12ca0:	4201ffcc 	andi	r8,r8,2047
   12ca4:	282ed7fa 	srli	r23,r5,31
   12ca8:	3039883a 	mov	fp,r6
   12cac:	382d883a 	mov	r22,r7
   12cb0:	2029883a 	mov	r20,r4
   12cb4:	2c20703a 	and	r16,r5,r16
   12cb8:	40006826 	beq	r8,zero,12e5c <__divdf3+0x1f4>
   12cbc:	4081ffe0 	cmpeqi	r2,r8,2047
   12cc0:	1000791e 	bne	r2,zero,12ea8 <__divdf3+0x240>
   12cc4:	2026d77a 	srli	r19,r4,29
   12cc8:	800a90fa 	slli	r5,r16,3
   12ccc:	202890fa 	slli	r20,r4,3
   12cd0:	44bf0044 	addi	r18,r8,-1023
   12cd4:	994ab03a 	or	r5,r19,r5
   12cd8:	2cc02034 	orhi	r19,r5,128
   12cdc:	0021883a 	mov	r16,zero
   12ce0:	0023883a 	mov	r17,zero
   12ce4:	b010d53a 	srli	r8,r22,20
   12ce8:	00c00434 	movhi	r3,16
   12cec:	18ffffc4 	addi	r3,r3,-1
   12cf0:	4201ffcc 	andi	r8,r8,2047
   12cf4:	b02ad7fa 	srli	r21,r22,31
   12cf8:	b0ec703a 	and	r22,r22,r3
   12cfc:	40004626 	beq	r8,zero,12e18 <__divdf3+0x1b0>
   12d00:	4081ffe0 	cmpeqi	r2,r8,2047
   12d04:	10006f1e 	bne	r2,zero,12ec4 <__divdf3+0x25c>
   12d08:	b00690fa 	slli	r3,r22,3
   12d0c:	e004d77a 	srli	r2,fp,29
   12d10:	e01290fa 	slli	r9,fp,3
   12d14:	423f0044 	addi	r8,r8,-1023
   12d18:	10c6b03a 	or	r3,r2,r3
   12d1c:	1d802034 	orhi	r22,r3,128
   12d20:	9225c83a 	sub	r18,r18,r8
   12d24:	0007883a 	mov	r3,zero
   12d28:	80800428 	cmpgeui	r2,r16,16
   12d2c:	bd4ef03a 	xor	r7,r23,r21
   12d30:	1000a71e 	bne	r2,zero,12fd0 <__divdf3+0x368>
   12d34:	800c90ba 	slli	r6,r16,2
   12d38:	00800074 	movhi	r2,1
   12d3c:	3085883a 	add	r2,r6,r2
   12d40:	108b5217 	ldw	r2,11592(r2)
   12d44:	1000683a 	jmp	r2
   12d48:	00012fd0 	cmplti	zero,zero,1215
   12d4c:	00012df4 	movhi	zero,1207
   12d50:	00012da4 	muli	zero,zero,1206
   12d54:	00012e04 	movi	zero,1208
   12d58:	00012da4 	muli	zero,zero,1206
   12d5c:	00012f74 	movhi	zero,1213
   12d60:	00012da4 	muli	zero,zero,1206
   12d64:	00012e04 	movi	zero,1208
   12d68:	00012df4 	movhi	zero,1207
   12d6c:	00012df4 	movhi	zero,1207
   12d70:	00012f74 	movhi	zero,1213
   12d74:	00012e04 	movi	zero,1208
   12d78:	00012d88 	cmpgei	zero,zero,1206
   12d7c:	00012d88 	cmpgei	zero,zero,1206
   12d80:	00012d88 	cmpgei	zero,zero,1206
   12d84:	00012f8c 	andi	zero,zero,1214
   12d88:	b80f883a 	mov	r7,r23
   12d8c:	888000a0 	cmpeqi	r2,r17,2
   12d90:	1000181e 	bne	r2,zero,12df4 <__divdf3+0x18c>
   12d94:	888000e0 	cmpeqi	r2,r17,3
   12d98:	1001f61e 	bne	r2,zero,13574 <__divdf3+0x90c>
   12d9c:	88800060 	cmpeqi	r2,r17,1
   12da0:	10006126 	beq	r2,zero,12f28 <__divdf3+0x2c0>
   12da4:	0007883a 	mov	r3,zero
   12da8:	000b883a 	mov	r5,zero
   12dac:	0029883a 	mov	r20,zero
   12db0:	1806953a 	slli	r3,r3,20
   12db4:	380e97fa 	slli	r7,r7,31
   12db8:	a005883a 	mov	r2,r20
   12dbc:	1946b03a 	or	r3,r3,r5
   12dc0:	19c6b03a 	or	r3,r3,r7
   12dc4:	dfc00f17 	ldw	ra,60(sp)
   12dc8:	df000e17 	ldw	fp,56(sp)
   12dcc:	ddc00d17 	ldw	r23,52(sp)
   12dd0:	dd800c17 	ldw	r22,48(sp)
   12dd4:	dd400b17 	ldw	r21,44(sp)
   12dd8:	dd000a17 	ldw	r20,40(sp)
   12ddc:	dcc00917 	ldw	r19,36(sp)
   12de0:	dc800817 	ldw	r18,32(sp)
   12de4:	dc400717 	ldw	r17,28(sp)
   12de8:	dc000617 	ldw	r16,24(sp)
   12dec:	dec01004 	addi	sp,sp,64
   12df0:	f800283a 	ret
   12df4:	00c1ffc4 	movi	r3,2047
   12df8:	000b883a 	mov	r5,zero
   12dfc:	0029883a 	mov	r20,zero
   12e00:	003feb06 	br	12db0 <__divdf3+0x148>
   12e04:	a80f883a 	mov	r7,r21
   12e08:	b027883a 	mov	r19,r22
   12e0c:	4829883a 	mov	r20,r9
   12e10:	1823883a 	mov	r17,r3
   12e14:	003fdd06 	br	12d8c <__divdf3+0x124>
   12e18:	b712b03a 	or	r9,r22,fp
   12e1c:	48003e26 	beq	r9,zero,12f18 <__divdf3+0x2b0>
   12e20:	b0017726 	beq	r22,zero,13400 <__divdf3+0x798>
   12e24:	b009883a 	mov	r4,r22
   12e28:	00149d40 	call	149d4 <__clzsi2>
   12e2c:	117ffd44 	addi	r5,r2,-11
   12e30:	01000744 	movi	r4,29
   12e34:	127ffe04 	addi	r9,r2,-8
   12e38:	2149c83a 	sub	r4,r4,r5
   12e3c:	b246983a 	sll	r3,r22,r9
   12e40:	e108d83a 	srl	r4,fp,r4
   12e44:	e252983a 	sll	r9,fp,r9
   12e48:	20ecb03a 	or	r22,r4,r3
   12e4c:	1491883a 	add	r8,r2,r18
   12e50:	4480fcc4 	addi	r18,r8,1011
   12e54:	0007883a 	mov	r3,zero
   12e58:	003fb306 	br	12d28 <__divdf3+0xc0>
   12e5c:	8126b03a 	or	r19,r16,r4
   12e60:	2023883a 	mov	r17,r4
   12e64:	98002726 	beq	r19,zero,12f04 <__divdf3+0x29c>
   12e68:	80017026 	beq	r16,zero,1342c <__divdf3+0x7c4>
   12e6c:	8009883a 	mov	r4,r16
   12e70:	00149d40 	call	149d4 <__clzsi2>
   12e74:	113ffd44 	addi	r4,r2,-11
   12e78:	00c00744 	movi	r3,29
   12e7c:	14fffe04 	addi	r19,r2,-8
   12e80:	1907c83a 	sub	r3,r3,r4
   12e84:	84ca983a 	sll	r5,r16,r19
   12e88:	88c6d83a 	srl	r3,r17,r3
   12e8c:	8ce8983a 	sll	r20,r17,r19
   12e90:	1966b03a 	or	r19,r3,r5
   12e94:	023f0344 	movi	r8,-1011
   12e98:	40a5c83a 	sub	r18,r8,r2
   12e9c:	0021883a 	mov	r16,zero
   12ea0:	0023883a 	mov	r17,zero
   12ea4:	003f8f06 	br	12ce4 <__divdf3+0x7c>
   12ea8:	8126b03a 	or	r19,r16,r4
   12eac:	9800101e 	bne	r19,zero,12ef0 <__divdf3+0x288>
   12eb0:	0029883a 	mov	r20,zero
   12eb4:	04000204 	movi	r16,8
   12eb8:	0481ffc4 	movi	r18,2047
   12ebc:	04400084 	movi	r17,2
   12ec0:	003f8806 	br	12ce4 <__divdf3+0x7c>
   12ec4:	b712b03a 	or	r9,r22,fp
   12ec8:	94be0044 	addi	r18,r18,-2047
   12ecc:	4800041e 	bne	r9,zero,12ee0 <__divdf3+0x278>
   12ed0:	84000094 	ori	r16,r16,2
   12ed4:	002d883a 	mov	r22,zero
   12ed8:	00c00084 	movi	r3,2
   12edc:	003f9206 	br	12d28 <__divdf3+0xc0>
   12ee0:	840000d4 	ori	r16,r16,3
   12ee4:	e013883a 	mov	r9,fp
   12ee8:	00c000c4 	movi	r3,3
   12eec:	003f8e06 	br	12d28 <__divdf3+0xc0>
   12ef0:	8027883a 	mov	r19,r16
   12ef4:	0481ffc4 	movi	r18,2047
   12ef8:	04000304 	movi	r16,12
   12efc:	044000c4 	movi	r17,3
   12f00:	003f7806 	br	12ce4 <__divdf3+0x7c>
   12f04:	0029883a 	mov	r20,zero
   12f08:	04000104 	movi	r16,4
   12f0c:	0025883a 	mov	r18,zero
   12f10:	04400044 	movi	r17,1
   12f14:	003f7306 	br	12ce4 <__divdf3+0x7c>
   12f18:	84000054 	ori	r16,r16,1
   12f1c:	002d883a 	mov	r22,zero
   12f20:	00c00044 	movi	r3,1
   12f24:	003f8006 	br	12d28 <__divdf3+0xc0>
   12f28:	9440ffc4 	addi	r17,r18,1023
   12f2c:	0441050e 	bge	zero,r17,13344 <__divdf3+0x6dc>
   12f30:	a08001cc 	andi	r2,r20,7
   12f34:	10016c1e 	bne	r2,zero,134e8 <__divdf3+0x880>
   12f38:	a008d0fa 	srli	r4,r20,3
   12f3c:	9880402c 	andhi	r2,r19,256
   12f40:	10000426 	beq	r2,zero,12f54 <__divdf3+0x2ec>
   12f44:	00bfc034 	movhi	r2,65280
   12f48:	10bfffc4 	addi	r2,r2,-1
   12f4c:	98a6703a 	and	r19,r19,r2
   12f50:	94410004 	addi	r17,r18,1024
   12f54:	8881ffc8 	cmpgei	r2,r17,2047
   12f58:	103fa61e 	bne	r2,zero,12df4 <__divdf3+0x18c>
   12f5c:	9828977a 	slli	r20,r19,29
   12f60:	980a927a 	slli	r5,r19,9
   12f64:	88c1ffcc 	andi	r3,r17,2047
   12f68:	a128b03a 	or	r20,r20,r4
   12f6c:	280ad33a 	srli	r5,r5,12
   12f70:	003f8f06 	br	12db0 <__divdf3+0x148>
   12f74:	01400434 	movhi	r5,16
   12f78:	000f883a 	mov	r7,zero
   12f7c:	297fffc4 	addi	r5,r5,-1
   12f80:	053fffc4 	movi	r20,-1
   12f84:	00c1ffc4 	movi	r3,2047
   12f88:	003f8906 	br	12db0 <__divdf3+0x148>
   12f8c:	9880022c 	andhi	r2,r19,8
   12f90:	10000926 	beq	r2,zero,12fb8 <__divdf3+0x350>
   12f94:	b080022c 	andhi	r2,r22,8
   12f98:	1000071e 	bne	r2,zero,12fb8 <__divdf3+0x350>
   12f9c:	00800434 	movhi	r2,16
   12fa0:	b1400234 	orhi	r5,r22,8
   12fa4:	10bfffc4 	addi	r2,r2,-1
   12fa8:	288a703a 	and	r5,r5,r2
   12fac:	a80f883a 	mov	r7,r21
   12fb0:	4829883a 	mov	r20,r9
   12fb4:	003ff306 	br	12f84 <__divdf3+0x31c>
   12fb8:	00800434 	movhi	r2,16
   12fbc:	99400234 	orhi	r5,r19,8
   12fc0:	10bfffc4 	addi	r2,r2,-1
   12fc4:	288a703a 	and	r5,r5,r2
   12fc8:	b80f883a 	mov	r7,r23
   12fcc:	003fed06 	br	12f84 <__divdf3+0x31c>
   12fd0:	b4c10536 	bltu	r22,r19,133e8 <__divdf3+0x780>
   12fd4:	b4c10326 	beq	r22,r19,133e4 <__divdf3+0x77c>
   12fd8:	94bfffc4 	addi	r18,r18,-1
   12fdc:	a039883a 	mov	fp,r20
   12fe0:	9821883a 	mov	r16,r19
   12fe4:	0023883a 	mov	r17,zero
   12fe8:	b006923a 	slli	r3,r22,8
   12fec:	482cd63a 	srli	r22,r9,24
   12ff0:	8009883a 	mov	r4,r16
   12ff4:	182ed43a 	srli	r23,r3,16
   12ff8:	b0ecb03a 	or	r22,r22,r3
   12ffc:	d9c00015 	stw	r7,0(sp)
   13000:	b80b883a 	mov	r5,r23
   13004:	482a923a 	slli	r21,r9,8
   13008:	b53fffcc 	andi	r20,r22,65535
   1300c:	0014b1c0 	call	14b1c <__udivsi3>
   13010:	100b883a 	mov	r5,r2
   13014:	a009883a 	mov	r4,r20
   13018:	1027883a 	mov	r19,r2
   1301c:	0014bdc0 	call	14bdc <__mulsi3>
   13020:	8009883a 	mov	r4,r16
   13024:	b80b883a 	mov	r5,r23
   13028:	1021883a 	mov	r16,r2
   1302c:	0014b800 	call	14b80 <__umodsi3>
   13030:	1004943a 	slli	r2,r2,16
   13034:	e008d43a 	srli	r4,fp,16
   13038:	d9c00017 	ldw	r7,0(sp)
   1303c:	2088b03a 	or	r4,r4,r2
   13040:	2400042e 	bgeu	r4,r16,13054 <__divdf3+0x3ec>
   13044:	2589883a 	add	r4,r4,r22
   13048:	98bfffc4 	addi	r2,r19,-1
   1304c:	2581082e 	bgeu	r4,r22,13470 <__divdf3+0x808>
   13050:	1027883a 	mov	r19,r2
   13054:	2421c83a 	sub	r16,r4,r16
   13058:	b80b883a 	mov	r5,r23
   1305c:	8009883a 	mov	r4,r16
   13060:	d9c00215 	stw	r7,8(sp)
   13064:	0014b1c0 	call	14b1c <__udivsi3>
   13068:	100b883a 	mov	r5,r2
   1306c:	a009883a 	mov	r4,r20
   13070:	d8800115 	stw	r2,4(sp)
   13074:	0014bdc0 	call	14bdc <__mulsi3>
   13078:	b80b883a 	mov	r5,r23
   1307c:	8009883a 	mov	r4,r16
   13080:	d8800015 	stw	r2,0(sp)
   13084:	0014b800 	call	14b80 <__umodsi3>
   13088:	100c943a 	slli	r6,r2,16
   1308c:	d8c00017 	ldw	r3,0(sp)
   13090:	e73fffcc 	andi	fp,fp,65535
   13094:	e18cb03a 	or	r6,fp,r6
   13098:	da000117 	ldw	r8,4(sp)
   1309c:	d9c00217 	ldw	r7,8(sp)
   130a0:	30c0042e 	bgeu	r6,r3,130b4 <__divdf3+0x44c>
   130a4:	358d883a 	add	r6,r6,r22
   130a8:	40bfffc4 	addi	r2,r8,-1
   130ac:	3580ec2e 	bgeu	r6,r22,13460 <__divdf3+0x7f8>
   130b0:	1011883a 	mov	r8,r2
   130b4:	9826943a 	slli	r19,r19,16
   130b8:	af3fffcc 	andi	fp,r21,65535
   130bc:	30c7c83a 	sub	r3,r6,r3
   130c0:	9a26b03a 	or	r19,r19,r8
   130c4:	9810d43a 	srli	r8,r19,16
   130c8:	9abfffcc 	andi	r10,r19,65535
   130cc:	5009883a 	mov	r4,r10
   130d0:	e00b883a 	mov	r5,fp
   130d4:	d9c00515 	stw	r7,20(sp)
   130d8:	d8c00315 	stw	r3,12(sp)
   130dc:	da800415 	stw	r10,16(sp)
   130e0:	da000015 	stw	r8,0(sp)
   130e4:	0014bdc0 	call	14bdc <__mulsi3>
   130e8:	da000017 	ldw	r8,0(sp)
   130ec:	e00b883a 	mov	r5,fp
   130f0:	d8800215 	stw	r2,8(sp)
   130f4:	4009883a 	mov	r4,r8
   130f8:	0014bdc0 	call	14bdc <__mulsi3>
   130fc:	da000017 	ldw	r8,0(sp)
   13100:	a820d43a 	srli	r16,r21,16
   13104:	d8800115 	stw	r2,4(sp)
   13108:	4009883a 	mov	r4,r8
   1310c:	800b883a 	mov	r5,r16
   13110:	0014bdc0 	call	14bdc <__mulsi3>
   13114:	da800417 	ldw	r10,16(sp)
   13118:	8009883a 	mov	r4,r16
   1311c:	d8800015 	stw	r2,0(sp)
   13120:	500b883a 	mov	r5,r10
   13124:	0014bdc0 	call	14bdc <__mulsi3>
   13128:	d9800217 	ldw	r6,8(sp)
   1312c:	da000117 	ldw	r8,4(sp)
   13130:	da400017 	ldw	r9,0(sp)
   13134:	3008d43a 	srli	r4,r6,16
   13138:	1205883a 	add	r2,r2,r8
   1313c:	d8c00317 	ldw	r3,12(sp)
   13140:	2089883a 	add	r4,r4,r2
   13144:	d9c00517 	ldw	r7,20(sp)
   13148:	2200022e 	bgeu	r4,r8,13154 <__divdf3+0x4ec>
   1314c:	00800074 	movhi	r2,1
   13150:	4893883a 	add	r9,r9,r2
   13154:	200ad43a 	srli	r5,r4,16
   13158:	2008943a 	slli	r4,r4,16
   1315c:	31bfffcc 	andi	r6,r6,65535
   13160:	2a4b883a 	add	r5,r5,r9
   13164:	218d883a 	add	r6,r4,r6
   13168:	19409436 	bltu	r3,r5,133bc <__divdf3+0x754>
   1316c:	19409226 	beq	r3,r5,133b8 <__divdf3+0x750>
   13170:	898dc83a 	sub	r6,r17,r6
   13174:	89a3803a 	cmpltu	r17,r17,r6
   13178:	1947c83a 	sub	r3,r3,r5
   1317c:	1c47c83a 	sub	r3,r3,r17
   13180:	9440ffc4 	addi	r17,r18,1023
   13184:	b0c0d326 	beq	r22,r3,134d4 <__divdf3+0x86c>
   13188:	1809883a 	mov	r4,r3
   1318c:	b80b883a 	mov	r5,r23
   13190:	d9800315 	stw	r6,12(sp)
   13194:	d9c00215 	stw	r7,8(sp)
   13198:	d8c00015 	stw	r3,0(sp)
   1319c:	0014b1c0 	call	14b1c <__udivsi3>
   131a0:	100b883a 	mov	r5,r2
   131a4:	a009883a 	mov	r4,r20
   131a8:	d8800115 	stw	r2,4(sp)
   131ac:	0014bdc0 	call	14bdc <__mulsi3>
   131b0:	d8c00017 	ldw	r3,0(sp)
   131b4:	b80b883a 	mov	r5,r23
   131b8:	d8800015 	stw	r2,0(sp)
   131bc:	1809883a 	mov	r4,r3
   131c0:	0014b800 	call	14b80 <__umodsi3>
   131c4:	d9800317 	ldw	r6,12(sp)
   131c8:	1006943a 	slli	r3,r2,16
   131cc:	da400017 	ldw	r9,0(sp)
   131d0:	3008d43a 	srli	r4,r6,16
   131d4:	da000117 	ldw	r8,4(sp)
   131d8:	d9c00217 	ldw	r7,8(sp)
   131dc:	20c6b03a 	or	r3,r4,r3
   131e0:	1a40062e 	bgeu	r3,r9,131fc <__divdf3+0x594>
   131e4:	1d87883a 	add	r3,r3,r22
   131e8:	40bfffc4 	addi	r2,r8,-1
   131ec:	1d80c836 	bltu	r3,r22,13510 <__divdf3+0x8a8>
   131f0:	1a40c72e 	bgeu	r3,r9,13510 <__divdf3+0x8a8>
   131f4:	423fff84 	addi	r8,r8,-2
   131f8:	1d87883a 	add	r3,r3,r22
   131fc:	1a47c83a 	sub	r3,r3,r9
   13200:	1809883a 	mov	r4,r3
   13204:	b80b883a 	mov	r5,r23
   13208:	d9800415 	stw	r6,16(sp)
   1320c:	d9c00315 	stw	r7,12(sp)
   13210:	da000215 	stw	r8,8(sp)
   13214:	d8c00115 	stw	r3,4(sp)
   13218:	0014b1c0 	call	14b1c <__udivsi3>
   1321c:	100b883a 	mov	r5,r2
   13220:	a009883a 	mov	r4,r20
   13224:	d8800015 	stw	r2,0(sp)
   13228:	0014bdc0 	call	14bdc <__mulsi3>
   1322c:	d8c00117 	ldw	r3,4(sp)
   13230:	b80b883a 	mov	r5,r23
   13234:	102f883a 	mov	r23,r2
   13238:	1809883a 	mov	r4,r3
   1323c:	0014b800 	call	14b80 <__umodsi3>
   13240:	d9800417 	ldw	r6,16(sp)
   13244:	1004943a 	slli	r2,r2,16
   13248:	da400017 	ldw	r9,0(sp)
   1324c:	31bfffcc 	andi	r6,r6,65535
   13250:	308cb03a 	or	r6,r6,r2
   13254:	da000217 	ldw	r8,8(sp)
   13258:	d9c00317 	ldw	r7,12(sp)
   1325c:	35c0062e 	bgeu	r6,r23,13278 <__divdf3+0x610>
   13260:	358d883a 	add	r6,r6,r22
   13264:	48bfffc4 	addi	r2,r9,-1
   13268:	3580a736 	bltu	r6,r22,13508 <__divdf3+0x8a0>
   1326c:	35c0a62e 	bgeu	r6,r23,13508 <__divdf3+0x8a0>
   13270:	4a7fff84 	addi	r9,r9,-2
   13274:	358d883a 	add	r6,r6,r22
   13278:	4028943a 	slli	r20,r8,16
   1327c:	35d5c83a 	sub	r10,r6,r23
   13280:	e009883a 	mov	r4,fp
   13284:	a268b03a 	or	r20,r20,r9
   13288:	a23fffcc 	andi	r8,r20,65535
   1328c:	a02ed43a 	srli	r23,r20,16
   13290:	400b883a 	mov	r5,r8
   13294:	d9c00315 	stw	r7,12(sp)
   13298:	da800215 	stw	r10,8(sp)
   1329c:	da000115 	stw	r8,4(sp)
   132a0:	0014bdc0 	call	14bdc <__mulsi3>
   132a4:	e00b883a 	mov	r5,fp
   132a8:	b809883a 	mov	r4,r23
   132ac:	1039883a 	mov	fp,r2
   132b0:	0014bdc0 	call	14bdc <__mulsi3>
   132b4:	8009883a 	mov	r4,r16
   132b8:	b80b883a 	mov	r5,r23
   132bc:	d8800015 	stw	r2,0(sp)
   132c0:	0014bdc0 	call	14bdc <__mulsi3>
   132c4:	da000117 	ldw	r8,4(sp)
   132c8:	8009883a 	mov	r4,r16
   132cc:	1021883a 	mov	r16,r2
   132d0:	400b883a 	mov	r5,r8
   132d4:	0014bdc0 	call	14bdc <__mulsi3>
   132d8:	d9800017 	ldw	r6,0(sp)
   132dc:	e006d43a 	srli	r3,fp,16
   132e0:	da800217 	ldw	r10,8(sp)
   132e4:	1185883a 	add	r2,r2,r6
   132e8:	1887883a 	add	r3,r3,r2
   132ec:	d9c00317 	ldw	r7,12(sp)
   132f0:	1980022e 	bgeu	r3,r6,132fc <__divdf3+0x694>
   132f4:	00800074 	movhi	r2,1
   132f8:	80a1883a 	add	r16,r16,r2
   132fc:	1808d43a 	srli	r4,r3,16
   13300:	1806943a 	slli	r3,r3,16
   13304:	e73fffcc 	andi	fp,fp,65535
   13308:	2409883a 	add	r4,r4,r16
   1330c:	1f07883a 	add	r3,r3,fp
   13310:	51000436 	bltu	r10,r4,13324 <__divdf3+0x6bc>
   13314:	51000226 	beq	r10,r4,13320 <__divdf3+0x6b8>
   13318:	a5000054 	ori	r20,r20,1
   1331c:	003f0306 	br	12f2c <__divdf3+0x2c4>
   13320:	183f0226 	beq	r3,zero,12f2c <__divdf3+0x2c4>
   13324:	b28d883a 	add	r6,r22,r10
   13328:	a0bfffc4 	addi	r2,r20,-1
   1332c:	35806536 	bltu	r6,r22,134c4 <__divdf3+0x85c>
   13330:	31008036 	bltu	r6,r4,13534 <__divdf3+0x8cc>
   13334:	31009426 	beq	r6,r4,13588 <__divdf3+0x920>
   13338:	1029883a 	mov	r20,r2
   1333c:	003ff606 	br	13318 <__divdf3+0x6b0>
   13340:	053fffc4 	movi	r20,-1
   13344:	01400044 	movi	r5,1
   13348:	2c4bc83a 	sub	r5,r5,r17
   1334c:	28800e48 	cmpgei	r2,r5,57
   13350:	103e941e 	bne	r2,zero,12da4 <__divdf3+0x13c>
   13354:	28800808 	cmpgei	r2,r5,32
   13358:	1000491e 	bne	r2,zero,13480 <__divdf3+0x818>
   1335c:	92010784 	addi	r8,r18,1054
   13360:	9a04983a 	sll	r2,r19,r8
   13364:	a146d83a 	srl	r3,r20,r5
   13368:	a210983a 	sll	r8,r20,r8
   1336c:	994ad83a 	srl	r5,r19,r5
   13370:	10e8b03a 	or	r20,r2,r3
   13374:	4010c03a 	cmpne	r8,r8,zero
   13378:	a228b03a 	or	r20,r20,r8
   1337c:	a08001cc 	andi	r2,r20,7
   13380:	10000726 	beq	r2,zero,133a0 <__divdf3+0x738>
   13384:	a08003cc 	andi	r2,r20,15
   13388:	10800120 	cmpeqi	r2,r2,4
   1338c:	1000041e 	bne	r2,zero,133a0 <__divdf3+0x738>
   13390:	a0800104 	addi	r2,r20,4
   13394:	1529803a 	cmpltu	r20,r2,r20
   13398:	2d0b883a 	add	r5,r5,r20
   1339c:	1029883a 	mov	r20,r2
   133a0:	2880202c 	andhi	r2,r5,128
   133a4:	10006f26 	beq	r2,zero,13564 <__divdf3+0x8fc>
   133a8:	00c00044 	movi	r3,1
   133ac:	000b883a 	mov	r5,zero
   133b0:	0029883a 	mov	r20,zero
   133b4:	003e7e06 	br	12db0 <__divdf3+0x148>
   133b8:	89bf6d2e 	bgeu	r17,r6,13170 <__divdf3+0x508>
   133bc:	8d63883a 	add	r17,r17,r21
   133c0:	8d45803a 	cmpltu	r2,r17,r21
   133c4:	1585883a 	add	r2,r2,r22
   133c8:	1887883a 	add	r3,r3,r2
   133cc:	98bfffc4 	addi	r2,r19,-1
   133d0:	b0c0202e 	bgeu	r22,r3,13454 <__divdf3+0x7ec>
   133d4:	19405136 	bltu	r3,r5,1351c <__divdf3+0x8b4>
   133d8:	28c04f26 	beq	r5,r3,13518 <__divdf3+0x8b0>
   133dc:	1027883a 	mov	r19,r2
   133e0:	003f6306 	br	13170 <__divdf3+0x508>
   133e4:	a27efc36 	bltu	r20,r9,12fd8 <__divdf3+0x370>
   133e8:	983897fa 	slli	fp,r19,31
   133ec:	a004d07a 	srli	r2,r20,1
   133f0:	9820d07a 	srli	r16,r19,1
   133f4:	a02297fa 	slli	r17,r20,31
   133f8:	e0b8b03a 	or	fp,fp,r2
   133fc:	003efa06 	br	12fe8 <__divdf3+0x380>
   13400:	e009883a 	mov	r4,fp
   13404:	00149d40 	call	149d4 <__clzsi2>
   13408:	11400544 	addi	r5,r2,21
   1340c:	29000748 	cmpgei	r4,r5,29
   13410:	1007883a 	mov	r3,r2
   13414:	10800804 	addi	r2,r2,32
   13418:	203e8526 	beq	r4,zero,12e30 <__divdf3+0x1c8>
   1341c:	18fffe04 	addi	r3,r3,-8
   13420:	e0ec983a 	sll	r22,fp,r3
   13424:	0013883a 	mov	r9,zero
   13428:	003e8806 	br	12e4c <__divdf3+0x1e4>
   1342c:	00149d40 	call	149d4 <__clzsi2>
   13430:	11000544 	addi	r4,r2,21
   13434:	20c00748 	cmpgei	r3,r4,29
   13438:	100b883a 	mov	r5,r2
   1343c:	10800804 	addi	r2,r2,32
   13440:	183e8d26 	beq	r3,zero,12e78 <__divdf3+0x210>
   13444:	297ffe04 	addi	r5,r5,-8
   13448:	a166983a 	sll	r19,r20,r5
   1344c:	0029883a 	mov	r20,zero
   13450:	003e9006 	br	12e94 <__divdf3+0x22c>
   13454:	b0ffe11e 	bne	r22,r3,133dc <__divdf3+0x774>
   13458:	8d7fe036 	bltu	r17,r21,133dc <__divdf3+0x774>
   1345c:	003fdd06 	br	133d4 <__divdf3+0x76c>
   13460:	30ff132e 	bgeu	r6,r3,130b0 <__divdf3+0x448>
   13464:	423fff84 	addi	r8,r8,-2
   13468:	358d883a 	add	r6,r6,r22
   1346c:	003f1106 	br	130b4 <__divdf3+0x44c>
   13470:	243ef72e 	bgeu	r4,r16,13050 <__divdf3+0x3e8>
   13474:	9cffff84 	addi	r19,r19,-2
   13478:	2589883a 	add	r4,r4,r22
   1347c:	003ef506 	br	13054 <__divdf3+0x3ec>
   13480:	00fff844 	movi	r3,-31
   13484:	1c47c83a 	sub	r3,r3,r17
   13488:	29400820 	cmpeqi	r5,r5,32
   1348c:	98c6d83a 	srl	r3,r19,r3
   13490:	2800031e 	bne	r5,zero,134a0 <__divdf3+0x838>
   13494:	91410f84 	addi	r5,r18,1086
   13498:	994a983a 	sll	r5,r19,r5
   1349c:	a168b03a 	or	r20,r20,r5
   134a0:	a028c03a 	cmpne	r20,r20,zero
   134a4:	a0e8b03a 	or	r20,r20,r3
   134a8:	a4c001cc 	andi	r19,r20,7
   134ac:	9800291e 	bne	r19,zero,13554 <__divdf3+0x8ec>
   134b0:	000b883a 	mov	r5,zero
   134b4:	a028d0fa 	srli	r20,r20,3
   134b8:	0007883a 	mov	r3,zero
   134bc:	a4e8b03a 	or	r20,r20,r19
   134c0:	003e3b06 	br	12db0 <__divdf3+0x148>
   134c4:	1029883a 	mov	r20,r2
   134c8:	313f931e 	bne	r6,r4,13318 <__divdf3+0x6b0>
   134cc:	1d7f921e 	bne	r3,r21,13318 <__divdf3+0x6b0>
   134d0:	003e9606 	br	12f2c <__divdf3+0x2c4>
   134d4:	047f9a0e 	bge	zero,r17,13340 <__divdf3+0x6d8>
   134d8:	0009883a 	mov	r4,zero
   134dc:	05000044 	movi	r20,1
   134e0:	9d27883a 	add	r19,r19,r20
   134e4:	003e9506 	br	12f3c <__divdf3+0x2d4>
   134e8:	a08003cc 	andi	r2,r20,15
   134ec:	10800118 	cmpnei	r2,r2,4
   134f0:	103e9126 	beq	r2,zero,12f38 <__divdf3+0x2d0>
   134f4:	a1000104 	addi	r4,r20,4
   134f8:	00bffec4 	movi	r2,-5
   134fc:	2008d0fa 	srli	r4,r4,3
   13500:	1529803a 	cmpltu	r20,r2,r20
   13504:	003ff606 	br	134e0 <__divdf3+0x878>
   13508:	1013883a 	mov	r9,r2
   1350c:	003f5a06 	br	13278 <__divdf3+0x610>
   13510:	1011883a 	mov	r8,r2
   13514:	003f3906 	br	131fc <__divdf3+0x594>
   13518:	89bfb02e 	bgeu	r17,r6,133dc <__divdf3+0x774>
   1351c:	8d63883a 	add	r17,r17,r21
   13520:	8d45803a 	cmpltu	r2,r17,r21
   13524:	1585883a 	add	r2,r2,r22
   13528:	9cffff84 	addi	r19,r19,-2
   1352c:	1887883a 	add	r3,r3,r2
   13530:	003f0f06 	br	13170 <__divdf3+0x508>
   13534:	ad45883a 	add	r2,r21,r21
   13538:	156b803a 	cmpltu	r21,r2,r21
   1353c:	adad883a 	add	r22,r21,r22
   13540:	358d883a 	add	r6,r6,r22
   13544:	a53fff84 	addi	r20,r20,-2
   13548:	102b883a 	mov	r21,r2
   1354c:	313fdf26 	beq	r6,r4,134cc <__divdf3+0x864>
   13550:	003f7106 	br	13318 <__divdf3+0x6b0>
   13554:	a08003cc 	andi	r2,r20,15
   13558:	10800118 	cmpnei	r2,r2,4
   1355c:	000b883a 	mov	r5,zero
   13560:	103f8b1e 	bne	r2,zero,13390 <__divdf3+0x728>
   13564:	2804927a 	slli	r2,r5,9
   13568:	2826977a 	slli	r19,r5,29
   1356c:	100ad33a 	srli	r5,r2,12
   13570:	003fd006 	br	134b4 <__divdf3+0x84c>
   13574:	00800434 	movhi	r2,16
   13578:	99400234 	orhi	r5,r19,8
   1357c:	10bfffc4 	addi	r2,r2,-1
   13580:	288a703a 	and	r5,r5,r2
   13584:	003e7f06 	br	12f84 <__divdf3+0x31c>
   13588:	a8ffea36 	bltu	r21,r3,13534 <__divdf3+0x8cc>
   1358c:	1029883a 	mov	r20,r2
   13590:	1d7f611e 	bne	r3,r21,13318 <__divdf3+0x6b0>
   13594:	003e6506 	br	12f2c <__divdf3+0x2c4>

00013598 <__eqdf2>:
   13598:	2810d53a 	srli	r8,r5,20
   1359c:	3806d53a 	srli	r3,r7,20
   135a0:	00800434 	movhi	r2,16
   135a4:	4201ffcc 	andi	r8,r8,2047
   135a8:	10bfffc4 	addi	r2,r2,-1
   135ac:	4241ffd8 	cmpnei	r9,r8,2047
   135b0:	2814d7fa 	srli	r10,r5,31
   135b4:	3816d7fa 	srli	r11,r7,31
   135b8:	288a703a 	and	r5,r5,r2
   135bc:	388e703a 	and	r7,r7,r2
   135c0:	1881ffcc 	andi	r2,r3,2047
   135c4:	48000626 	beq	r9,zero,135e0 <__eqdf2+0x48>
   135c8:	10c1ffe0 	cmpeqi	r3,r2,2047
   135cc:	1800021e 	bne	r3,zero,135d8 <__eqdf2+0x40>
   135d0:	4080011e 	bne	r8,r2,135d8 <__eqdf2+0x40>
   135d4:	29c00826 	beq	r5,r7,135f8 <__eqdf2+0x60>
   135d8:	00800044 	movi	r2,1
   135dc:	f800283a 	ret
   135e0:	2906b03a 	or	r3,r5,r4
   135e4:	183ffc1e 	bne	r3,zero,135d8 <__eqdf2+0x40>
   135e8:	1081ffd8 	cmpnei	r2,r2,2047
   135ec:	103ffa1e 	bne	r2,zero,135d8 <__eqdf2+0x40>
   135f0:	398eb03a 	or	r7,r7,r6
   135f4:	383ff81e 	bne	r7,zero,135d8 <__eqdf2+0x40>
   135f8:	21bff71e 	bne	r4,r6,135d8 <__eqdf2+0x40>
   135fc:	52c00426 	beq	r10,r11,13610 <__eqdf2+0x78>
   13600:	403ff51e 	bne	r8,zero,135d8 <__eqdf2+0x40>
   13604:	290ab03a 	or	r5,r5,r4
   13608:	2804c03a 	cmpne	r2,r5,zero
   1360c:	f800283a 	ret
   13610:	0005883a 	mov	r2,zero
   13614:	f800283a 	ret

00013618 <__gedf2>:
   13618:	2810d53a 	srli	r8,r5,20
   1361c:	3812d53a 	srli	r9,r7,20
   13620:	00c00434 	movhi	r3,16
   13624:	4201ffcc 	andi	r8,r8,2047
   13628:	18ffffc4 	addi	r3,r3,-1
   1362c:	4281ffd8 	cmpnei	r10,r8,2047
   13630:	2816d7fa 	srli	r11,r5,31
   13634:	3804d7fa 	srli	r2,r7,31
   13638:	28ca703a 	and	r5,r5,r3
   1363c:	38ce703a 	and	r7,r7,r3
   13640:	48c1ffcc 	andi	r3,r9,2047
   13644:	50000a26 	beq	r10,zero,13670 <__gedf2+0x58>
   13648:	1a41ffd8 	cmpnei	r9,r3,2047
   1364c:	48000c26 	beq	r9,zero,13680 <__gedf2+0x68>
   13650:	4000171e 	bne	r8,zero,136b0 <__gedf2+0x98>
   13654:	2912b03a 	or	r9,r5,r4
   13658:	1800121e 	bne	r3,zero,136a4 <__gedf2+0x8c>
   1365c:	3994b03a 	or	r10,r7,r6
   13660:	5000101e 	bne	r10,zero,136a4 <__gedf2+0x8c>
   13664:	48000a1e 	bne	r9,zero,13690 <__gedf2+0x78>
   13668:	0005883a 	mov	r2,zero
   1366c:	f800283a 	ret
   13670:	2912b03a 	or	r9,r5,r4
   13674:	48001d1e 	bne	r9,zero,136ec <__gedf2+0xd4>
   13678:	1a41ffe0 	cmpeqi	r9,r3,2047
   1367c:	48000c26 	beq	r9,zero,136b0 <__gedf2+0x98>
   13680:	3992b03a 	or	r9,r7,r6
   13684:	4800191e 	bne	r9,zero,136ec <__gedf2+0xd4>
   13688:	40000526 	beq	r8,zero,136a0 <__gedf2+0x88>
   1368c:	58800c26 	beq	r11,r2,136c0 <__gedf2+0xa8>
   13690:	00800044 	movi	r2,1
   13694:	58000526 	beq	r11,zero,136ac <__gedf2+0x94>
   13698:	00bfffc4 	movi	r2,-1
   1369c:	f800283a 	ret
   136a0:	2912b03a 	or	r9,r5,r4
   136a4:	483ff91e 	bne	r9,zero,1368c <__gedf2+0x74>
   136a8:	103ffb26 	beq	r2,zero,13698 <__gedf2+0x80>
   136ac:	f800283a 	ret
   136b0:	183ff61e 	bne	r3,zero,1368c <__gedf2+0x74>
   136b4:	3992b03a 	or	r9,r7,r6
   136b8:	483ff41e 	bne	r9,zero,1368c <__gedf2+0x74>
   136bc:	003ff406 	br	13690 <__gedf2+0x78>
   136c0:	1a000716 	blt	r3,r8,136e0 <__gedf2+0xc8>
   136c4:	40fff816 	blt	r8,r3,136a8 <__gedf2+0x90>
   136c8:	397ff136 	bltu	r7,r5,13690 <__gedf2+0x78>
   136cc:	29c00926 	beq	r5,r7,136f4 <__gedf2+0xdc>
   136d0:	29ffe52e 	bgeu	r5,r7,13668 <__gedf2+0x50>
   136d4:	583ff026 	beq	r11,zero,13698 <__gedf2+0x80>
   136d8:	5805883a 	mov	r2,r11
   136dc:	f800283a 	ret
   136e0:	103fed1e 	bne	r2,zero,13698 <__gedf2+0x80>
   136e4:	00800044 	movi	r2,1
   136e8:	f800283a 	ret
   136ec:	00bfff84 	movi	r2,-2
   136f0:	f800283a 	ret
   136f4:	313fe636 	bltu	r6,r4,13690 <__gedf2+0x78>
   136f8:	21bfdb2e 	bgeu	r4,r6,13668 <__gedf2+0x50>
   136fc:	003ff506 	br	136d4 <__gedf2+0xbc>

00013700 <__ledf2>:
   13700:	2810d53a 	srli	r8,r5,20
   13704:	3812d53a 	srli	r9,r7,20
   13708:	00c00434 	movhi	r3,16
   1370c:	4201ffcc 	andi	r8,r8,2047
   13710:	18ffffc4 	addi	r3,r3,-1
   13714:	4281ffd8 	cmpnei	r10,r8,2047
   13718:	2816d7fa 	srli	r11,r5,31
   1371c:	3804d7fa 	srli	r2,r7,31
   13720:	28ca703a 	and	r5,r5,r3
   13724:	38ce703a 	and	r7,r7,r3
   13728:	48c1ffcc 	andi	r3,r9,2047
   1372c:	50000a26 	beq	r10,zero,13758 <__ledf2+0x58>
   13730:	1a41ffd8 	cmpnei	r9,r3,2047
   13734:	48000c26 	beq	r9,zero,13768 <__ledf2+0x68>
   13738:	4000191e 	bne	r8,zero,137a0 <__ledf2+0xa0>
   1373c:	2912b03a 	or	r9,r5,r4
   13740:	18000d1e 	bne	r3,zero,13778 <__ledf2+0x78>
   13744:	3994b03a 	or	r10,r7,r6
   13748:	50000b1e 	bne	r10,zero,13778 <__ledf2+0x78>
   1374c:	48000c1e 	bne	r9,zero,13780 <__ledf2+0x80>
   13750:	0005883a 	mov	r2,zero
   13754:	f800283a 	ret
   13758:	2912b03a 	or	r9,r5,r4
   1375c:	48000c1e 	bne	r9,zero,13790 <__ledf2+0x90>
   13760:	1a41ffe0 	cmpeqi	r9,r3,2047
   13764:	48000e26 	beq	r9,zero,137a0 <__ledf2+0xa0>
   13768:	3992b03a 	or	r9,r7,r6
   1376c:	4800081e 	bne	r9,zero,13790 <__ledf2+0x90>
   13770:	4000021e 	bne	r8,zero,1377c <__ledf2+0x7c>
   13774:	2912b03a 	or	r9,r5,r4
   13778:	48000726 	beq	r9,zero,13798 <__ledf2+0x98>
   1377c:	58800c26 	beq	r11,r2,137b0 <__ledf2+0xb0>
   13780:	00800044 	movi	r2,1
   13784:	58000526 	beq	r11,zero,1379c <__ledf2+0x9c>
   13788:	00bfffc4 	movi	r2,-1
   1378c:	f800283a 	ret
   13790:	00800084 	movi	r2,2
   13794:	f800283a 	ret
   13798:	103ffb26 	beq	r2,zero,13788 <__ledf2+0x88>
   1379c:	f800283a 	ret
   137a0:	183ff61e 	bne	r3,zero,1377c <__ledf2+0x7c>
   137a4:	3992b03a 	or	r9,r7,r6
   137a8:	483ff41e 	bne	r9,zero,1377c <__ledf2+0x7c>
   137ac:	003ff406 	br	13780 <__ledf2+0x80>
   137b0:	1a00030e 	bge	r3,r8,137c0 <__ledf2+0xc0>
   137b4:	103ff41e 	bne	r2,zero,13788 <__ledf2+0x88>
   137b8:	00800044 	movi	r2,1
   137bc:	f800283a 	ret
   137c0:	40fff516 	blt	r8,r3,13798 <__ledf2+0x98>
   137c4:	397fee36 	bltu	r7,r5,13780 <__ledf2+0x80>
   137c8:	29c00426 	beq	r5,r7,137dc <__ledf2+0xdc>
   137cc:	29ffe02e 	bgeu	r5,r7,13750 <__ledf2+0x50>
   137d0:	583fed26 	beq	r11,zero,13788 <__ledf2+0x88>
   137d4:	5805883a 	mov	r2,r11
   137d8:	f800283a 	ret
   137dc:	313fe836 	bltu	r6,r4,13780 <__ledf2+0x80>
   137e0:	21bfdb2e 	bgeu	r4,r6,13750 <__ledf2+0x50>
   137e4:	003ffa06 	br	137d0 <__ledf2+0xd0>

000137e8 <__muldf3>:
   137e8:	2810d53a 	srli	r8,r5,20
   137ec:	defff004 	addi	sp,sp,-64
   137f0:	00800434 	movhi	r2,16
   137f4:	df000e15 	stw	fp,56(sp)
   137f8:	dd000a15 	stw	r20,40(sp)
   137fc:	dcc00915 	stw	r19,36(sp)
   13800:	dc400715 	stw	r17,28(sp)
   13804:	10bfffc4 	addi	r2,r2,-1
   13808:	dfc00f15 	stw	ra,60(sp)
   1380c:	ddc00d15 	stw	r23,52(sp)
   13810:	dd800c15 	stw	r22,48(sp)
   13814:	dd400b15 	stw	r21,44(sp)
   13818:	dc800815 	stw	r18,32(sp)
   1381c:	dc000615 	stw	r16,24(sp)
   13820:	4201ffcc 	andi	r8,r8,2047
   13824:	2828d7fa 	srli	r20,r5,31
   13828:	2023883a 	mov	r17,r4
   1382c:	3039883a 	mov	fp,r6
   13830:	28a6703a 	and	r19,r5,r2
   13834:	40013426 	beq	r8,zero,13d08 <__muldf3+0x520>
   13838:	4081ffe0 	cmpeqi	r2,r8,2047
   1383c:	1001461e 	bne	r2,zero,13d58 <__muldf3+0x570>
   13840:	980a90fa 	slli	r5,r19,3
   13844:	2026d77a 	srli	r19,r4,29
   13848:	202490fa 	slli	r18,r4,3
   1384c:	423f0044 	addi	r8,r8,-1023
   13850:	9966b03a 	or	r19,r19,r5
   13854:	9cc02034 	orhi	r19,r19,128
   13858:	002b883a 	mov	r21,zero
   1385c:	002d883a 	mov	r22,zero
   13860:	3804d53a 	srli	r2,r7,20
   13864:	00c00434 	movhi	r3,16
   13868:	18ffffc4 	addi	r3,r3,-1
   1386c:	1081ffcc 	andi	r2,r2,2047
   13870:	382ed7fa 	srli	r23,r7,31
   13874:	38e0703a 	and	r16,r7,r3
   13878:	10011026 	beq	r2,zero,13cbc <__muldf3+0x4d4>
   1387c:	10c1ffe0 	cmpeqi	r3,r2,2047
   13880:	18013c1e 	bne	r3,zero,13d74 <__muldf3+0x58c>
   13884:	e008d77a 	srli	r4,fp,29
   13888:	802090fa 	slli	r16,r16,3
   1388c:	e02290fa 	slli	r17,fp,3
   13890:	10bf0044 	addi	r2,r2,-1023
   13894:	2420b03a 	or	r16,r4,r16
   13898:	84002034 	orhi	r16,r16,128
   1389c:	4091883a 	add	r8,r8,r2
   138a0:	0009883a 	mov	r4,zero
   138a4:	a8800428 	cmpgeui	r2,r21,16
   138a8:	a5ccf03a 	xor	r6,r20,r23
   138ac:	41c00044 	addi	r7,r8,1
   138b0:	1000371e 	bne	r2,zero,13990 <__muldf3+0x1a8>
   138b4:	a80490ba 	slli	r2,r21,2
   138b8:	00c00074 	movhi	r3,1
   138bc:	10c7883a 	add	r3,r2,r3
   138c0:	188e3217 	ldw	r2,14536(r3)
   138c4:	1000683a 	jmp	r2
   138c8:	00013990 	cmplti	zero,zero,1254
   138cc:	0001390c 	andi	zero,zero,1252
   138d0:	0001390c 	andi	zero,zero,1252
   138d4:	00013908 	cmpgei	zero,zero,1252
   138d8:	00013918 	cmpnei	zero,zero,1252
   138dc:	00013918 	cmpnei	zero,zero,1252
   138e0:	00013de8 	cmpgeui	zero,zero,1271
   138e4:	00013908 	cmpgei	zero,zero,1252
   138e8:	00013918 	cmpnei	zero,zero,1252
   138ec:	00013de8 	cmpgeui	zero,zero,1271
   138f0:	00013918 	cmpnei	zero,zero,1252
   138f4:	00013908 	cmpgei	zero,zero,1252
   138f8:	00013d90 	cmplti	zero,zero,1270
   138fc:	00013d90 	cmplti	zero,zero,1270
   13900:	00013d90 	cmplti	zero,zero,1270
   13904:	00013e74 	movhi	zero,1273
   13908:	b80d883a 	mov	r6,r23
   1390c:	8027883a 	mov	r19,r16
   13910:	8825883a 	mov	r18,r17
   13914:	202d883a 	mov	r22,r4
   13918:	b08000a0 	cmpeqi	r2,r22,2
   1391c:	1000181e 	bne	r2,zero,13980 <__muldf3+0x198>
   13920:	b08000e0 	cmpeqi	r2,r22,3
   13924:	1001961e 	bne	r2,zero,13f80 <__muldf3+0x798>
   13928:	b0800060 	cmpeqi	r2,r22,1
   1392c:	1000c926 	beq	r2,zero,13c54 <__muldf3+0x46c>
   13930:	0007883a 	mov	r3,zero
   13934:	0027883a 	mov	r19,zero
   13938:	0025883a 	mov	r18,zero
   1393c:	1806953a 	slli	r3,r3,20
   13940:	300c97fa 	slli	r6,r6,31
   13944:	9005883a 	mov	r2,r18
   13948:	1cc6b03a 	or	r3,r3,r19
   1394c:	1986b03a 	or	r3,r3,r6
   13950:	dfc00f17 	ldw	ra,60(sp)
   13954:	df000e17 	ldw	fp,56(sp)
   13958:	ddc00d17 	ldw	r23,52(sp)
   1395c:	dd800c17 	ldw	r22,48(sp)
   13960:	dd400b17 	ldw	r21,44(sp)
   13964:	dd000a17 	ldw	r20,40(sp)
   13968:	dcc00917 	ldw	r19,36(sp)
   1396c:	dc800817 	ldw	r18,32(sp)
   13970:	dc400717 	ldw	r17,28(sp)
   13974:	dc000617 	ldw	r16,24(sp)
   13978:	dec01004 	addi	sp,sp,64
   1397c:	f800283a 	ret
   13980:	00c1ffc4 	movi	r3,2047
   13984:	0027883a 	mov	r19,zero
   13988:	0025883a 	mov	r18,zero
   1398c:	003feb06 	br	1393c <__muldf3+0x154>
   13990:	9028d43a 	srli	r20,r18,16
   13994:	8f3fffcc 	andi	fp,r17,65535
   13998:	957fffcc 	andi	r21,r18,65535
   1399c:	a80b883a 	mov	r5,r21
   139a0:	e009883a 	mov	r4,fp
   139a4:	d9800315 	stw	r6,12(sp)
   139a8:	da000215 	stw	r8,8(sp)
   139ac:	d9c00115 	stw	r7,4(sp)
   139b0:	8822d43a 	srli	r17,r17,16
   139b4:	0014bdc0 	call	14bdc <__mulsi3>
   139b8:	e00b883a 	mov	r5,fp
   139bc:	a009883a 	mov	r4,r20
   139c0:	102d883a 	mov	r22,r2
   139c4:	0014bdc0 	call	14bdc <__mulsi3>
   139c8:	880b883a 	mov	r5,r17
   139cc:	a009883a 	mov	r4,r20
   139d0:	102f883a 	mov	r23,r2
   139d4:	0014bdc0 	call	14bdc <__mulsi3>
   139d8:	a80b883a 	mov	r5,r21
   139dc:	8809883a 	mov	r4,r17
   139e0:	d8800015 	stw	r2,0(sp)
   139e4:	0014bdc0 	call	14bdc <__mulsi3>
   139e8:	b006d43a 	srli	r3,r22,16
   139ec:	15e5883a 	add	r18,r2,r23
   139f0:	d9c00117 	ldw	r7,4(sp)
   139f4:	1c87883a 	add	r3,r3,r18
   139f8:	da000217 	ldw	r8,8(sp)
   139fc:	d9800317 	ldw	r6,12(sp)
   13a00:	1dc0042e 	bgeu	r3,r23,13a14 <__muldf3+0x22c>
   13a04:	d9000017 	ldw	r4,0(sp)
   13a08:	00800074 	movhi	r2,1
   13a0c:	2085883a 	add	r2,r4,r2
   13a10:	d8800015 	stw	r2,0(sp)
   13a14:	1804943a 	slli	r2,r3,16
   13a18:	85ffffcc 	andi	r23,r16,65535
   13a1c:	b5bfffcc 	andi	r22,r22,65535
   13a20:	1585883a 	add	r2,r2,r22
   13a24:	a80b883a 	mov	r5,r21
   13a28:	b809883a 	mov	r4,r23
   13a2c:	1824d43a 	srli	r18,r3,16
   13a30:	d9800515 	stw	r6,20(sp)
   13a34:	da000415 	stw	r8,16(sp)
   13a38:	d9c00315 	stw	r7,12(sp)
   13a3c:	8020d43a 	srli	r16,r16,16
   13a40:	d8800115 	stw	r2,4(sp)
   13a44:	0014bdc0 	call	14bdc <__mulsi3>
   13a48:	a009883a 	mov	r4,r20
   13a4c:	b80b883a 	mov	r5,r23
   13a50:	d8800215 	stw	r2,8(sp)
   13a54:	0014bdc0 	call	14bdc <__mulsi3>
   13a58:	a009883a 	mov	r4,r20
   13a5c:	800b883a 	mov	r5,r16
   13a60:	102d883a 	mov	r22,r2
   13a64:	0014bdc0 	call	14bdc <__mulsi3>
   13a68:	a80b883a 	mov	r5,r21
   13a6c:	8009883a 	mov	r4,r16
   13a70:	1029883a 	mov	r20,r2
   13a74:	0014bdc0 	call	14bdc <__mulsi3>
   13a78:	da800217 	ldw	r10,8(sp)
   13a7c:	1585883a 	add	r2,r2,r22
   13a80:	d9c00317 	ldw	r7,12(sp)
   13a84:	5006d43a 	srli	r3,r10,16
   13a88:	da000417 	ldw	r8,16(sp)
   13a8c:	d9800517 	ldw	r6,20(sp)
   13a90:	1887883a 	add	r3,r3,r2
   13a94:	1d80022e 	bgeu	r3,r22,13aa0 <__muldf3+0x2b8>
   13a98:	00800074 	movhi	r2,1
   13a9c:	a0a9883a 	add	r20,r20,r2
   13aa0:	1804d43a 	srli	r2,r3,16
   13aa4:	1806943a 	slli	r3,r3,16
   13aa8:	982cd43a 	srli	r22,r19,16
   13aac:	9d7fffcc 	andi	r21,r19,65535
   13ab0:	e009883a 	mov	r4,fp
   13ab4:	54ffffcc 	andi	r19,r10,65535
   13ab8:	a80b883a 	mov	r5,r21
   13abc:	1ce7883a 	add	r19,r3,r19
   13ac0:	d9800515 	stw	r6,20(sp)
   13ac4:	da000415 	stw	r8,16(sp)
   13ac8:	d9c00315 	stw	r7,12(sp)
   13acc:	1529883a 	add	r20,r2,r20
   13ad0:	0014bdc0 	call	14bdc <__mulsi3>
   13ad4:	e00b883a 	mov	r5,fp
   13ad8:	b009883a 	mov	r4,r22
   13adc:	d8800215 	stw	r2,8(sp)
   13ae0:	0014bdc0 	call	14bdc <__mulsi3>
   13ae4:	8809883a 	mov	r4,r17
   13ae8:	b00b883a 	mov	r5,r22
   13aec:	1039883a 	mov	fp,r2
   13af0:	0014bdc0 	call	14bdc <__mulsi3>
   13af4:	8809883a 	mov	r4,r17
   13af8:	a80b883a 	mov	r5,r21
   13afc:	1023883a 	mov	r17,r2
   13b00:	0014bdc0 	call	14bdc <__mulsi3>
   13b04:	d8c00217 	ldw	r3,8(sp)
   13b08:	1705883a 	add	r2,r2,fp
   13b0c:	d9c00317 	ldw	r7,12(sp)
   13b10:	1808d43a 	srli	r4,r3,16
   13b14:	da000417 	ldw	r8,16(sp)
   13b18:	d9800517 	ldw	r6,20(sp)
   13b1c:	2089883a 	add	r4,r4,r2
   13b20:	94e5883a 	add	r18,r18,r19
   13b24:	2700022e 	bgeu	r4,fp,13b30 <__muldf3+0x348>
   13b28:	00800074 	movhi	r2,1
   13b2c:	88a3883a 	add	r17,r17,r2
   13b30:	2004d43a 	srli	r2,r4,16
   13b34:	2038943a 	slli	fp,r4,16
   13b38:	18ffffcc 	andi	r3,r3,65535
   13b3c:	b809883a 	mov	r4,r23
   13b40:	a80b883a 	mov	r5,r21
   13b44:	d9800415 	stw	r6,16(sp)
   13b48:	da000315 	stw	r8,12(sp)
   13b4c:	d9c00215 	stw	r7,8(sp)
   13b50:	e0f9883a 	add	fp,fp,r3
   13b54:	1463883a 	add	r17,r2,r17
   13b58:	0014bdc0 	call	14bdc <__mulsi3>
   13b5c:	b80b883a 	mov	r5,r23
   13b60:	b009883a 	mov	r4,r22
   13b64:	102f883a 	mov	r23,r2
   13b68:	0014bdc0 	call	14bdc <__mulsi3>
   13b6c:	b00b883a 	mov	r5,r22
   13b70:	8009883a 	mov	r4,r16
   13b74:	102d883a 	mov	r22,r2
   13b78:	0014bdc0 	call	14bdc <__mulsi3>
   13b7c:	a80b883a 	mov	r5,r21
   13b80:	8009883a 	mov	r4,r16
   13b84:	1021883a 	mov	r16,r2
   13b88:	0014bdc0 	call	14bdc <__mulsi3>
   13b8c:	b80ad43a 	srli	r5,r23,16
   13b90:	1585883a 	add	r2,r2,r22
   13b94:	d9c00217 	ldw	r7,8(sp)
   13b98:	288b883a 	add	r5,r5,r2
   13b9c:	da000317 	ldw	r8,12(sp)
   13ba0:	d9800417 	ldw	r6,16(sp)
   13ba4:	2d80022e 	bgeu	r5,r22,13bb0 <__muldf3+0x3c8>
   13ba8:	00800074 	movhi	r2,1
   13bac:	80a1883a 	add	r16,r16,r2
   13bb0:	2806943a 	slli	r3,r5,16
   13bb4:	d8800017 	ldw	r2,0(sp)
   13bb8:	bdffffcc 	andi	r23,r23,65535
   13bbc:	1dc7883a 	add	r3,r3,r23
   13bc0:	90ab883a 	add	r21,r18,r2
   13bc4:	acd5803a 	cmpltu	r10,r21,r19
   13bc8:	1d07883a 	add	r3,r3,r20
   13bcc:	af2b883a 	add	r21,r21,fp
   13bd0:	1a97883a 	add	r11,r3,r10
   13bd4:	af09803a 	cmpltu	r4,r21,fp
   13bd8:	2826d43a 	srli	r19,r5,16
   13bdc:	5c53883a 	add	r9,r11,r17
   13be0:	4905883a 	add	r2,r9,r4
   13be4:	1d07803a 	cmpltu	r3,r3,r20
   13be8:	5a95803a 	cmpltu	r10,r11,r10
   13bec:	1a86b03a 	or	r3,r3,r10
   13bf0:	1109803a 	cmpltu	r4,r2,r4
   13bf4:	4c53803a 	cmpltu	r9,r9,r17
   13bf8:	1ce7883a 	add	r19,r3,r19
   13bfc:	4908b03a 	or	r4,r9,r4
   13c00:	a824927a 	slli	r18,r21,9
   13c04:	d8c00117 	ldw	r3,4(sp)
   13c08:	9927883a 	add	r19,r19,r4
   13c0c:	9c27883a 	add	r19,r19,r16
   13c10:	9826927a 	slli	r19,r19,9
   13c14:	a82ad5fa 	srli	r21,r21,23
   13c18:	100ad5fa 	srli	r5,r2,23
   13c1c:	90e4b03a 	or	r18,r18,r3
   13c20:	1004927a 	slli	r2,r2,9
   13c24:	9024c03a 	cmpne	r18,r18,zero
   13c28:	9564b03a 	or	r18,r18,r21
   13c2c:	98c0402c 	andhi	r3,r19,256
   13c30:	90a4b03a 	or	r18,r18,r2
   13c34:	9966b03a 	or	r19,r19,r5
   13c38:	1800b626 	beq	r3,zero,13f14 <__muldf3+0x72c>
   13c3c:	9006d07a 	srli	r3,r18,1
   13c40:	980497fa 	slli	r2,r19,31
   13c44:	9480004c 	andi	r18,r18,1
   13c48:	9826d07a 	srli	r19,r19,1
   13c4c:	1c86b03a 	or	r3,r3,r18
   13c50:	18a4b03a 	or	r18,r3,r2
   13c54:	3900ffc4 	addi	r4,r7,1023
   13c58:	0100690e 	bge	zero,r4,13e00 <__muldf3+0x618>
   13c5c:	908001cc 	andi	r2,r18,7
   13c60:	10000726 	beq	r2,zero,13c80 <__muldf3+0x498>
   13c64:	908003cc 	andi	r2,r18,15
   13c68:	10800120 	cmpeqi	r2,r2,4
   13c6c:	1000041e 	bne	r2,zero,13c80 <__muldf3+0x498>
   13c70:	90800104 	addi	r2,r18,4
   13c74:	14a5803a 	cmpltu	r18,r2,r18
   13c78:	9ca7883a 	add	r19,r19,r18
   13c7c:	1025883a 	mov	r18,r2
   13c80:	9880402c 	andhi	r2,r19,256
   13c84:	10000426 	beq	r2,zero,13c98 <__muldf3+0x4b0>
   13c88:	00bfc034 	movhi	r2,65280
   13c8c:	10bfffc4 	addi	r2,r2,-1
   13c90:	98a6703a 	and	r19,r19,r2
   13c94:	39010004 	addi	r4,r7,1024
   13c98:	2081ffc8 	cmpgei	r2,r4,2047
   13c9c:	103f381e 	bne	r2,zero,13980 <__muldf3+0x198>
   13ca0:	9804977a 	slli	r2,r19,29
   13ca4:	9024d0fa 	srli	r18,r18,3
   13ca8:	9826927a 	slli	r19,r19,9
   13cac:	20c1ffcc 	andi	r3,r4,2047
   13cb0:	14a4b03a 	or	r18,r2,r18
   13cb4:	9826d33a 	srli	r19,r19,12
   13cb8:	003f2006 	br	1393c <__muldf3+0x154>
   13cbc:	8722b03a 	or	r17,r16,fp
   13cc0:	88004526 	beq	r17,zero,13dd8 <__muldf3+0x5f0>
   13cc4:	da000015 	stw	r8,0(sp)
   13cc8:	80008626 	beq	r16,zero,13ee4 <__muldf3+0x6fc>
   13ccc:	8009883a 	mov	r4,r16
   13cd0:	00149d40 	call	149d4 <__clzsi2>
   13cd4:	da000017 	ldw	r8,0(sp)
   13cd8:	117ffd44 	addi	r5,r2,-11
   13cdc:	01000744 	movi	r4,29
   13ce0:	147ffe04 	addi	r17,r2,-8
   13ce4:	2149c83a 	sub	r4,r4,r5
   13ce8:	8460983a 	sll	r16,r16,r17
   13cec:	e108d83a 	srl	r4,fp,r4
   13cf0:	e462983a 	sll	r17,fp,r17
   13cf4:	2420b03a 	or	r16,r4,r16
   13cf8:	4091c83a 	sub	r8,r8,r2
   13cfc:	423f0344 	addi	r8,r8,-1011
   13d00:	0009883a 	mov	r4,zero
   13d04:	003ee706 	br	138a4 <__muldf3+0xbc>
   13d08:	9924b03a 	or	r18,r19,r4
   13d0c:	90002d26 	beq	r18,zero,13dc4 <__muldf3+0x5dc>
   13d10:	d9c00015 	stw	r7,0(sp)
   13d14:	98006826 	beq	r19,zero,13eb8 <__muldf3+0x6d0>
   13d18:	9809883a 	mov	r4,r19
   13d1c:	00149d40 	call	149d4 <__clzsi2>
   13d20:	d9c00017 	ldw	r7,0(sp)
   13d24:	113ffd44 	addi	r4,r2,-11
   13d28:	00c00744 	movi	r3,29
   13d2c:	14bffe04 	addi	r18,r2,-8
   13d30:	1907c83a 	sub	r3,r3,r4
   13d34:	9ca6983a 	sll	r19,r19,r18
   13d38:	88c6d83a 	srl	r3,r17,r3
   13d3c:	8ca4983a 	sll	r18,r17,r18
   13d40:	1ce6b03a 	or	r19,r3,r19
   13d44:	023f0344 	movi	r8,-1011
   13d48:	4091c83a 	sub	r8,r8,r2
   13d4c:	002b883a 	mov	r21,zero
   13d50:	002d883a 	mov	r22,zero
   13d54:	003ec206 	br	13860 <__muldf3+0x78>
   13d58:	9924b03a 	or	r18,r19,r4
   13d5c:	9000141e 	bne	r18,zero,13db0 <__muldf3+0x5c8>
   13d60:	0027883a 	mov	r19,zero
   13d64:	05400204 	movi	r21,8
   13d68:	0201ffc4 	movi	r8,2047
   13d6c:	05800084 	movi	r22,2
   13d70:	003ebb06 	br	13860 <__muldf3+0x78>
   13d74:	8722b03a 	or	r17,r16,fp
   13d78:	4201ffc4 	addi	r8,r8,2047
   13d7c:	8800081e 	bne	r17,zero,13da0 <__muldf3+0x5b8>
   13d80:	ad400094 	ori	r21,r21,2
   13d84:	0021883a 	mov	r16,zero
   13d88:	01000084 	movi	r4,2
   13d8c:	003ec506 	br	138a4 <__muldf3+0xbc>
   13d90:	b08000a0 	cmpeqi	r2,r22,2
   13d94:	a00d883a 	mov	r6,r20
   13d98:	103ee126 	beq	r2,zero,13920 <__muldf3+0x138>
   13d9c:	003ef806 	br	13980 <__muldf3+0x198>
   13da0:	ad4000d4 	ori	r21,r21,3
   13da4:	e023883a 	mov	r17,fp
   13da8:	010000c4 	movi	r4,3
   13dac:	003ebd06 	br	138a4 <__muldf3+0xbc>
   13db0:	2025883a 	mov	r18,r4
   13db4:	05400304 	movi	r21,12
   13db8:	0201ffc4 	movi	r8,2047
   13dbc:	058000c4 	movi	r22,3
   13dc0:	003ea706 	br	13860 <__muldf3+0x78>
   13dc4:	0027883a 	mov	r19,zero
   13dc8:	05400104 	movi	r21,4
   13dcc:	0011883a 	mov	r8,zero
   13dd0:	05800044 	movi	r22,1
   13dd4:	003ea206 	br	13860 <__muldf3+0x78>
   13dd8:	ad400054 	ori	r21,r21,1
   13ddc:	0021883a 	mov	r16,zero
   13de0:	01000044 	movi	r4,1
   13de4:	003eaf06 	br	138a4 <__muldf3+0xbc>
   13de8:	04c00434 	movhi	r19,16
   13dec:	000d883a 	mov	r6,zero
   13df0:	9cffffc4 	addi	r19,r19,-1
   13df4:	04bfffc4 	movi	r18,-1
   13df8:	00c1ffc4 	movi	r3,2047
   13dfc:	003ecf06 	br	1393c <__muldf3+0x154>
   13e00:	00800044 	movi	r2,1
   13e04:	1105c83a 	sub	r2,r2,r4
   13e08:	10c00e48 	cmpgei	r3,r2,57
   13e0c:	183ec81e 	bne	r3,zero,13930 <__muldf3+0x148>
   13e10:	10c00808 	cmpgei	r3,r2,32
   13e14:	1800411e 	bne	r3,zero,13f1c <__muldf3+0x734>
   13e18:	39c10784 	addi	r7,r7,1054
   13e1c:	99c6983a 	sll	r3,r19,r7
   13e20:	9088d83a 	srl	r4,r18,r2
   13e24:	91ce983a 	sll	r7,r18,r7
   13e28:	98a6d83a 	srl	r19,r19,r2
   13e2c:	1904b03a 	or	r2,r3,r4
   13e30:	3824c03a 	cmpne	r18,r7,zero
   13e34:	1484b03a 	or	r2,r2,r18
   13e38:	10c001cc 	andi	r3,r2,7
   13e3c:	18000726 	beq	r3,zero,13e5c <__muldf3+0x674>
   13e40:	10c003cc 	andi	r3,r2,15
   13e44:	18c00120 	cmpeqi	r3,r3,4
   13e48:	1800041e 	bne	r3,zero,13e5c <__muldf3+0x674>
   13e4c:	10c00104 	addi	r3,r2,4
   13e50:	1885803a 	cmpltu	r2,r3,r2
   13e54:	98a7883a 	add	r19,r19,r2
   13e58:	1805883a 	mov	r2,r3
   13e5c:	98c0202c 	andhi	r3,r19,128
   13e60:	18004326 	beq	r3,zero,13f70 <__muldf3+0x788>
   13e64:	00c00044 	movi	r3,1
   13e68:	0027883a 	mov	r19,zero
   13e6c:	0025883a 	mov	r18,zero
   13e70:	003eb206 	br	1393c <__muldf3+0x154>
   13e74:	9880022c 	andhi	r2,r19,8
   13e78:	10000926 	beq	r2,zero,13ea0 <__muldf3+0x6b8>
   13e7c:	8080022c 	andhi	r2,r16,8
   13e80:	1000071e 	bne	r2,zero,13ea0 <__muldf3+0x6b8>
   13e84:	00800434 	movhi	r2,16
   13e88:	84c00234 	orhi	r19,r16,8
   13e8c:	10bfffc4 	addi	r2,r2,-1
   13e90:	98a6703a 	and	r19,r19,r2
   13e94:	b80d883a 	mov	r6,r23
   13e98:	8825883a 	mov	r18,r17
   13e9c:	003fd606 	br	13df8 <__muldf3+0x610>
   13ea0:	00800434 	movhi	r2,16
   13ea4:	9cc00234 	orhi	r19,r19,8
   13ea8:	10bfffc4 	addi	r2,r2,-1
   13eac:	98a6703a 	and	r19,r19,r2
   13eb0:	a00d883a 	mov	r6,r20
   13eb4:	003fd006 	br	13df8 <__muldf3+0x610>
   13eb8:	00149d40 	call	149d4 <__clzsi2>
   13ebc:	11000544 	addi	r4,r2,21
   13ec0:	21400748 	cmpgei	r5,r4,29
   13ec4:	1007883a 	mov	r3,r2
   13ec8:	d9c00017 	ldw	r7,0(sp)
   13ecc:	10800804 	addi	r2,r2,32
   13ed0:	283f9526 	beq	r5,zero,13d28 <__muldf3+0x540>
   13ed4:	18fffe04 	addi	r3,r3,-8
   13ed8:	88e6983a 	sll	r19,r17,r3
   13edc:	0025883a 	mov	r18,zero
   13ee0:	003f9806 	br	13d44 <__muldf3+0x55c>
   13ee4:	e009883a 	mov	r4,fp
   13ee8:	00149d40 	call	149d4 <__clzsi2>
   13eec:	11400544 	addi	r5,r2,21
   13ef0:	29000748 	cmpgei	r4,r5,29
   13ef4:	1007883a 	mov	r3,r2
   13ef8:	da000017 	ldw	r8,0(sp)
   13efc:	10800804 	addi	r2,r2,32
   13f00:	203f7626 	beq	r4,zero,13cdc <__muldf3+0x4f4>
   13f04:	1c3ffe04 	addi	r16,r3,-8
   13f08:	e420983a 	sll	r16,fp,r16
   13f0c:	0023883a 	mov	r17,zero
   13f10:	003f7906 	br	13cf8 <__muldf3+0x510>
   13f14:	400f883a 	mov	r7,r8
   13f18:	003f4e06 	br	13c54 <__muldf3+0x46c>
   13f1c:	00fff844 	movi	r3,-31
   13f20:	1907c83a 	sub	r3,r3,r4
   13f24:	10800820 	cmpeqi	r2,r2,32
   13f28:	98c6d83a 	srl	r3,r19,r3
   13f2c:	1000031e 	bne	r2,zero,13f3c <__muldf3+0x754>
   13f30:	39c10f84 	addi	r7,r7,1086
   13f34:	99e6983a 	sll	r19,r19,r7
   13f38:	94e4b03a 	or	r18,r18,r19
   13f3c:	9024c03a 	cmpne	r18,r18,zero
   13f40:	90c4b03a 	or	r2,r18,r3
   13f44:	148001cc 	andi	r18,r2,7
   13f48:	9000051e 	bne	r18,zero,13f60 <__muldf3+0x778>
   13f4c:	0027883a 	mov	r19,zero
   13f50:	1004d0fa 	srli	r2,r2,3
   13f54:	0007883a 	mov	r3,zero
   13f58:	14a4b03a 	or	r18,r2,r18
   13f5c:	003e7706 	br	1393c <__muldf3+0x154>
   13f60:	10c003cc 	andi	r3,r2,15
   13f64:	18c00118 	cmpnei	r3,r3,4
   13f68:	0027883a 	mov	r19,zero
   13f6c:	183fb71e 	bne	r3,zero,13e4c <__muldf3+0x664>
   13f70:	9806927a 	slli	r3,r19,9
   13f74:	9824977a 	slli	r18,r19,29
   13f78:	1826d33a 	srli	r19,r3,12
   13f7c:	003ff406 	br	13f50 <__muldf3+0x768>
   13f80:	00800434 	movhi	r2,16
   13f84:	9cc00234 	orhi	r19,r19,8
   13f88:	10bfffc4 	addi	r2,r2,-1
   13f8c:	98a6703a 	and	r19,r19,r2
   13f90:	003f9906 	br	13df8 <__muldf3+0x610>

00013f94 <__subdf3>:
   13f94:	00800434 	movhi	r2,16
   13f98:	3810d53a 	srli	r8,r7,20
   13f9c:	10bfffc4 	addi	r2,r2,-1
   13fa0:	2806d53a 	srli	r3,r5,20
   13fa4:	2892703a 	and	r9,r5,r2
   13fa8:	3884703a 	and	r2,r7,r2
   13fac:	280ad7fa 	srli	r5,r5,31
   13fb0:	481290fa 	slli	r9,r9,3
   13fb4:	2018d77a 	srli	r12,r4,29
   13fb8:	100490fa 	slli	r2,r2,3
   13fbc:	3016d77a 	srli	r11,r6,29
   13fc0:	defffb04 	addi	sp,sp,-20
   13fc4:	4201ffcc 	andi	r8,r8,2047
   13fc8:	dc800215 	stw	r18,8(sp)
   13fcc:	dc400115 	stw	r17,4(sp)
   13fd0:	1c81ffcc 	andi	r18,r3,2047
   13fd4:	dfc00415 	stw	ra,16(sp)
   13fd8:	dcc00315 	stw	r19,12(sp)
   13fdc:	dc000015 	stw	r16,0(sp)
   13fe0:	4281ffd8 	cmpnei	r10,r8,2047
   13fe4:	2823883a 	mov	r17,r5
   13fe8:	201c90fa 	slli	r14,r4,3
   13fec:	380ed7fa 	srli	r7,r7,31
   13ff0:	301a90fa 	slli	r13,r6,3
   13ff4:	29403fcc 	andi	r5,r5,255
   13ff8:	6252b03a 	or	r9,r12,r9
   13ffc:	589eb03a 	or	r15,r11,r2
   14000:	9207c83a 	sub	r3,r18,r8
   14004:	50006826 	beq	r10,zero,141a8 <__subdf3+0x214>
   14008:	3ac0005c 	xori	r11,r7,1
   1400c:	2ac07326 	beq	r5,r11,141dc <__subdf3+0x248>
   14010:	00c0590e 	bge	zero,r3,14178 <__subdf3+0x1e4>
   14014:	4000691e 	bne	r8,zero,141bc <__subdf3+0x228>
   14018:	7b44b03a 	or	r2,r15,r13
   1401c:	1000fb26 	beq	r2,zero,1440c <__subdf3+0x478>
   14020:	18bfffc4 	addi	r2,r3,-1
   14024:	10019126 	beq	r2,zero,1466c <__subdf3+0x6d8>
   14028:	18c1ffd8 	cmpnei	r3,r3,2047
   1402c:	1800c326 	beq	r3,zero,1433c <__subdf3+0x3a8>
   14030:	1007883a 	mov	r3,r2
   14034:	18800e48 	cmpgei	r2,r3,57
   14038:	1000651e 	bne	r2,zero,141d0 <__subdf3+0x23c>
   1403c:	18800808 	cmpgei	r2,r3,32
   14040:	1001331e 	bne	r2,zero,14510 <__subdf3+0x57c>
   14044:	00800804 	movi	r2,32
   14048:	10c5c83a 	sub	r2,r2,r3
   1404c:	78a0983a 	sll	r16,r15,r2
   14050:	68c8d83a 	srl	r4,r13,r3
   14054:	689a983a 	sll	r13,r13,r2
   14058:	78c4d83a 	srl	r2,r15,r3
   1405c:	8120b03a 	or	r16,r16,r4
   14060:	681ac03a 	cmpne	r13,r13,zero
   14064:	8360b03a 	or	r16,r16,r13
   14068:	4893c83a 	sub	r9,r9,r2
   1406c:	7421c83a 	sub	r16,r14,r16
   14070:	7409803a 	cmpltu	r4,r14,r16
   14074:	4909c83a 	sub	r4,r9,r4
   14078:	2080202c 	andhi	r2,r4,128
   1407c:	10009326 	beq	r2,zero,142cc <__subdf3+0x338>
   14080:	04c02034 	movhi	r19,128
   14084:	9cffffc4 	addi	r19,r19,-1
   14088:	24e6703a 	and	r19,r4,r19
   1408c:	9800b926 	beq	r19,zero,14374 <__subdf3+0x3e0>
   14090:	9809883a 	mov	r4,r19
   14094:	00149d40 	call	149d4 <__clzsi2>
   14098:	10fffe04 	addi	r3,r2,-8
   1409c:	01000804 	movi	r4,32
   140a0:	20c9c83a 	sub	r4,r4,r3
   140a4:	8108d83a 	srl	r4,r16,r4
   140a8:	98e6983a 	sll	r19,r19,r3
   140ac:	80e0983a 	sll	r16,r16,r3
   140b0:	24c8b03a 	or	r4,r4,r19
   140b4:	1c80b816 	blt	r3,r18,14398 <__subdf3+0x404>
   140b8:	1c87c83a 	sub	r3,r3,r18
   140bc:	19400044 	addi	r5,r3,1
   140c0:	28800808 	cmpgei	r2,r5,32
   140c4:	1000751e 	bne	r2,zero,1429c <__subdf3+0x308>
   140c8:	00800804 	movi	r2,32
   140cc:	1145c83a 	sub	r2,r2,r5
   140d0:	8146d83a 	srl	r3,r16,r5
   140d4:	80a0983a 	sll	r16,r16,r2
   140d8:	2084983a 	sll	r2,r4,r2
   140dc:	2148d83a 	srl	r4,r4,r5
   140e0:	8020c03a 	cmpne	r16,r16,zero
   140e4:	10c4b03a 	or	r2,r2,r3
   140e8:	1420b03a 	or	r16,r2,r16
   140ec:	0025883a 	mov	r18,zero
   140f0:	808001cc 	andi	r2,r16,7
   140f4:	10000726 	beq	r2,zero,14114 <__subdf3+0x180>
   140f8:	808003cc 	andi	r2,r16,15
   140fc:	10800120 	cmpeqi	r2,r2,4
   14100:	1000041e 	bne	r2,zero,14114 <__subdf3+0x180>
   14104:	80800104 	addi	r2,r16,4
   14108:	1421803a 	cmpltu	r16,r2,r16
   1410c:	2409883a 	add	r4,r4,r16
   14110:	1021883a 	mov	r16,r2
   14114:	2080202c 	andhi	r2,r4,128
   14118:	10006e26 	beq	r2,zero,142d4 <__subdf3+0x340>
   1411c:	90c00044 	addi	r3,r18,1
   14120:	1881ffe0 	cmpeqi	r2,r3,2047
   14124:	18c1ffcc 	andi	r3,r3,2047
   14128:	1000801e 	bne	r2,zero,1432c <__subdf3+0x398>
   1412c:	00bfe034 	movhi	r2,65408
   14130:	10bfffc4 	addi	r2,r2,-1
   14134:	2088703a 	and	r4,r4,r2
   14138:	2004977a 	slli	r2,r4,29
   1413c:	2008927a 	slli	r4,r4,9
   14140:	8020d0fa 	srli	r16,r16,3
   14144:	2008d33a 	srli	r4,r4,12
   14148:	1404b03a 	or	r2,r2,r16
   1414c:	1806953a 	slli	r3,r3,20
   14150:	882297fa 	slli	r17,r17,31
   14154:	1906b03a 	or	r3,r3,r4
   14158:	1c46b03a 	or	r3,r3,r17
   1415c:	dfc00417 	ldw	ra,16(sp)
   14160:	dcc00317 	ldw	r19,12(sp)
   14164:	dc800217 	ldw	r18,8(sp)
   14168:	dc400117 	ldw	r17,4(sp)
   1416c:	dc000017 	ldw	r16,0(sp)
   14170:	dec00504 	addi	sp,sp,20
   14174:	f800283a 	ret
   14178:	18002c26 	beq	r3,zero,1422c <__subdf3+0x298>
   1417c:	4487c83a 	sub	r3,r8,r18
   14180:	5823883a 	mov	r17,r11
   14184:	9000bb1e 	bne	r18,zero,14474 <__subdf3+0x4e0>
   14188:	4b84b03a 	or	r2,r9,r14
   1418c:	10011726 	beq	r2,zero,145ec <__subdf3+0x658>
   14190:	18bfffc4 	addi	r2,r3,-1
   14194:	10016326 	beq	r2,zero,14724 <__subdf3+0x790>
   14198:	18c1ffd8 	cmpnei	r3,r3,2047
   1419c:	18012c26 	beq	r3,zero,14650 <__subdf3+0x6bc>
   141a0:	1007883a 	mov	r3,r2
   141a4:	0000b506 	br	1447c <__subdf3+0x4e8>
   141a8:	7b44b03a 	or	r2,r15,r13
   141ac:	103f9626 	beq	r2,zero,14008 <__subdf3+0x74>
   141b0:	3ac03fcc 	andi	r11,r7,255
   141b4:	29c07d26 	beq	r5,r7,143ac <__subdf3+0x418>
   141b8:	00ffef0e 	bge	zero,r3,14178 <__subdf3+0x1e4>
   141bc:	9081ffd8 	cmpnei	r2,r18,2047
   141c0:	10005e26 	beq	r2,zero,1433c <__subdf3+0x3a8>
   141c4:	18800e48 	cmpgei	r2,r3,57
   141c8:	7bc02034 	orhi	r15,r15,128
   141cc:	103f9b26 	beq	r2,zero,1403c <__subdf3+0xa8>
   141d0:	7b60b03a 	or	r16,r15,r13
   141d4:	8020c03a 	cmpne	r16,r16,zero
   141d8:	003fa406 	br	1406c <__subdf3+0xd8>
   141dc:	00c0730e 	bge	zero,r3,143ac <__subdf3+0x418>
   141e0:	40002626 	beq	r8,zero,1427c <__subdf3+0x2e8>
   141e4:	9081ffd8 	cmpnei	r2,r18,2047
   141e8:	10005426 	beq	r2,zero,1433c <__subdf3+0x3a8>
   141ec:	7bc02034 	orhi	r15,r15,128
   141f0:	18800e48 	cmpgei	r2,r3,57
   141f4:	1000431e 	bne	r2,zero,14304 <__subdf3+0x370>
   141f8:	18800808 	cmpgei	r2,r3,32
   141fc:	1000de26 	beq	r2,zero,14578 <__subdf3+0x5e4>
   14200:	1c3ff804 	addi	r16,r3,-32
   14204:	18800820 	cmpeqi	r2,r3,32
   14208:	7c0ad83a 	srl	r5,r15,r16
   1420c:	1000041e 	bne	r2,zero,14220 <__subdf3+0x28c>
   14210:	00801004 	movi	r2,64
   14214:	10c5c83a 	sub	r2,r2,r3
   14218:	7884983a 	sll	r2,r15,r2
   1421c:	689ab03a 	or	r13,r13,r2
   14220:	6820c03a 	cmpne	r16,r13,zero
   14224:	8160b03a 	or	r16,r16,r5
   14228:	00003806 	br	1430c <__subdf3+0x378>
   1422c:	90800044 	addi	r2,r18,1
   14230:	1081ff8c 	andi	r2,r2,2046
   14234:	1000a01e 	bne	r2,zero,144b8 <__subdf3+0x524>
   14238:	4b8ab03a 	or	r5,r9,r14
   1423c:	7b44b03a 	or	r2,r15,r13
   14240:	9000f11e 	bne	r18,zero,14608 <__subdf3+0x674>
   14244:	28012e26 	beq	r5,zero,14700 <__subdf3+0x76c>
   14248:	10010e26 	beq	r2,zero,14684 <__subdf3+0x6f0>
   1424c:	7361c83a 	sub	r16,r14,r13
   14250:	7405803a 	cmpltu	r2,r14,r16
   14254:	4bc9c83a 	sub	r4,r9,r15
   14258:	2089c83a 	sub	r4,r4,r2
   1425c:	2080202c 	andhi	r2,r4,128
   14260:	10016d26 	beq	r2,zero,14818 <__subdf3+0x884>
   14264:	6ba1c83a 	sub	r16,r13,r14
   14268:	7a49c83a 	sub	r4,r15,r9
   1426c:	6c1b803a 	cmpltu	r13,r13,r16
   14270:	2349c83a 	sub	r4,r4,r13
   14274:	5823883a 	mov	r17,r11
   14278:	003f9d06 	br	140f0 <__subdf3+0x15c>
   1427c:	7b44b03a 	or	r2,r15,r13
   14280:	10006226 	beq	r2,zero,1440c <__subdf3+0x478>
   14284:	18bfffc4 	addi	r2,r3,-1
   14288:	1000e926 	beq	r2,zero,14630 <__subdf3+0x69c>
   1428c:	18c1ffd8 	cmpnei	r3,r3,2047
   14290:	18012a26 	beq	r3,zero,1473c <__subdf3+0x7a8>
   14294:	1007883a 	mov	r3,r2
   14298:	003fd506 	br	141f0 <__subdf3+0x25c>
   1429c:	18fff844 	addi	r3,r3,-31
   142a0:	28800820 	cmpeqi	r2,r5,32
   142a4:	20c6d83a 	srl	r3,r4,r3
   142a8:	1000041e 	bne	r2,zero,142bc <__subdf3+0x328>
   142ac:	00801004 	movi	r2,64
   142b0:	114bc83a 	sub	r5,r2,r5
   142b4:	2148983a 	sll	r4,r4,r5
   142b8:	8120b03a 	or	r16,r16,r4
   142bc:	8020c03a 	cmpne	r16,r16,zero
   142c0:	80e0b03a 	or	r16,r16,r3
   142c4:	0009883a 	mov	r4,zero
   142c8:	0025883a 	mov	r18,zero
   142cc:	808001cc 	andi	r2,r16,7
   142d0:	103f891e 	bne	r2,zero,140f8 <__subdf3+0x164>
   142d4:	8020d0fa 	srli	r16,r16,3
   142d8:	2004977a 	slli	r2,r4,29
   142dc:	2012d0fa 	srli	r9,r4,3
   142e0:	9007883a 	mov	r3,r18
   142e4:	8084b03a 	or	r2,r16,r2
   142e8:	1901ffe0 	cmpeqi	r4,r3,2047
   142ec:	2000191e 	bne	r4,zero,14354 <__subdf3+0x3c0>
   142f0:	01000434 	movhi	r4,16
   142f4:	213fffc4 	addi	r4,r4,-1
   142f8:	4908703a 	and	r4,r9,r4
   142fc:	18c1ffcc 	andi	r3,r3,2047
   14300:	003f9206 	br	1414c <__subdf3+0x1b8>
   14304:	7b60b03a 	or	r16,r15,r13
   14308:	8020c03a 	cmpne	r16,r16,zero
   1430c:	83a1883a 	add	r16,r16,r14
   14310:	8389803a 	cmpltu	r4,r16,r14
   14314:	2249883a 	add	r4,r4,r9
   14318:	2080202c 	andhi	r2,r4,128
   1431c:	103feb26 	beq	r2,zero,142cc <__subdf3+0x338>
   14320:	94800044 	addi	r18,r18,1
   14324:	9081ffe0 	cmpeqi	r2,r18,2047
   14328:	10006f26 	beq	r2,zero,144e8 <__subdf3+0x554>
   1432c:	00c1ffc4 	movi	r3,2047
   14330:	0009883a 	mov	r4,zero
   14334:	0005883a 	mov	r2,zero
   14338:	003f8406 	br	1414c <__subdf3+0x1b8>
   1433c:	4806977a 	slli	r3,r9,29
   14340:	00880034 	movhi	r2,8192
   14344:	10bfffc4 	addi	r2,r2,-1
   14348:	4812d0fa 	srli	r9,r9,3
   1434c:	2088703a 	and	r4,r4,r2
   14350:	20c4b03a 	or	r2,r4,r3
   14354:	4886b03a 	or	r3,r9,r2
   14358:	18013726 	beq	r3,zero,14838 <__subdf3+0x8a4>
   1435c:	00c00434 	movhi	r3,16
   14360:	18ffffc4 	addi	r3,r3,-1
   14364:	49000234 	orhi	r4,r9,8
   14368:	20c8703a 	and	r4,r4,r3
   1436c:	00c1ffc4 	movi	r3,2047
   14370:	003f7606 	br	1414c <__subdf3+0x1b8>
   14374:	8009883a 	mov	r4,r16
   14378:	00149d40 	call	149d4 <__clzsi2>
   1437c:	10c00604 	addi	r3,r2,24
   14380:	19000808 	cmpgei	r4,r3,32
   14384:	203f4526 	beq	r4,zero,1409c <__subdf3+0x108>
   14388:	113ffe04 	addi	r4,r2,-8
   1438c:	8108983a 	sll	r4,r16,r4
   14390:	0021883a 	mov	r16,zero
   14394:	1cbf480e 	bge	r3,r18,140b8 <__subdf3+0x124>
   14398:	00bfe034 	movhi	r2,65408
   1439c:	10bfffc4 	addi	r2,r2,-1
   143a0:	90e5c83a 	sub	r18,r18,r3
   143a4:	2088703a 	and	r4,r4,r2
   143a8:	003f5106 	br	140f0 <__subdf3+0x15c>
   143ac:	18001e26 	beq	r3,zero,14428 <__subdf3+0x494>
   143b0:	4487c83a 	sub	r3,r8,r18
   143b4:	90006826 	beq	r18,zero,14558 <__subdf3+0x5c4>
   143b8:	5000a526 	beq	r10,zero,14650 <__subdf3+0x6bc>
   143bc:	4a402034 	orhi	r9,r9,128
   143c0:	18800e48 	cmpgei	r2,r3,57
   143c4:	1000b61e 	bne	r2,zero,146a0 <__subdf3+0x70c>
   143c8:	18800808 	cmpgei	r2,r3,32
   143cc:	1001021e 	bne	r2,zero,147d8 <__subdf3+0x844>
   143d0:	00800804 	movi	r2,32
   143d4:	10c5c83a 	sub	r2,r2,r3
   143d8:	48a0983a 	sll	r16,r9,r2
   143dc:	70c8d83a 	srl	r4,r14,r3
   143e0:	7084983a 	sll	r2,r14,r2
   143e4:	48d2d83a 	srl	r9,r9,r3
   143e8:	8120b03a 	or	r16,r16,r4
   143ec:	1004c03a 	cmpne	r2,r2,zero
   143f0:	80a0b03a 	or	r16,r16,r2
   143f4:	7a5f883a 	add	r15,r15,r9
   143f8:	8361883a 	add	r16,r16,r13
   143fc:	8349803a 	cmpltu	r4,r16,r13
   14400:	23c9883a 	add	r4,r4,r15
   14404:	4025883a 	mov	r18,r8
   14408:	003fc306 	br	14318 <__subdf3+0x384>
   1440c:	480a977a 	slli	r5,r9,29
   14410:	00880034 	movhi	r2,8192
   14414:	10bfffc4 	addi	r2,r2,-1
   14418:	2088703a 	and	r4,r4,r2
   1441c:	4812d0fa 	srli	r9,r9,3
   14420:	2144b03a 	or	r2,r4,r5
   14424:	003fb006 	br	142e8 <__subdf3+0x354>
   14428:	90800044 	addi	r2,r18,1
   1442c:	1141ff8c 	andi	r5,r2,2046
   14430:	28005c1e 	bne	r5,zero,145a4 <__subdf3+0x610>
   14434:	4b84b03a 	or	r2,r9,r14
   14438:	9000a71e 	bne	r18,zero,146d8 <__subdf3+0x744>
   1443c:	1000df26 	beq	r2,zero,147bc <__subdf3+0x828>
   14440:	7b44b03a 	or	r2,r15,r13
   14444:	10008f26 	beq	r2,zero,14684 <__subdf3+0x6f0>
   14448:	7361883a 	add	r16,r14,r13
   1444c:	4bc9883a 	add	r4,r9,r15
   14450:	839d803a 	cmpltu	r14,r16,r14
   14454:	2389883a 	add	r4,r4,r14
   14458:	2080202c 	andhi	r2,r4,128
   1445c:	103f9b26 	beq	r2,zero,142cc <__subdf3+0x338>
   14460:	00bfe034 	movhi	r2,65408
   14464:	10bfffc4 	addi	r2,r2,-1
   14468:	2088703a 	and	r4,r4,r2
   1446c:	04800044 	movi	r18,1
   14470:	003f9606 	br	142cc <__subdf3+0x338>
   14474:	50007626 	beq	r10,zero,14650 <__subdf3+0x6bc>
   14478:	4a402034 	orhi	r9,r9,128
   1447c:	18800e48 	cmpgei	r2,r3,57
   14480:	10002e1e 	bne	r2,zero,1453c <__subdf3+0x5a8>
   14484:	18800808 	cmpgei	r2,r3,32
   14488:	1000881e 	bne	r2,zero,146ac <__subdf3+0x718>
   1448c:	00800804 	movi	r2,32
   14490:	10c5c83a 	sub	r2,r2,r3
   14494:	48a0983a 	sll	r16,r9,r2
   14498:	70c8d83a 	srl	r4,r14,r3
   1449c:	709c983a 	sll	r14,r14,r2
   144a0:	48d2d83a 	srl	r9,r9,r3
   144a4:	8120b03a 	or	r16,r16,r4
   144a8:	701cc03a 	cmpne	r14,r14,zero
   144ac:	83a0b03a 	or	r16,r16,r14
   144b0:	7a5fc83a 	sub	r15,r15,r9
   144b4:	00002306 	br	14544 <__subdf3+0x5b0>
   144b8:	7361c83a 	sub	r16,r14,r13
   144bc:	4be7c83a 	sub	r19,r9,r15
   144c0:	7409803a 	cmpltu	r4,r14,r16
   144c4:	9927c83a 	sub	r19,r19,r4
   144c8:	9880202c 	andhi	r2,r19,128
   144cc:	1000411e 	bne	r2,zero,145d4 <__subdf3+0x640>
   144d0:	84c4b03a 	or	r2,r16,r19
   144d4:	103eed1e 	bne	r2,zero,1408c <__subdf3+0xf8>
   144d8:	0013883a 	mov	r9,zero
   144dc:	0023883a 	mov	r17,zero
   144e0:	003f8306 	br	142f0 <__subdf3+0x35c>
   144e4:	04800084 	movi	r18,2
   144e8:	00bfe034 	movhi	r2,65408
   144ec:	10bfffc4 	addi	r2,r2,-1
   144f0:	8006d07a 	srli	r3,r16,1
   144f4:	2088703a 	and	r4,r4,r2
   144f8:	200497fa 	slli	r2,r4,31
   144fc:	8400004c 	andi	r16,r16,1
   14500:	1c20b03a 	or	r16,r3,r16
   14504:	2008d07a 	srli	r4,r4,1
   14508:	1420b03a 	or	r16,r2,r16
   1450c:	003ef806 	br	140f0 <__subdf3+0x15c>
   14510:	1c3ff804 	addi	r16,r3,-32
   14514:	18800820 	cmpeqi	r2,r3,32
   14518:	7c0ad83a 	srl	r5,r15,r16
   1451c:	1000041e 	bne	r2,zero,14530 <__subdf3+0x59c>
   14520:	00801004 	movi	r2,64
   14524:	10c5c83a 	sub	r2,r2,r3
   14528:	7884983a 	sll	r2,r15,r2
   1452c:	689ab03a 	or	r13,r13,r2
   14530:	6820c03a 	cmpne	r16,r13,zero
   14534:	8160b03a 	or	r16,r16,r5
   14538:	003ecc06 	br	1406c <__subdf3+0xd8>
   1453c:	4b92b03a 	or	r9,r9,r14
   14540:	4820c03a 	cmpne	r16,r9,zero
   14544:	6c21c83a 	sub	r16,r13,r16
   14548:	6c09803a 	cmpltu	r4,r13,r16
   1454c:	7909c83a 	sub	r4,r15,r4
   14550:	4025883a 	mov	r18,r8
   14554:	003ec806 	br	14078 <__subdf3+0xe4>
   14558:	4b84b03a 	or	r2,r9,r14
   1455c:	10007e26 	beq	r2,zero,14758 <__subdf3+0x7c4>
   14560:	18bfffc4 	addi	r2,r3,-1
   14564:	1000a726 	beq	r2,zero,14804 <__subdf3+0x870>
   14568:	18c1ffd8 	cmpnei	r3,r3,2047
   1456c:	18003826 	beq	r3,zero,14650 <__subdf3+0x6bc>
   14570:	1007883a 	mov	r3,r2
   14574:	003f9206 	br	143c0 <__subdf3+0x42c>
   14578:	00800804 	movi	r2,32
   1457c:	10c5c83a 	sub	r2,r2,r3
   14580:	78a0983a 	sll	r16,r15,r2
   14584:	68c8d83a 	srl	r4,r13,r3
   14588:	689a983a 	sll	r13,r13,r2
   1458c:	78c4d83a 	srl	r2,r15,r3
   14590:	8120b03a 	or	r16,r16,r4
   14594:	681ac03a 	cmpne	r13,r13,zero
   14598:	8360b03a 	or	r16,r16,r13
   1459c:	4893883a 	add	r9,r9,r2
   145a0:	003f5a06 	br	1430c <__subdf3+0x378>
   145a4:	10c1ffe0 	cmpeqi	r3,r2,2047
   145a8:	183f601e 	bne	r3,zero,1432c <__subdf3+0x398>
   145ac:	735b883a 	add	r13,r14,r13
   145b0:	6b9d803a 	cmpltu	r14,r13,r14
   145b4:	4bc9883a 	add	r4,r9,r15
   145b8:	2389883a 	add	r4,r4,r14
   145bc:	202097fa 	slli	r16,r4,31
   145c0:	681ad07a 	srli	r13,r13,1
   145c4:	2008d07a 	srli	r4,r4,1
   145c8:	1025883a 	mov	r18,r2
   145cc:	8360b03a 	or	r16,r16,r13
   145d0:	003f3e06 	br	142cc <__subdf3+0x338>
   145d4:	6ba1c83a 	sub	r16,r13,r14
   145d8:	7a49c83a 	sub	r4,r15,r9
   145dc:	6c1b803a 	cmpltu	r13,r13,r16
   145e0:	2367c83a 	sub	r19,r4,r13
   145e4:	5823883a 	mov	r17,r11
   145e8:	003ea806 	br	1408c <__subdf3+0xf8>
   145ec:	7808977a 	slli	r4,r15,29
   145f0:	00880034 	movhi	r2,8192
   145f4:	10bfffc4 	addi	r2,r2,-1
   145f8:	308c703a 	and	r6,r6,r2
   145fc:	7812d0fa 	srli	r9,r15,3
   14600:	3104b03a 	or	r2,r6,r4
   14604:	003f3806 	br	142e8 <__subdf3+0x354>
   14608:	28005a1e 	bne	r5,zero,14774 <__subdf3+0x7e0>
   1460c:	10008526 	beq	r2,zero,14824 <__subdf3+0x890>
   14610:	7806977a 	slli	r3,r15,29
   14614:	00880034 	movhi	r2,8192
   14618:	10bfffc4 	addi	r2,r2,-1
   1461c:	3084703a 	and	r2,r6,r2
   14620:	7812d0fa 	srli	r9,r15,3
   14624:	10c4b03a 	or	r2,r2,r3
   14628:	5823883a 	mov	r17,r11
   1462c:	003f4906 	br	14354 <__subdf3+0x3c0>
   14630:	7361883a 	add	r16,r14,r13
   14634:	4bc9883a 	add	r4,r9,r15
   14638:	839d803a 	cmpltu	r14,r16,r14
   1463c:	2389883a 	add	r4,r4,r14
   14640:	2080202c 	andhi	r2,r4,128
   14644:	103fa71e 	bne	r2,zero,144e4 <__subdf3+0x550>
   14648:	04800044 	movi	r18,1
   1464c:	003f1f06 	br	142cc <__subdf3+0x338>
   14650:	7806977a 	slli	r3,r15,29
   14654:	00880034 	movhi	r2,8192
   14658:	10bfffc4 	addi	r2,r2,-1
   1465c:	3084703a 	and	r2,r6,r2
   14660:	7812d0fa 	srli	r9,r15,3
   14664:	10c4b03a 	or	r2,r2,r3
   14668:	003f3a06 	br	14354 <__subdf3+0x3c0>
   1466c:	7361c83a 	sub	r16,r14,r13
   14670:	4bc9c83a 	sub	r4,r9,r15
   14674:	741d803a 	cmpltu	r14,r14,r16
   14678:	2389c83a 	sub	r4,r4,r14
   1467c:	04800044 	movi	r18,1
   14680:	003e7d06 	br	14078 <__subdf3+0xe4>
   14684:	480a977a 	slli	r5,r9,29
   14688:	00880034 	movhi	r2,8192
   1468c:	10bfffc4 	addi	r2,r2,-1
   14690:	2084703a 	and	r2,r4,r2
   14694:	4812d0fa 	srli	r9,r9,3
   14698:	1144b03a 	or	r2,r2,r5
   1469c:	003f1406 	br	142f0 <__subdf3+0x35c>
   146a0:	4b92b03a 	or	r9,r9,r14
   146a4:	4820c03a 	cmpne	r16,r9,zero
   146a8:	003f5306 	br	143f8 <__subdf3+0x464>
   146ac:	1c3ff804 	addi	r16,r3,-32
   146b0:	19000820 	cmpeqi	r4,r3,32
   146b4:	4c04d83a 	srl	r2,r9,r16
   146b8:	2000041e 	bne	r4,zero,146cc <__subdf3+0x738>
   146bc:	01001004 	movi	r4,64
   146c0:	20c7c83a 	sub	r3,r4,r3
   146c4:	48d2983a 	sll	r9,r9,r3
   146c8:	725cb03a 	or	r14,r14,r9
   146cc:	7020c03a 	cmpne	r16,r14,zero
   146d0:	80a0b03a 	or	r16,r16,r2
   146d4:	003f9b06 	br	14544 <__subdf3+0x5b0>
   146d8:	103fdd26 	beq	r2,zero,14650 <__subdf3+0x6bc>
   146dc:	7b5ab03a 	or	r13,r15,r13
   146e0:	480a977a 	slli	r5,r9,29
   146e4:	4812d0fa 	srli	r9,r9,3
   146e8:	6800251e 	bne	r13,zero,14780 <__subdf3+0x7ec>
   146ec:	00880034 	movhi	r2,8192
   146f0:	10bfffc4 	addi	r2,r2,-1
   146f4:	2084703a 	and	r2,r4,r2
   146f8:	1144b03a 	or	r2,r2,r5
   146fc:	003f1506 	br	14354 <__subdf3+0x3c0>
   14700:	103f7526 	beq	r2,zero,144d8 <__subdf3+0x544>
   14704:	7808977a 	slli	r4,r15,29
   14708:	00880034 	movhi	r2,8192
   1470c:	10bfffc4 	addi	r2,r2,-1
   14710:	3084703a 	and	r2,r6,r2
   14714:	7812d0fa 	srli	r9,r15,3
   14718:	1104b03a 	or	r2,r2,r4
   1471c:	5823883a 	mov	r17,r11
   14720:	003ef306 	br	142f0 <__subdf3+0x35c>
   14724:	6ba1c83a 	sub	r16,r13,r14
   14728:	7a49c83a 	sub	r4,r15,r9
   1472c:	6c1b803a 	cmpltu	r13,r13,r16
   14730:	2349c83a 	sub	r4,r4,r13
   14734:	04800044 	movi	r18,1
   14738:	003e4f06 	br	14078 <__subdf3+0xe4>
   1473c:	4806977a 	slli	r3,r9,29
   14740:	00880034 	movhi	r2,8192
   14744:	10bfffc4 	addi	r2,r2,-1
   14748:	2084703a 	and	r2,r4,r2
   1474c:	4812d0fa 	srli	r9,r9,3
   14750:	10c4b03a 	or	r2,r2,r3
   14754:	003eff06 	br	14354 <__subdf3+0x3c0>
   14758:	7808977a 	slli	r4,r15,29
   1475c:	00880034 	movhi	r2,8192
   14760:	10bfffc4 	addi	r2,r2,-1
   14764:	3084703a 	and	r2,r6,r2
   14768:	7812d0fa 	srli	r9,r15,3
   1476c:	1104b03a 	or	r2,r2,r4
   14770:	003edd06 	br	142e8 <__subdf3+0x354>
   14774:	480a977a 	slli	r5,r9,29
   14778:	4812d0fa 	srli	r9,r9,3
   1477c:	103fdb26 	beq	r2,zero,146ec <__subdf3+0x758>
   14780:	00c80034 	movhi	r3,8192
   14784:	18ffffc4 	addi	r3,r3,-1
   14788:	20c4703a 	and	r2,r4,r3
   1478c:	4900022c 	andhi	r4,r9,8
   14790:	1144b03a 	or	r2,r2,r5
   14794:	203eef26 	beq	r4,zero,14354 <__subdf3+0x3c0>
   14798:	7808d0fa 	srli	r4,r15,3
   1479c:	2140022c 	andhi	r5,r4,8
   147a0:	283eec1e 	bne	r5,zero,14354 <__subdf3+0x3c0>
   147a4:	7804977a 	slli	r2,r15,29
   147a8:	30cc703a 	and	r6,r6,r3
   147ac:	5823883a 	mov	r17,r11
   147b0:	3084b03a 	or	r2,r6,r2
   147b4:	2013883a 	mov	r9,r4
   147b8:	003ee606 	br	14354 <__subdf3+0x3c0>
   147bc:	7808977a 	slli	r4,r15,29
   147c0:	00880034 	movhi	r2,8192
   147c4:	10bfffc4 	addi	r2,r2,-1
   147c8:	3084703a 	and	r2,r6,r2
   147cc:	7812d0fa 	srli	r9,r15,3
   147d0:	1104b03a 	or	r2,r2,r4
   147d4:	003ec606 	br	142f0 <__subdf3+0x35c>
   147d8:	18bff804 	addi	r2,r3,-32
   147dc:	19000820 	cmpeqi	r4,r3,32
   147e0:	4884d83a 	srl	r2,r9,r2
   147e4:	2000041e 	bne	r4,zero,147f8 <__subdf3+0x864>
   147e8:	01001004 	movi	r4,64
   147ec:	20c7c83a 	sub	r3,r4,r3
   147f0:	48d2983a 	sll	r9,r9,r3
   147f4:	725cb03a 	or	r14,r14,r9
   147f8:	7020c03a 	cmpne	r16,r14,zero
   147fc:	80a0b03a 	or	r16,r16,r2
   14800:	003efd06 	br	143f8 <__subdf3+0x464>
   14804:	7361883a 	add	r16,r14,r13
   14808:	4bc9883a 	add	r4,r9,r15
   1480c:	835b803a 	cmpltu	r13,r16,r13
   14810:	2349883a 	add	r4,r4,r13
   14814:	003f8a06 	br	14640 <__subdf3+0x6ac>
   14818:	8104b03a 	or	r2,r16,r4
   1481c:	103f2e26 	beq	r2,zero,144d8 <__subdf3+0x544>
   14820:	003eaa06 	br	142cc <__subdf3+0x338>
   14824:	02400434 	movhi	r9,16
   14828:	0023883a 	mov	r17,zero
   1482c:	00bfffc4 	movi	r2,-1
   14830:	4a7fffc4 	addi	r9,r9,-1
   14834:	003ec906 	br	1435c <__subdf3+0x3c8>
   14838:	0005883a 	mov	r2,zero
   1483c:	00c1ffc4 	movi	r3,2047
   14840:	0009883a 	mov	r4,zero
   14844:	003e4106 	br	1414c <__subdf3+0x1b8>

00014848 <__unorddf2>:
   14848:	2806d53a 	srli	r3,r5,20
   1484c:	3810d53a 	srli	r8,r7,20
   14850:	02400434 	movhi	r9,16
   14854:	18c1ffcc 	andi	r3,r3,2047
   14858:	4a7fffc4 	addi	r9,r9,-1
   1485c:	18c1ffd8 	cmpnei	r3,r3,2047
   14860:	2a4a703a 	and	r5,r5,r9
   14864:	3a4e703a 	and	r7,r7,r9
   14868:	4201ffcc 	andi	r8,r8,2047
   1486c:	18000426 	beq	r3,zero,14880 <__unorddf2+0x38>
   14870:	4201ffd8 	cmpnei	r8,r8,2047
   14874:	40000626 	beq	r8,zero,14890 <__unorddf2+0x48>
   14878:	0005883a 	mov	r2,zero
   1487c:	f800283a 	ret
   14880:	290ab03a 	or	r5,r5,r4
   14884:	283ffa26 	beq	r5,zero,14870 <__unorddf2+0x28>
   14888:	00800044 	movi	r2,1
   1488c:	f800283a 	ret
   14890:	398eb03a 	or	r7,r7,r6
   14894:	3804c03a 	cmpne	r2,r7,zero
   14898:	f800283a 	ret

0001489c <__fixdfsi>:
   1489c:	2806d53a 	srli	r3,r5,20
   148a0:	01800434 	movhi	r6,16
   148a4:	31bfffc4 	addi	r6,r6,-1
   148a8:	18c1ffcc 	andi	r3,r3,2047
   148ac:	19c0ffd0 	cmplti	r7,r3,1023
   148b0:	2810d7fa 	srli	r8,r5,31
   148b4:	298a703a 	and	r5,r5,r6
   148b8:	3800061e 	bne	r7,zero,148d4 <__fixdfsi+0x38>
   148bc:	18810790 	cmplti	r2,r3,1054
   148c0:	1000061e 	bne	r2,zero,148dc <__fixdfsi+0x40>
   148c4:	00a00034 	movhi	r2,32768
   148c8:	10bfffc4 	addi	r2,r2,-1
   148cc:	4085883a 	add	r2,r8,r2
   148d0:	f800283a 	ret
   148d4:	0005883a 	mov	r2,zero
   148d8:	f800283a 	ret
   148dc:	01810cc4 	movi	r6,1075
   148e0:	30cdc83a 	sub	r6,r6,r3
   148e4:	30800808 	cmpgei	r2,r6,32
   148e8:	29400434 	orhi	r5,r5,16
   148ec:	1000071e 	bne	r2,zero,1490c <__fixdfsi+0x70>
   148f0:	18befb44 	addi	r2,r3,-1043
   148f4:	2884983a 	sll	r2,r5,r2
   148f8:	2188d83a 	srl	r4,r4,r6
   148fc:	1104b03a 	or	r2,r2,r4
   14900:	403ff526 	beq	r8,zero,148d8 <__fixdfsi+0x3c>
   14904:	0085c83a 	sub	r2,zero,r2
   14908:	f800283a 	ret
   1490c:	008104c4 	movi	r2,1043
   14910:	10c5c83a 	sub	r2,r2,r3
   14914:	2884d83a 	srl	r2,r5,r2
   14918:	003ff906 	br	14900 <__fixdfsi+0x64>

0001491c <__floatsidf>:
   1491c:	defffd04 	addi	sp,sp,-12
   14920:	dfc00215 	stw	ra,8(sp)
   14924:	dc400115 	stw	r17,4(sp)
   14928:	dc000015 	stw	r16,0(sp)
   1492c:	20001326 	beq	r4,zero,1497c <__floatsidf+0x60>
   14930:	2022d7fa 	srli	r17,r4,31
   14934:	2021883a 	mov	r16,r4
   14938:	20002416 	blt	r4,zero,149cc <__floatsidf+0xb0>
   1493c:	8009883a 	mov	r4,r16
   14940:	00149d40 	call	149d4 <__clzsi2>
   14944:	01010784 	movi	r4,1054
   14948:	2089c83a 	sub	r4,r4,r2
   1494c:	114002c8 	cmpgei	r5,r2,11
   14950:	20c1ffcc 	andi	r3,r4,2047
   14954:	2800161e 	bne	r5,zero,149b0 <__floatsidf+0x94>
   14958:	010002c4 	movi	r4,11
   1495c:	2089c83a 	sub	r4,r4,r2
   14960:	810ad83a 	srl	r5,r16,r4
   14964:	01000434 	movhi	r4,16
   14968:	10800544 	addi	r2,r2,21
   1496c:	213fffc4 	addi	r4,r4,-1
   14970:	8084983a 	sll	r2,r16,r2
   14974:	290a703a 	and	r5,r5,r4
   14978:	00000406 	br	1498c <__floatsidf+0x70>
   1497c:	0023883a 	mov	r17,zero
   14980:	0007883a 	mov	r3,zero
   14984:	000b883a 	mov	r5,zero
   14988:	0005883a 	mov	r2,zero
   1498c:	1808953a 	slli	r4,r3,20
   14990:	880697fa 	slli	r3,r17,31
   14994:	2148b03a 	or	r4,r4,r5
   14998:	20c6b03a 	or	r3,r4,r3
   1499c:	dfc00217 	ldw	ra,8(sp)
   149a0:	dc400117 	ldw	r17,4(sp)
   149a4:	dc000017 	ldw	r16,0(sp)
   149a8:	dec00304 	addi	sp,sp,12
   149ac:	f800283a 	ret
   149b0:	10bffd44 	addi	r2,r2,-11
   149b4:	808a983a 	sll	r5,r16,r2
   149b8:	00800434 	movhi	r2,16
   149bc:	10bfffc4 	addi	r2,r2,-1
   149c0:	288a703a 	and	r5,r5,r2
   149c4:	0005883a 	mov	r2,zero
   149c8:	003ff006 	br	1498c <__floatsidf+0x70>
   149cc:	0121c83a 	sub	r16,zero,r4
   149d0:	003fda06 	br	1493c <__floatsidf+0x20>

000149d4 <__clzsi2>:
   149d4:	00bfffd4 	movui	r2,65535
   149d8:	11000436 	bltu	r2,r4,149ec <__clzsi2+0x18>
   149dc:	20804030 	cmpltui	r2,r4,256
   149e0:	10000e26 	beq	r2,zero,14a1c <__clzsi2+0x48>
   149e4:	01400804 	movi	r5,32
   149e8:	00000406 	br	149fc <__clzsi2+0x28>
   149ec:	00804034 	movhi	r2,256
   149f0:	20800736 	bltu	r4,r2,14a10 <__clzsi2+0x3c>
   149f4:	2008d63a 	srli	r4,r4,24
   149f8:	01400204 	movi	r5,8
   149fc:	00c00074 	movhi	r3,1
   14a00:	20c7883a 	add	r3,r4,r3
   14a04:	18981103 	ldbu	r2,24644(r3)
   14a08:	2885c83a 	sub	r2,r5,r2
   14a0c:	f800283a 	ret
   14a10:	2008d43a 	srli	r4,r4,16
   14a14:	01400404 	movi	r5,16
   14a18:	003ff806 	br	149fc <__clzsi2+0x28>
   14a1c:	2008d23a 	srli	r4,r4,8
   14a20:	01400604 	movi	r5,24
   14a24:	003ff506 	br	149fc <__clzsi2+0x28>

00014a28 <__divsi3>:
   14a28:	20001a16 	blt	r4,zero,14a94 <__divsi3+0x6c>
   14a2c:	000f883a 	mov	r7,zero
   14a30:	2800020e 	bge	r5,zero,14a3c <__divsi3+0x14>
   14a34:	014bc83a 	sub	r5,zero,r5
   14a38:	39c0005c 	xori	r7,r7,1
   14a3c:	200d883a 	mov	r6,r4
   14a40:	00c00044 	movi	r3,1
   14a44:	2900092e 	bgeu	r5,r4,14a6c <__divsi3+0x44>
   14a48:	00800804 	movi	r2,32
   14a4c:	00c00044 	movi	r3,1
   14a50:	00000106 	br	14a58 <__divsi3+0x30>
   14a54:	10001226 	beq	r2,zero,14aa0 <__divsi3+0x78>
   14a58:	294b883a 	add	r5,r5,r5
   14a5c:	10bfffc4 	addi	r2,r2,-1
   14a60:	18c7883a 	add	r3,r3,r3
   14a64:	293ffb36 	bltu	r5,r4,14a54 <__divsi3+0x2c>
   14a68:	18000d26 	beq	r3,zero,14aa0 <__divsi3+0x78>
   14a6c:	0005883a 	mov	r2,zero
   14a70:	31400236 	bltu	r6,r5,14a7c <__divsi3+0x54>
   14a74:	314dc83a 	sub	r6,r6,r5
   14a78:	10c4b03a 	or	r2,r2,r3
   14a7c:	1806d07a 	srli	r3,r3,1
   14a80:	280ad07a 	srli	r5,r5,1
   14a84:	183ffa1e 	bne	r3,zero,14a70 <__divsi3+0x48>
   14a88:	38000126 	beq	r7,zero,14a90 <__divsi3+0x68>
   14a8c:	0085c83a 	sub	r2,zero,r2
   14a90:	f800283a 	ret
   14a94:	0109c83a 	sub	r4,zero,r4
   14a98:	01c00044 	movi	r7,1
   14a9c:	003fe406 	br	14a30 <__divsi3+0x8>
   14aa0:	0005883a 	mov	r2,zero
   14aa4:	003ff806 	br	14a88 <__divsi3+0x60>

00014aa8 <__modsi3>:
   14aa8:	20001916 	blt	r4,zero,14b10 <__modsi3+0x68>
   14aac:	000f883a 	mov	r7,zero
   14ab0:	2005883a 	mov	r2,r4
   14ab4:	2800010e 	bge	r5,zero,14abc <__modsi3+0x14>
   14ab8:	014bc83a 	sub	r5,zero,r5
   14abc:	00c00044 	movi	r3,1
   14ac0:	2900092e 	bgeu	r5,r4,14ae8 <__modsi3+0x40>
   14ac4:	01800804 	movi	r6,32
   14ac8:	00c00044 	movi	r3,1
   14acc:	00000106 	br	14ad4 <__modsi3+0x2c>
   14ad0:	30000d26 	beq	r6,zero,14b08 <__modsi3+0x60>
   14ad4:	294b883a 	add	r5,r5,r5
   14ad8:	31bfffc4 	addi	r6,r6,-1
   14adc:	18c7883a 	add	r3,r3,r3
   14ae0:	293ffb36 	bltu	r5,r4,14ad0 <__modsi3+0x28>
   14ae4:	18000826 	beq	r3,zero,14b08 <__modsi3+0x60>
   14ae8:	1806d07a 	srli	r3,r3,1
   14aec:	11400136 	bltu	r2,r5,14af4 <__modsi3+0x4c>
   14af0:	1145c83a 	sub	r2,r2,r5
   14af4:	280ad07a 	srli	r5,r5,1
   14af8:	183ffb1e 	bne	r3,zero,14ae8 <__modsi3+0x40>
   14afc:	38000126 	beq	r7,zero,14b04 <__modsi3+0x5c>
   14b00:	0085c83a 	sub	r2,zero,r2
   14b04:	f800283a 	ret
   14b08:	2005883a 	mov	r2,r4
   14b0c:	003ffb06 	br	14afc <__modsi3+0x54>
   14b10:	0109c83a 	sub	r4,zero,r4
   14b14:	01c00044 	movi	r7,1
   14b18:	003fe506 	br	14ab0 <__modsi3+0x8>

00014b1c <__udivsi3>:
   14b1c:	200d883a 	mov	r6,r4
   14b20:	2900152e 	bgeu	r5,r4,14b78 <__udivsi3+0x5c>
   14b24:	28001416 	blt	r5,zero,14b78 <__udivsi3+0x5c>
   14b28:	00800804 	movi	r2,32
   14b2c:	00c00044 	movi	r3,1
   14b30:	00000206 	br	14b3c <__udivsi3+0x20>
   14b34:	10000e26 	beq	r2,zero,14b70 <__udivsi3+0x54>
   14b38:	28000516 	blt	r5,zero,14b50 <__udivsi3+0x34>
   14b3c:	294b883a 	add	r5,r5,r5
   14b40:	10bfffc4 	addi	r2,r2,-1
   14b44:	18c7883a 	add	r3,r3,r3
   14b48:	293ffa36 	bltu	r5,r4,14b34 <__udivsi3+0x18>
   14b4c:	18000826 	beq	r3,zero,14b70 <__udivsi3+0x54>
   14b50:	0005883a 	mov	r2,zero
   14b54:	31400236 	bltu	r6,r5,14b60 <__udivsi3+0x44>
   14b58:	314dc83a 	sub	r6,r6,r5
   14b5c:	10c4b03a 	or	r2,r2,r3
   14b60:	1806d07a 	srli	r3,r3,1
   14b64:	280ad07a 	srli	r5,r5,1
   14b68:	183ffa1e 	bne	r3,zero,14b54 <__udivsi3+0x38>
   14b6c:	f800283a 	ret
   14b70:	0005883a 	mov	r2,zero
   14b74:	f800283a 	ret
   14b78:	00c00044 	movi	r3,1
   14b7c:	003ff406 	br	14b50 <__udivsi3+0x34>

00014b80 <__umodsi3>:
   14b80:	2005883a 	mov	r2,r4
   14b84:	2900132e 	bgeu	r5,r4,14bd4 <__umodsi3+0x54>
   14b88:	28001216 	blt	r5,zero,14bd4 <__umodsi3+0x54>
   14b8c:	01800804 	movi	r6,32
   14b90:	00c00044 	movi	r3,1
   14b94:	00000206 	br	14ba0 <__umodsi3+0x20>
   14b98:	30000c26 	beq	r6,zero,14bcc <__umodsi3+0x4c>
   14b9c:	28000516 	blt	r5,zero,14bb4 <__umodsi3+0x34>
   14ba0:	294b883a 	add	r5,r5,r5
   14ba4:	31bfffc4 	addi	r6,r6,-1
   14ba8:	18c7883a 	add	r3,r3,r3
   14bac:	293ffa36 	bltu	r5,r4,14b98 <__umodsi3+0x18>
   14bb0:	18000626 	beq	r3,zero,14bcc <__umodsi3+0x4c>
   14bb4:	1806d07a 	srli	r3,r3,1
   14bb8:	11400136 	bltu	r2,r5,14bc0 <__umodsi3+0x40>
   14bbc:	1145c83a 	sub	r2,r2,r5
   14bc0:	280ad07a 	srli	r5,r5,1
   14bc4:	183ffb1e 	bne	r3,zero,14bb4 <__umodsi3+0x34>
   14bc8:	f800283a 	ret
   14bcc:	2005883a 	mov	r2,r4
   14bd0:	f800283a 	ret
   14bd4:	00c00044 	movi	r3,1
   14bd8:	003ff606 	br	14bb4 <__umodsi3+0x34>

00014bdc <__mulsi3>:
   14bdc:	0005883a 	mov	r2,zero
   14be0:	20000726 	beq	r4,zero,14c00 <__mulsi3+0x24>
   14be4:	20c0004c 	andi	r3,r4,1
   14be8:	2008d07a 	srli	r4,r4,1
   14bec:	18000126 	beq	r3,zero,14bf4 <__mulsi3+0x18>
   14bf0:	1145883a 	add	r2,r2,r5
   14bf4:	294b883a 	add	r5,r5,r5
   14bf8:	203ffa1e 	bne	r4,zero,14be4 <__mulsi3+0x8>
   14bfc:	f800283a 	ret
   14c00:	f800283a 	ret

00014c04 <__errno>:
   14c04:	00800074 	movhi	r2,1
   14c08:	1098b217 	ldw	r2,25288(r2)
   14c0c:	f800283a 	ret

00014c10 <_printf_r>:
   14c10:	defffd04 	addi	sp,sp,-12
   14c14:	dfc00015 	stw	ra,0(sp)
   14c18:	d9800115 	stw	r6,4(sp)
   14c1c:	d9c00215 	stw	r7,8(sp)
   14c20:	21800217 	ldw	r6,8(r4)
   14c24:	00c00074 	movhi	r3,1
   14c28:	18d4e104 	addi	r3,r3,21380
   14c2c:	30c00115 	stw	r3,4(r6)
   14c30:	280d883a 	mov	r6,r5
   14c34:	21400217 	ldw	r5,8(r4)
   14c38:	d9c00104 	addi	r7,sp,4
   14c3c:	0014e600 	call	14e60 <___vfprintf_internal_r>
   14c40:	dfc00017 	ldw	ra,0(sp)
   14c44:	dec00304 	addi	sp,sp,12
   14c48:	f800283a 	ret

00014c4c <printf>:
   14c4c:	defffc04 	addi	sp,sp,-16
   14c50:	dfc00015 	stw	ra,0(sp)
   14c54:	d9400115 	stw	r5,4(sp)
   14c58:	d9800215 	stw	r6,8(sp)
   14c5c:	d9c00315 	stw	r7,12(sp)
   14c60:	00800074 	movhi	r2,1
   14c64:	10d8b217 	ldw	r3,25288(r2)
   14c68:	00800074 	movhi	r2,1
   14c6c:	1094e104 	addi	r2,r2,21380
   14c70:	19400217 	ldw	r5,8(r3)
   14c74:	d9800104 	addi	r6,sp,4
   14c78:	28800115 	stw	r2,4(r5)
   14c7c:	200b883a 	mov	r5,r4
   14c80:	19000217 	ldw	r4,8(r3)
   14c84:	001536c0 	call	1536c <__vfprintf_internal>
   14c88:	dfc00017 	ldw	ra,0(sp)
   14c8c:	dec00404 	addi	sp,sp,16
   14c90:	f800283a 	ret

00014c94 <_putchar_r>:
   14c94:	21800217 	ldw	r6,8(r4)
   14c98:	00156fc1 	jmpi	156fc <_putc_r>

00014c9c <putchar>:
   14c9c:	00800074 	movhi	r2,1
   14ca0:	1098b217 	ldw	r2,25288(r2)
   14ca4:	200b883a 	mov	r5,r4
   14ca8:	11800217 	ldw	r6,8(r2)
   14cac:	1009883a 	mov	r4,r2
   14cb0:	00156fc1 	jmpi	156fc <_putc_r>

00014cb4 <strtok>:
   14cb4:	defffc04 	addi	sp,sp,-16
   14cb8:	00800074 	movhi	r2,1
   14cbc:	dc800215 	stw	r18,8(sp)
   14cc0:	1498b217 	ldw	r18,25288(r2)
   14cc4:	dc400115 	stw	r17,4(sp)
   14cc8:	dc000015 	stw	r16,0(sp)
   14ccc:	90803717 	ldw	r2,220(r18)
   14cd0:	dfc00315 	stw	ra,12(sp)
   14cd4:	2021883a 	mov	r16,r4
   14cd8:	2823883a 	mov	r17,r5
   14cdc:	1000161e 	bne	r2,zero,14d38 <strtok+0x84>
   14ce0:	01001404 	movi	r4,80
   14ce4:	001542c0 	call	1542c <malloc>
   14ce8:	90803715 	stw	r2,220(r18)
   14cec:	10000015 	stw	zero,0(r2)
   14cf0:	10000115 	stw	zero,4(r2)
   14cf4:	10000215 	stw	zero,8(r2)
   14cf8:	10000315 	stw	zero,12(r2)
   14cfc:	10000415 	stw	zero,16(r2)
   14d00:	10000515 	stw	zero,20(r2)
   14d04:	10000615 	stw	zero,24(r2)
   14d08:	10000a15 	stw	zero,40(r2)
   14d0c:	10000b15 	stw	zero,44(r2)
   14d10:	10000c15 	stw	zero,48(r2)
   14d14:	10000d15 	stw	zero,52(r2)
   14d18:	10000e15 	stw	zero,56(r2)
   14d1c:	10000f15 	stw	zero,60(r2)
   14d20:	10001015 	stw	zero,64(r2)
   14d24:	10001115 	stw	zero,68(r2)
   14d28:	10001215 	stw	zero,72(r2)
   14d2c:	10001315 	stw	zero,76(r2)
   14d30:	10000705 	stb	zero,28(r2)
   14d34:	10000915 	stw	zero,36(r2)
   14d38:	91803717 	ldw	r6,220(r18)
   14d3c:	01c00044 	movi	r7,1
   14d40:	880b883a 	mov	r5,r17
   14d44:	8009883a 	mov	r4,r16
   14d48:	dfc00317 	ldw	ra,12(sp)
   14d4c:	dc800217 	ldw	r18,8(sp)
   14d50:	dc400117 	ldw	r17,4(sp)
   14d54:	dc000017 	ldw	r16,0(sp)
   14d58:	dec00404 	addi	sp,sp,16
   14d5c:	0014d601 	jmpi	14d60 <__strtok_r>

00014d60 <__strtok_r>:
   14d60:	2005883a 	mov	r2,r4
   14d64:	2000021e 	bne	r4,zero,14d70 <__strtok_r+0x10>
   14d68:	30800017 	ldw	r2,0(r6)
   14d6c:	10001e26 	beq	r2,zero,14de8 <__strtok_r+0x88>
   14d70:	1007883a 	mov	r3,r2
   14d74:	1805883a 	mov	r2,r3
   14d78:	1a000007 	ldb	r8,0(r3)
   14d7c:	18c00044 	addi	r3,r3,1
   14d80:	2809883a 	mov	r4,r5
   14d84:	22400007 	ldb	r9,0(r4)
   14d88:	21000044 	addi	r4,r4,1
   14d8c:	4800041e 	bne	r9,zero,14da0 <__strtok_r+0x40>
   14d90:	40000b1e 	bne	r8,zero,14dc0 <__strtok_r+0x60>
   14d94:	30000015 	stw	zero,0(r6)
   14d98:	0005883a 	mov	r2,zero
   14d9c:	f800283a 	ret
   14da0:	427ff81e 	bne	r8,r9,14d84 <__strtok_r+0x24>
   14da4:	383ff31e 	bne	r7,zero,14d74 <__strtok_r+0x14>
   14da8:	30c00015 	stw	r3,0(r6)
   14dac:	10000005 	stb	zero,0(r2)
   14db0:	f800283a 	ret
   14db4:	0007883a 	mov	r3,zero
   14db8:	00000906 	br	14de0 <__strtok_r+0x80>
   14dbc:	3800031e 	bne	r7,zero,14dcc <__strtok_r+0x6c>
   14dc0:	1a000007 	ldb	r8,0(r3)
   14dc4:	18c00044 	addi	r3,r3,1
   14dc8:	2809883a 	mov	r4,r5
   14dcc:	21c00007 	ldb	r7,0(r4)
   14dd0:	21000044 	addi	r4,r4,1
   14dd4:	41fff91e 	bne	r8,r7,14dbc <__strtok_r+0x5c>
   14dd8:	403ff626 	beq	r8,zero,14db4 <__strtok_r+0x54>
   14ddc:	183fffc5 	stb	zero,-1(r3)
   14de0:	30c00015 	stw	r3,0(r6)
   14de4:	f800283a 	ret
   14de8:	f800283a 	ret

00014dec <strtok_r>:
   14dec:	01c00044 	movi	r7,1
   14df0:	0014d601 	jmpi	14d60 <__strtok_r>

00014df4 <print_repeat>:
   14df4:	defffb04 	addi	sp,sp,-20
   14df8:	dc800315 	stw	r18,12(sp)
   14dfc:	dc400215 	stw	r17,8(sp)
   14e00:	dc000115 	stw	r16,4(sp)
   14e04:	dfc00415 	stw	ra,16(sp)
   14e08:	2025883a 	mov	r18,r4
   14e0c:	2823883a 	mov	r17,r5
   14e10:	d9800005 	stb	r6,0(sp)
   14e14:	3821883a 	mov	r16,r7
   14e18:	04000716 	blt	zero,r16,14e38 <print_repeat+0x44>
   14e1c:	0005883a 	mov	r2,zero
   14e20:	dfc00417 	ldw	ra,16(sp)
   14e24:	dc800317 	ldw	r18,12(sp)
   14e28:	dc400217 	ldw	r17,8(sp)
   14e2c:	dc000117 	ldw	r16,4(sp)
   14e30:	dec00504 	addi	sp,sp,20
   14e34:	f800283a 	ret
   14e38:	88800117 	ldw	r2,4(r17)
   14e3c:	01c00044 	movi	r7,1
   14e40:	d80d883a 	mov	r6,sp
   14e44:	880b883a 	mov	r5,r17
   14e48:	9009883a 	mov	r4,r18
   14e4c:	103ee83a 	callr	r2
   14e50:	843fffc4 	addi	r16,r16,-1
   14e54:	103ff026 	beq	r2,zero,14e18 <print_repeat+0x24>
   14e58:	00bfffc4 	movi	r2,-1
   14e5c:	003ff006 	br	14e20 <print_repeat+0x2c>

00014e60 <___vfprintf_internal_r>:
   14e60:	deffe604 	addi	sp,sp,-104
   14e64:	df001815 	stw	fp,96(sp)
   14e68:	ddc01715 	stw	r23,92(sp)
   14e6c:	dd801615 	stw	r22,88(sp)
   14e70:	dd001415 	stw	r20,80(sp)
   14e74:	dcc01315 	stw	r19,76(sp)
   14e78:	dc801215 	stw	r18,72(sp)
   14e7c:	dc401115 	stw	r17,68(sp)
   14e80:	dc001015 	stw	r16,64(sp)
   14e84:	dfc01915 	stw	ra,100(sp)
   14e88:	dd401515 	stw	r21,84(sp)
   14e8c:	2021883a 	mov	r16,r4
   14e90:	282f883a 	mov	r23,r5
   14e94:	d9800515 	stw	r6,20(sp)
   14e98:	3839883a 	mov	fp,r7
   14e9c:	002d883a 	mov	r22,zero
   14ea0:	d8000215 	stw	zero,8(sp)
   14ea4:	0027883a 	mov	r19,zero
   14ea8:	0029883a 	mov	r20,zero
   14eac:	0025883a 	mov	r18,zero
   14eb0:	0023883a 	mov	r17,zero
   14eb4:	d8000115 	stw	zero,4(sp)
   14eb8:	d8000015 	stw	zero,0(sp)
   14ebc:	0005883a 	mov	r2,zero
   14ec0:	00000206 	br	14ecc <___vfprintf_internal_r+0x6c>
   14ec4:	114000e0 	cmpeqi	r5,r2,3
   14ec8:	28003f1e 	bne	r5,zero,14fc8 <___vfprintf_internal_r+0x168>
   14ecc:	d8c00517 	ldw	r3,20(sp)
   14ed0:	19000003 	ldbu	r4,0(r3)
   14ed4:	18c00044 	addi	r3,r3,1
   14ed8:	d8c00515 	stw	r3,20(sp)
   14edc:	21803fcc 	andi	r6,r4,255
   14ee0:	3180201c 	xori	r6,r6,128
   14ee4:	31bfe004 	addi	r6,r6,-128
   14ee8:	30001426 	beq	r6,zero,14f3c <___vfprintf_internal_r+0xdc>
   14eec:	114000a0 	cmpeqi	r5,r2,2
   14ef0:	2800231e 	bne	r5,zero,14f80 <___vfprintf_internal_r+0x120>
   14ef4:	114000c8 	cmpgei	r5,r2,3
   14ef8:	283ff21e 	bne	r5,zero,14ec4 <___vfprintf_internal_r+0x64>
   14efc:	10000426 	beq	r2,zero,14f10 <___vfprintf_internal_r+0xb0>
   14f00:	10800060 	cmpeqi	r2,r2,1
   14f04:	10001a1e 	bne	r2,zero,14f70 <___vfprintf_internal_r+0x110>
   14f08:	00800084 	movi	r2,2
   14f0c:	003fef06 	br	14ecc <___vfprintf_internal_r+0x6c>
   14f10:	31800960 	cmpeqi	r6,r6,37
   14f14:	3000fe1e 	bne	r6,zero,15310 <___vfprintf_internal_r+0x4b0>
   14f18:	b8800117 	ldw	r2,4(r23)
   14f1c:	d9000805 	stb	r4,32(sp)
   14f20:	01c00044 	movi	r7,1
   14f24:	d9800804 	addi	r6,sp,32
   14f28:	b80b883a 	mov	r5,r23
   14f2c:	8009883a 	mov	r4,r16
   14f30:	103ee83a 	callr	r2
   14f34:	10001d26 	beq	r2,zero,14fac <___vfprintf_internal_r+0x14c>
   14f38:	05bfffc4 	movi	r22,-1
   14f3c:	b005883a 	mov	r2,r22
   14f40:	dfc01917 	ldw	ra,100(sp)
   14f44:	df001817 	ldw	fp,96(sp)
   14f48:	ddc01717 	ldw	r23,92(sp)
   14f4c:	dd801617 	ldw	r22,88(sp)
   14f50:	dd401517 	ldw	r21,84(sp)
   14f54:	dd001417 	ldw	r20,80(sp)
   14f58:	dcc01317 	ldw	r19,76(sp)
   14f5c:	dc801217 	ldw	r18,72(sp)
   14f60:	dc401117 	ldw	r17,68(sp)
   14f64:	dc001017 	ldw	r16,64(sp)
   14f68:	dec01a04 	addi	sp,sp,104
   14f6c:	f800283a 	ret
   14f70:	30800c20 	cmpeqi	r2,r6,48
   14f74:	1000ef1e 	bne	r2,zero,15334 <___vfprintf_internal_r+0x4d4>
   14f78:	30800958 	cmpnei	r2,r6,37
   14f7c:	103fe626 	beq	r2,zero,14f18 <___vfprintf_internal_r+0xb8>
   14f80:	217ff404 	addi	r5,r4,-48
   14f84:	29403fcc 	andi	r5,r5,255
   14f88:	288002a8 	cmpgeui	r2,r5,10
   14f8c:	10000b1e 	bne	r2,zero,14fbc <___vfprintf_internal_r+0x15c>
   14f90:	88bfffe0 	cmpeqi	r2,r17,-1
   14f94:	1000071e 	bne	r2,zero,14fb4 <___vfprintf_internal_r+0x154>
   14f98:	880490ba 	slli	r2,r17,2
   14f9c:	1463883a 	add	r17,r2,r17
   14fa0:	8822907a 	slli	r17,r17,1
   14fa4:	2c63883a 	add	r17,r5,r17
   14fa8:	003fd706 	br	14f08 <___vfprintf_internal_r+0xa8>
   14fac:	b5800044 	addi	r22,r22,1
   14fb0:	003fc606 	br	14ecc <___vfprintf_internal_r+0x6c>
   14fb4:	0023883a 	mov	r17,zero
   14fb8:	003ffa06 	br	14fa4 <___vfprintf_internal_r+0x144>
   14fbc:	30800ba0 	cmpeqi	r2,r6,46
   14fc0:	1000e11e 	bne	r2,zero,15348 <___vfprintf_internal_r+0x4e8>
   14fc4:	00800084 	movi	r2,2
   14fc8:	213ff404 	addi	r4,r4,-48
   14fcc:	21003fcc 	andi	r4,r4,255
   14fd0:	214002a8 	cmpgeui	r5,r4,10
   14fd4:	2800091e 	bne	r5,zero,14ffc <___vfprintf_internal_r+0x19c>
   14fd8:	917fffe0 	cmpeqi	r5,r18,-1
   14fdc:	2800051e 	bne	r5,zero,14ff4 <___vfprintf_internal_r+0x194>
   14fe0:	900a90ba 	slli	r5,r18,2
   14fe4:	2ca5883a 	add	r18,r5,r18
   14fe8:	9024907a 	slli	r18,r18,1
   14fec:	24a5883a 	add	r18,r4,r18
   14ff0:	003fb606 	br	14ecc <___vfprintf_internal_r+0x6c>
   14ff4:	0025883a 	mov	r18,zero
   14ff8:	003ffc06 	br	14fec <___vfprintf_internal_r+0x18c>
   14ffc:	30801b20 	cmpeqi	r2,r6,108
   15000:	1000cf1e 	bne	r2,zero,15340 <___vfprintf_internal_r+0x4e0>
   15004:	90bfffe0 	cmpeqi	r2,r18,-1
   15008:	10000f1e 	bne	r2,zero,15048 <___vfprintf_internal_r+0x1e8>
   1500c:	d8000015 	stw	zero,0(sp)
   15010:	30801be0 	cmpeqi	r2,r6,111
   15014:	1000ce1e 	bne	r2,zero,15350 <___vfprintf_internal_r+0x4f0>
   15018:	30801c08 	cmpgei	r2,r6,112
   1501c:	1000171e 	bne	r2,zero,1507c <___vfprintf_internal_r+0x21c>
   15020:	308018e0 	cmpeqi	r2,r6,99
   15024:	1000a31e 	bne	r2,zero,152b4 <___vfprintf_internal_r+0x454>
   15028:	30801908 	cmpgei	r2,r6,100
   1502c:	1000081e 	bne	r2,zero,15050 <___vfprintf_internal_r+0x1f0>
   15030:	31801620 	cmpeqi	r6,r6,88
   15034:	303fa126 	beq	r6,zero,14ebc <___vfprintf_internal_r+0x5c>
   15038:	00800044 	movi	r2,1
   1503c:	d8800215 	stw	r2,8(sp)
   15040:	05000404 	movi	r20,16
   15044:	0000c306 	br	15354 <___vfprintf_internal_r+0x4f4>
   15048:	04800044 	movi	r18,1
   1504c:	003ff006 	br	15010 <___vfprintf_internal_r+0x1b0>
   15050:	30801920 	cmpeqi	r2,r6,100
   15054:	1000021e 	bne	r2,zero,15060 <___vfprintf_internal_r+0x200>
   15058:	31801a60 	cmpeqi	r6,r6,105
   1505c:	303f9726 	beq	r6,zero,14ebc <___vfprintf_internal_r+0x5c>
   15060:	e0800104 	addi	r2,fp,4
   15064:	d8800415 	stw	r2,16(sp)
   15068:	9800ba26 	beq	r19,zero,15354 <___vfprintf_internal_r+0x4f4>
   1506c:	e5400017 	ldw	r21,0(fp)
   15070:	a8002216 	blt	r21,zero,150fc <___vfprintf_internal_r+0x29c>
   15074:	04c00044 	movi	r19,1
   15078:	0000ba06 	br	15364 <___vfprintf_internal_r+0x504>
   1507c:	30801d60 	cmpeqi	r2,r6,117
   15080:	1000b41e 	bne	r2,zero,15354 <___vfprintf_internal_r+0x4f4>
   15084:	30801e20 	cmpeqi	r2,r6,120
   15088:	103fed1e 	bne	r2,zero,15040 <___vfprintf_internal_r+0x1e0>
   1508c:	31801ce0 	cmpeqi	r6,r6,115
   15090:	303f8a26 	beq	r6,zero,14ebc <___vfprintf_internal_r+0x5c>
   15094:	e5400017 	ldw	r21,0(fp)
   15098:	e0800104 	addi	r2,fp,4
   1509c:	d8800315 	stw	r2,12(sp)
   150a0:	a809883a 	mov	r4,r21
   150a4:	00157980 	call	15798 <strlen>
   150a8:	888fc83a 	sub	r7,r17,r2
   150ac:	1039883a 	mov	fp,r2
   150b0:	01c0080e 	bge	zero,r7,150d4 <___vfprintf_internal_r+0x274>
   150b4:	01800804 	movi	r6,32
   150b8:	b80b883a 	mov	r5,r23
   150bc:	8009883a 	mov	r4,r16
   150c0:	d9c00415 	stw	r7,16(sp)
   150c4:	0014df40 	call	14df4 <print_repeat>
   150c8:	103f9b1e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   150cc:	d9c00417 	ldw	r7,16(sp)
   150d0:	b1ed883a 	add	r22,r22,r7
   150d4:	b8800117 	ldw	r2,4(r23)
   150d8:	e00f883a 	mov	r7,fp
   150dc:	a80d883a 	mov	r6,r21
   150e0:	b80b883a 	mov	r5,r23
   150e4:	8009883a 	mov	r4,r16
   150e8:	103ee83a 	callr	r2
   150ec:	103f921e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   150f0:	b72d883a 	add	r22,r22,fp
   150f4:	df000317 	ldw	fp,12(sp)
   150f8:	003f7406 	br	14ecc <___vfprintf_internal_r+0x6c>
   150fc:	056bc83a 	sub	r21,zero,r21
   15100:	04c00044 	movi	r19,1
   15104:	00c00044 	movi	r3,1
   15108:	df000804 	addi	fp,sp,32
   1510c:	e00d883a 	mov	r6,fp
   15110:	a8002e1e 	bne	r21,zero,151cc <___vfprintf_internal_r+0x36c>
   15114:	e185c83a 	sub	r2,fp,r6
   15118:	d8800315 	stw	r2,12(sp)
   1511c:	9085c83a 	sub	r2,r18,r2
   15120:	0080090e 	bge	zero,r2,15148 <___vfprintf_internal_r+0x2e8>
   15124:	e085883a 	add	r2,fp,r2
   15128:	d9001004 	addi	r4,sp,64
   1512c:	e100042e 	bgeu	fp,r4,15140 <___vfprintf_internal_r+0x2e0>
   15130:	e7000044 	addi	fp,fp,1
   15134:	01000c04 	movi	r4,48
   15138:	e13fffc5 	stb	r4,-1(fp)
   1513c:	e0bffa1e 	bne	fp,r2,15128 <___vfprintf_internal_r+0x2c8>
   15140:	e185c83a 	sub	r2,fp,r6
   15144:	d8800315 	stw	r2,12(sp)
   15148:	d8800317 	ldw	r2,12(sp)
   1514c:	1897883a 	add	r11,r3,r2
   15150:	d8800017 	ldw	r2,0(sp)
   15154:	8aebc83a 	sub	r21,r17,r11
   15158:	10003526 	beq	r2,zero,15230 <___vfprintf_internal_r+0x3d0>
   1515c:	18000a26 	beq	r3,zero,15188 <___vfprintf_internal_r+0x328>
   15160:	00800b44 	movi	r2,45
   15164:	d88007c5 	stb	r2,31(sp)
   15168:	b8800117 	ldw	r2,4(r23)
   1516c:	01c00044 	movi	r7,1
   15170:	d98007c4 	addi	r6,sp,31
   15174:	b80b883a 	mov	r5,r23
   15178:	8009883a 	mov	r4,r16
   1517c:	103ee83a 	callr	r2
   15180:	103f6d1e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   15184:	b5800044 	addi	r22,r22,1
   15188:	0540070e 	bge	zero,r21,151a8 <___vfprintf_internal_r+0x348>
   1518c:	a80f883a 	mov	r7,r21
   15190:	01800c04 	movi	r6,48
   15194:	b80b883a 	mov	r5,r23
   15198:	8009883a 	mov	r4,r16
   1519c:	0014df40 	call	14df4 <print_repeat>
   151a0:	103f651e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   151a4:	b56d883a 	add	r22,r22,r21
   151a8:	d8800317 	ldw	r2,12(sp)
   151ac:	b72d883a 	add	r22,r22,fp
   151b0:	172bc83a 	sub	r21,r2,fp
   151b4:	af05883a 	add	r2,r21,fp
   151b8:	b707c83a 	sub	r3,r22,fp
   151bc:	00803216 	blt	zero,r2,15288 <___vfprintf_internal_r+0x428>
   151c0:	df000417 	ldw	fp,16(sp)
   151c4:	182d883a 	mov	r22,r3
   151c8:	003f3c06 	br	14ebc <___vfprintf_internal_r+0x5c>
   151cc:	a809883a 	mov	r4,r21
   151d0:	a00b883a 	mov	r5,r20
   151d4:	d8c00615 	stw	r3,24(sp)
   151d8:	0014b1c0 	call	14b1c <__udivsi3>
   151dc:	1009883a 	mov	r4,r2
   151e0:	a00b883a 	mov	r5,r20
   151e4:	d8800315 	stw	r2,12(sp)
   151e8:	0014bdc0 	call	14bdc <__mulsi3>
   151ec:	a8abc83a 	sub	r21,r21,r2
   151f0:	a8800288 	cmpgei	r2,r21,10
   151f4:	d9000317 	ldw	r4,12(sp)
   151f8:	d8c00617 	ldw	r3,24(sp)
   151fc:	d9800804 	addi	r6,sp,32
   15200:	1000051e 	bne	r2,zero,15218 <___vfprintf_internal_r+0x3b8>
   15204:	ad400c04 	addi	r21,r21,48
   15208:	e7000044 	addi	fp,fp,1
   1520c:	e57fffc5 	stb	r21,-1(fp)
   15210:	202b883a 	mov	r21,r4
   15214:	003fbe06 	br	15110 <___vfprintf_internal_r+0x2b0>
   15218:	d8800217 	ldw	r2,8(sp)
   1521c:	10000226 	beq	r2,zero,15228 <___vfprintf_internal_r+0x3c8>
   15220:	ad400dc4 	addi	r21,r21,55
   15224:	003ff806 	br	15208 <___vfprintf_internal_r+0x3a8>
   15228:	ad4015c4 	addi	r21,r21,87
   1522c:	003ff606 	br	15208 <___vfprintf_internal_r+0x3a8>
   15230:	0540090e 	bge	zero,r21,15258 <___vfprintf_internal_r+0x3f8>
   15234:	a80f883a 	mov	r7,r21
   15238:	01800804 	movi	r6,32
   1523c:	b80b883a 	mov	r5,r23
   15240:	8009883a 	mov	r4,r16
   15244:	d8c00615 	stw	r3,24(sp)
   15248:	0014df40 	call	14df4 <print_repeat>
   1524c:	103f3a1e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   15250:	d8c00617 	ldw	r3,24(sp)
   15254:	b56d883a 	add	r22,r22,r21
   15258:	183fd326 	beq	r3,zero,151a8 <___vfprintf_internal_r+0x348>
   1525c:	00800b44 	movi	r2,45
   15260:	d88007c5 	stb	r2,31(sp)
   15264:	b8800117 	ldw	r2,4(r23)
   15268:	01c00044 	movi	r7,1
   1526c:	d98007c4 	addi	r6,sp,31
   15270:	b80b883a 	mov	r5,r23
   15274:	8009883a 	mov	r4,r16
   15278:	103ee83a 	callr	r2
   1527c:	103f2e1e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   15280:	b5800044 	addi	r22,r22,1
   15284:	003fc806 	br	151a8 <___vfprintf_internal_r+0x348>
   15288:	e0bfffc3 	ldbu	r2,-1(fp)
   1528c:	01c00044 	movi	r7,1
   15290:	d98007c4 	addi	r6,sp,31
   15294:	d88007c5 	stb	r2,31(sp)
   15298:	b8800117 	ldw	r2,4(r23)
   1529c:	b80b883a 	mov	r5,r23
   152a0:	8009883a 	mov	r4,r16
   152a4:	e73fffc4 	addi	fp,fp,-1
   152a8:	103ee83a 	callr	r2
   152ac:	103fc126 	beq	r2,zero,151b4 <___vfprintf_internal_r+0x354>
   152b0:	003f2106 	br	14f38 <___vfprintf_internal_r+0xd8>
   152b4:	88800090 	cmplti	r2,r17,2
   152b8:	1000081e 	bne	r2,zero,152dc <___vfprintf_internal_r+0x47c>
   152bc:	8d7fffc4 	addi	r21,r17,-1
   152c0:	a80f883a 	mov	r7,r21
   152c4:	01800804 	movi	r6,32
   152c8:	b80b883a 	mov	r5,r23
   152cc:	8009883a 	mov	r4,r16
   152d0:	0014df40 	call	14df4 <print_repeat>
   152d4:	103f181e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   152d8:	b56d883a 	add	r22,r22,r21
   152dc:	e0800017 	ldw	r2,0(fp)
   152e0:	01c00044 	movi	r7,1
   152e4:	d9800804 	addi	r6,sp,32
   152e8:	d8800805 	stb	r2,32(sp)
   152ec:	b8800117 	ldw	r2,4(r23)
   152f0:	b80b883a 	mov	r5,r23
   152f4:	8009883a 	mov	r4,r16
   152f8:	e5400104 	addi	r21,fp,4
   152fc:	103ee83a 	callr	r2
   15300:	103f0d1e 	bne	r2,zero,14f38 <___vfprintf_internal_r+0xd8>
   15304:	b5800044 	addi	r22,r22,1
   15308:	a839883a 	mov	fp,r21
   1530c:	003eef06 	br	14ecc <___vfprintf_internal_r+0x6c>
   15310:	d8000215 	stw	zero,8(sp)
   15314:	d8000115 	stw	zero,4(sp)
   15318:	d8000015 	stw	zero,0(sp)
   1531c:	04c00044 	movi	r19,1
   15320:	05000284 	movi	r20,10
   15324:	04bfffc4 	movi	r18,-1
   15328:	047fffc4 	movi	r17,-1
   1532c:	00800044 	movi	r2,1
   15330:	003ee606 	br	14ecc <___vfprintf_internal_r+0x6c>
   15334:	00800044 	movi	r2,1
   15338:	d8800015 	stw	r2,0(sp)
   1533c:	003ef206 	br	14f08 <___vfprintf_internal_r+0xa8>
   15340:	00800044 	movi	r2,1
   15344:	d8800115 	stw	r2,4(sp)
   15348:	008000c4 	movi	r2,3
   1534c:	003edf06 	br	14ecc <___vfprintf_internal_r+0x6c>
   15350:	05000204 	movi	r20,8
   15354:	e0800104 	addi	r2,fp,4
   15358:	d8800415 	stw	r2,16(sp)
   1535c:	e5400017 	ldw	r21,0(fp)
   15360:	0027883a 	mov	r19,zero
   15364:	0007883a 	mov	r3,zero
   15368:	003f6706 	br	15108 <___vfprintf_internal_r+0x2a8>

0001536c <__vfprintf_internal>:
   1536c:	00800074 	movhi	r2,1
   15370:	300f883a 	mov	r7,r6
   15374:	280d883a 	mov	r6,r5
   15378:	200b883a 	mov	r5,r4
   1537c:	1118b217 	ldw	r4,25288(r2)
   15380:	0014e601 	jmpi	14e60 <___vfprintf_internal_r>

00015384 <__sfvwrite_small_dev>:
   15384:	2880000b 	ldhu	r2,0(r5)
   15388:	1080020c 	andi	r2,r2,8
   1538c:	10002526 	beq	r2,zero,15424 <__sfvwrite_small_dev+0xa0>
   15390:	2880008f 	ldh	r2,2(r5)
   15394:	defffb04 	addi	sp,sp,-20
   15398:	dcc00315 	stw	r19,12(sp)
   1539c:	dc800215 	stw	r18,8(sp)
   153a0:	dc400115 	stw	r17,4(sp)
   153a4:	dc000015 	stw	r16,0(sp)
   153a8:	dfc00415 	stw	ra,16(sp)
   153ac:	2027883a 	mov	r19,r4
   153b0:	2821883a 	mov	r16,r5
   153b4:	3025883a 	mov	r18,r6
   153b8:	3823883a 	mov	r17,r7
   153bc:	1000100e 	bge	r2,zero,15400 <__sfvwrite_small_dev+0x7c>
   153c0:	8080000b 	ldhu	r2,0(r16)
   153c4:	10801014 	ori	r2,r2,64
   153c8:	8080000d 	sth	r2,0(r16)
   153cc:	00bfffc4 	movi	r2,-1
   153d0:	00000d06 	br	15408 <__sfvwrite_small_dev+0x84>
   153d4:	88810050 	cmplti	r2,r17,1025
   153d8:	880f883a 	mov	r7,r17
   153dc:	1000011e 	bne	r2,zero,153e4 <__sfvwrite_small_dev+0x60>
   153e0:	01c10004 	movi	r7,1024
   153e4:	8140008f 	ldh	r5,2(r16)
   153e8:	900d883a 	mov	r6,r18
   153ec:	9809883a 	mov	r4,r19
   153f0:	00157b40 	call	157b4 <_write_r>
   153f4:	00bff20e 	bge	zero,r2,153c0 <__sfvwrite_small_dev+0x3c>
   153f8:	88a3c83a 	sub	r17,r17,r2
   153fc:	90a5883a 	add	r18,r18,r2
   15400:	047ff416 	blt	zero,r17,153d4 <__sfvwrite_small_dev+0x50>
   15404:	0005883a 	mov	r2,zero
   15408:	dfc00417 	ldw	ra,16(sp)
   1540c:	dcc00317 	ldw	r19,12(sp)
   15410:	dc800217 	ldw	r18,8(sp)
   15414:	dc400117 	ldw	r17,4(sp)
   15418:	dc000017 	ldw	r16,0(sp)
   1541c:	dec00504 	addi	sp,sp,20
   15420:	f800283a 	ret
   15424:	00bfffc4 	movi	r2,-1
   15428:	f800283a 	ret

0001542c <malloc>:
   1542c:	00800074 	movhi	r2,1
   15430:	200b883a 	mov	r5,r4
   15434:	1118b217 	ldw	r4,25288(r2)
   15438:	001554c1 	jmpi	1554c <_malloc_r>

0001543c <free>:
   1543c:	00800074 	movhi	r2,1
   15440:	200b883a 	mov	r5,r4
   15444:	1118b217 	ldw	r4,25288(r2)
   15448:	001544c1 	jmpi	1544c <_free_r>

0001544c <_free_r>:
   1544c:	28003e26 	beq	r5,zero,15548 <_free_r+0xfc>
   15450:	28bfff17 	ldw	r2,-4(r5)
   15454:	defffd04 	addi	sp,sp,-12
   15458:	dc000115 	stw	r16,4(sp)
   1545c:	dfc00215 	stw	ra,8(sp)
   15460:	2c3fff04 	addi	r16,r5,-4
   15464:	1000010e 	bge	r2,zero,1546c <_free_r+0x20>
   15468:	80a1883a 	add	r16,r16,r2
   1546c:	d9000015 	stw	r4,0(sp)
   15470:	00159840 	call	15984 <__malloc_lock>
   15474:	00800074 	movhi	r2,1
   15478:	10992917 	ldw	r2,25764(r2)
   1547c:	d9000017 	ldw	r4,0(sp)
   15480:	1000071e 	bne	r2,zero,154a0 <_free_r+0x54>
   15484:	80000115 	stw	zero,4(r16)
   15488:	00800074 	movhi	r2,1
   1548c:	14192915 	stw	r16,25764(r2)
   15490:	dfc00217 	ldw	ra,8(sp)
   15494:	dc000117 	ldw	r16,4(sp)
   15498:	dec00304 	addi	sp,sp,12
   1549c:	00159881 	jmpi	15988 <__malloc_unlock>
   154a0:	8080092e 	bgeu	r16,r2,154c8 <_free_r+0x7c>
   154a4:	81400017 	ldw	r5,0(r16)
   154a8:	8147883a 	add	r3,r16,r5
   154ac:	10c0041e 	bne	r2,r3,154c0 <_free_r+0x74>
   154b0:	10c00017 	ldw	r3,0(r2)
   154b4:	10800117 	ldw	r2,4(r2)
   154b8:	1947883a 	add	r3,r3,r5
   154bc:	80c00015 	stw	r3,0(r16)
   154c0:	80800115 	stw	r2,4(r16)
   154c4:	003ff006 	br	15488 <_free_r+0x3c>
   154c8:	1007883a 	mov	r3,r2
   154cc:	10800117 	ldw	r2,4(r2)
   154d0:	10000126 	beq	r2,zero,154d8 <_free_r+0x8c>
   154d4:	80bffc2e 	bgeu	r16,r2,154c8 <_free_r+0x7c>
   154d8:	19400017 	ldw	r5,0(r3)
   154dc:	194d883a 	add	r6,r3,r5
   154e0:	34000b1e 	bne	r6,r16,15510 <_free_r+0xc4>
   154e4:	81800017 	ldw	r6,0(r16)
   154e8:	298b883a 	add	r5,r5,r6
   154ec:	19400015 	stw	r5,0(r3)
   154f0:	194d883a 	add	r6,r3,r5
   154f4:	11bfe61e 	bne	r2,r6,15490 <_free_r+0x44>
   154f8:	11800017 	ldw	r6,0(r2)
   154fc:	10800117 	ldw	r2,4(r2)
   15500:	314b883a 	add	r5,r6,r5
   15504:	19400015 	stw	r5,0(r3)
   15508:	18800115 	stw	r2,4(r3)
   1550c:	003fe006 	br	15490 <_free_r+0x44>
   15510:	8180032e 	bgeu	r16,r6,15520 <_free_r+0xd4>
   15514:	00800304 	movi	r2,12
   15518:	20800015 	stw	r2,0(r4)
   1551c:	003fdc06 	br	15490 <_free_r+0x44>
   15520:	81800017 	ldw	r6,0(r16)
   15524:	818b883a 	add	r5,r16,r6
   15528:	1140041e 	bne	r2,r5,1553c <_free_r+0xf0>
   1552c:	11400017 	ldw	r5,0(r2)
   15530:	10800117 	ldw	r2,4(r2)
   15534:	298b883a 	add	r5,r5,r6
   15538:	81400015 	stw	r5,0(r16)
   1553c:	80800115 	stw	r2,4(r16)
   15540:	1c000115 	stw	r16,4(r3)
   15544:	003fd206 	br	15490 <_free_r+0x44>
   15548:	f800283a 	ret

0001554c <_malloc_r>:
   1554c:	defffc04 	addi	sp,sp,-16
   15550:	00bfff04 	movi	r2,-4
   15554:	dc400115 	stw	r17,4(sp)
   15558:	2c4000c4 	addi	r17,r5,3
   1555c:	88a2703a 	and	r17,r17,r2
   15560:	8c400204 	addi	r17,r17,8
   15564:	dc800215 	stw	r18,8(sp)
   15568:	dfc00315 	stw	ra,12(sp)
   1556c:	dc000015 	stw	r16,0(sp)
   15570:	88800328 	cmpgeui	r2,r17,12
   15574:	2025883a 	mov	r18,r4
   15578:	10001a1e 	bne	r2,zero,155e4 <_malloc_r+0x98>
   1557c:	04400304 	movi	r17,12
   15580:	89401936 	bltu	r17,r5,155e8 <_malloc_r+0x9c>
   15584:	9009883a 	mov	r4,r18
   15588:	00159840 	call	15984 <__malloc_lock>
   1558c:	00800074 	movhi	r2,1
   15590:	10d92917 	ldw	r3,25764(r2)
   15594:	1821883a 	mov	r16,r3
   15598:	80001c1e 	bne	r16,zero,1560c <_malloc_r+0xc0>
   1559c:	00800074 	movhi	r2,1
   155a0:	10992817 	ldw	r2,25760(r2)
   155a4:	1000051e 	bne	r2,zero,155bc <_malloc_r+0x70>
   155a8:	000b883a 	mov	r5,zero
   155ac:	9009883a 	mov	r4,r18
   155b0:	00157500 	call	15750 <_sbrk_r>
   155b4:	00c00074 	movhi	r3,1
   155b8:	18992815 	stw	r2,25760(r3)
   155bc:	880b883a 	mov	r5,r17
   155c0:	9009883a 	mov	r4,r18
   155c4:	00157500 	call	15750 <_sbrk_r>
   155c8:	10ffffd8 	cmpnei	r3,r2,-1
   155cc:	18002d1e 	bne	r3,zero,15684 <_malloc_r+0x138>
   155d0:	00800304 	movi	r2,12
   155d4:	90800015 	stw	r2,0(r18)
   155d8:	9009883a 	mov	r4,r18
   155dc:	00159880 	call	15988 <__malloc_unlock>
   155e0:	00000306 	br	155f0 <_malloc_r+0xa4>
   155e4:	883fe60e 	bge	r17,zero,15580 <_malloc_r+0x34>
   155e8:	00800304 	movi	r2,12
   155ec:	90800015 	stw	r2,0(r18)
   155f0:	0005883a 	mov	r2,zero
   155f4:	dfc00317 	ldw	ra,12(sp)
   155f8:	dc800217 	ldw	r18,8(sp)
   155fc:	dc400117 	ldw	r17,4(sp)
   15600:	dc000017 	ldw	r16,0(sp)
   15604:	dec00404 	addi	sp,sp,16
   15608:	f800283a 	ret
   1560c:	80800017 	ldw	r2,0(r16)
   15610:	1445c83a 	sub	r2,r2,r17
   15614:	10001816 	blt	r2,zero,15678 <_malloc_r+0x12c>
   15618:	11000330 	cmpltui	r4,r2,12
   1561c:	2000041e 	bne	r4,zero,15630 <_malloc_r+0xe4>
   15620:	80800015 	stw	r2,0(r16)
   15624:	80a1883a 	add	r16,r16,r2
   15628:	84400015 	stw	r17,0(r16)
   1562c:	00000406 	br	15640 <_malloc_r+0xf4>
   15630:	80800117 	ldw	r2,4(r16)
   15634:	1c000e1e 	bne	r3,r16,15670 <_malloc_r+0x124>
   15638:	00c00074 	movhi	r3,1
   1563c:	18992915 	stw	r2,25764(r3)
   15640:	9009883a 	mov	r4,r18
   15644:	00159880 	call	15988 <__malloc_unlock>
   15648:	013ffe04 	movi	r4,-8
   1564c:	808002c4 	addi	r2,r16,11
   15650:	80c00104 	addi	r3,r16,4
   15654:	1104703a 	and	r2,r2,r4
   15658:	10c9c83a 	sub	r4,r2,r3
   1565c:	10ffe526 	beq	r2,r3,155f4 <_malloc_r+0xa8>
   15660:	8121883a 	add	r16,r16,r4
   15664:	1887c83a 	sub	r3,r3,r2
   15668:	80c00015 	stw	r3,0(r16)
   1566c:	003fe106 	br	155f4 <_malloc_r+0xa8>
   15670:	18800115 	stw	r2,4(r3)
   15674:	003ff206 	br	15640 <_malloc_r+0xf4>
   15678:	8007883a 	mov	r3,r16
   1567c:	84000117 	ldw	r16,4(r16)
   15680:	003fc506 	br	15598 <_malloc_r+0x4c>
   15684:	140000c4 	addi	r16,r2,3
   15688:	00ffff04 	movi	r3,-4
   1568c:	80e0703a 	and	r16,r16,r3
   15690:	143fe526 	beq	r2,r16,15628 <_malloc_r+0xdc>
   15694:	808bc83a 	sub	r5,r16,r2
   15698:	9009883a 	mov	r4,r18
   1569c:	00157500 	call	15750 <_sbrk_r>
   156a0:	10bfffe0 	cmpeqi	r2,r2,-1
   156a4:	103fe026 	beq	r2,zero,15628 <_malloc_r+0xdc>
   156a8:	003fc906 	br	155d0 <_malloc_r+0x84>

000156ac <putc>:
   156ac:	defffd04 	addi	sp,sp,-12
   156b0:	00800074 	movhi	r2,1
   156b4:	dc000115 	stw	r16,4(sp)
   156b8:	dfc00215 	stw	ra,8(sp)
   156bc:	1094e104 	addi	r2,r2,21380
   156c0:	28800115 	stw	r2,4(r5)
   156c4:	00800074 	movhi	r2,1
   156c8:	d90000c5 	stb	r4,3(sp)
   156cc:	2021883a 	mov	r16,r4
   156d0:	1118b217 	ldw	r4,25288(r2)
   156d4:	01c00044 	movi	r7,1
   156d8:	d98000c4 	addi	r6,sp,3
   156dc:	00153840 	call	15384 <__sfvwrite_small_dev>
   156e0:	10ffffe0 	cmpeqi	r3,r2,-1
   156e4:	1800011e 	bne	r3,zero,156ec <putc+0x40>
   156e8:	8005883a 	mov	r2,r16
   156ec:	dfc00217 	ldw	ra,8(sp)
   156f0:	dc000117 	ldw	r16,4(sp)
   156f4:	dec00304 	addi	sp,sp,12
   156f8:	f800283a 	ret

000156fc <_putc_r>:
   156fc:	defffd04 	addi	sp,sp,-12
   15700:	00800074 	movhi	r2,1
   15704:	dc000115 	stw	r16,4(sp)
   15708:	dfc00215 	stw	ra,8(sp)
   1570c:	1094e104 	addi	r2,r2,21380
   15710:	30800115 	stw	r2,4(r6)
   15714:	00800074 	movhi	r2,1
   15718:	1118b217 	ldw	r4,25288(r2)
   1571c:	2821883a 	mov	r16,r5
   15720:	01c00044 	movi	r7,1
   15724:	300b883a 	mov	r5,r6
   15728:	d98000c4 	addi	r6,sp,3
   1572c:	dc0000c5 	stb	r16,3(sp)
   15730:	00153840 	call	15384 <__sfvwrite_small_dev>
   15734:	10ffffe0 	cmpeqi	r3,r2,-1
   15738:	1800011e 	bne	r3,zero,15740 <_putc_r+0x44>
   1573c:	8005883a 	mov	r2,r16
   15740:	dfc00217 	ldw	ra,8(sp)
   15744:	dc000117 	ldw	r16,4(sp)
   15748:	dec00304 	addi	sp,sp,12
   1574c:	f800283a 	ret

00015750 <_sbrk_r>:
   15750:	defffe04 	addi	sp,sp,-8
   15754:	dc000015 	stw	r16,0(sp)
   15758:	00800074 	movhi	r2,1
   1575c:	2021883a 	mov	r16,r4
   15760:	2809883a 	mov	r4,r5
   15764:	dfc00115 	stw	ra,4(sp)
   15768:	10192a15 	stw	zero,25768(r2)
   1576c:	0015b180 	call	15b18 <sbrk>
   15770:	10ffffd8 	cmpnei	r3,r2,-1
   15774:	1800041e 	bne	r3,zero,15788 <_sbrk_r+0x38>
   15778:	00c00074 	movhi	r3,1
   1577c:	18d92a17 	ldw	r3,25768(r3)
   15780:	18000126 	beq	r3,zero,15788 <_sbrk_r+0x38>
   15784:	80c00015 	stw	r3,0(r16)
   15788:	dfc00117 	ldw	ra,4(sp)
   1578c:	dc000017 	ldw	r16,0(sp)
   15790:	dec00204 	addi	sp,sp,8
   15794:	f800283a 	ret

00015798 <strlen>:
   15798:	2005883a 	mov	r2,r4
   1579c:	10c00007 	ldb	r3,0(r2)
   157a0:	1800021e 	bne	r3,zero,157ac <strlen+0x14>
   157a4:	1105c83a 	sub	r2,r2,r4
   157a8:	f800283a 	ret
   157ac:	10800044 	addi	r2,r2,1
   157b0:	003ffa06 	br	1579c <strlen+0x4>

000157b4 <_write_r>:
   157b4:	defffe04 	addi	sp,sp,-8
   157b8:	dc000015 	stw	r16,0(sp)
   157bc:	00800074 	movhi	r2,1
   157c0:	2021883a 	mov	r16,r4
   157c4:	2809883a 	mov	r4,r5
   157c8:	300b883a 	mov	r5,r6
   157cc:	380d883a 	mov	r6,r7
   157d0:	dfc00115 	stw	ra,4(sp)
   157d4:	10192a15 	stw	zero,25768(r2)
   157d8:	0015b640 	call	15b64 <write>
   157dc:	10ffffd8 	cmpnei	r3,r2,-1
   157e0:	1800041e 	bne	r3,zero,157f4 <_write_r+0x40>
   157e4:	00c00074 	movhi	r3,1
   157e8:	18d92a17 	ldw	r3,25768(r3)
   157ec:	18000126 	beq	r3,zero,157f4 <_write_r+0x40>
   157f0:	80c00015 	stw	r3,0(r16)
   157f4:	dfc00117 	ldw	ra,4(sp)
   157f8:	dc000017 	ldw	r16,0(sp)
   157fc:	dec00204 	addi	sp,sp,8
   15800:	f800283a 	ret

00015804 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   15804:	00800074 	movhi	r2,1
   15808:	11d89a17 	ldw	r7,25192(r2)
{
   1580c:	defffe04 	addi	sp,sp,-8
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   15810:	01000074 	movhi	r4,1
   15814:	01800044 	movi	r6,1
   15818:	d94000c4 	addi	r5,sp,3
   1581c:	2118b504 	addi	r4,r4,25300
{
   15820:	dfc00115 	stw	ra,4(sp)
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   15824:	0015bf00 	call	15bf0 <altera_avalon_jtag_uart_read>
   15828:	0080040e 	bge	zero,r2,1583c <alt_getchar+0x38>
        return -1;
    }
    return c;
   1582c:	d88000c7 	ldb	r2,3(sp)
#else
    return getchar();
#endif
#endif
}
   15830:	dfc00117 	ldw	ra,4(sp)
   15834:	dec00204 	addi	sp,sp,8
   15838:	f800283a 	ret
        return -1;
   1583c:	00bfffc4 	movi	r2,-1
   15840:	003ffb06 	br	15830 <alt_getchar+0x2c>

00015844 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   15844:	20800828 	cmpgeui	r2,r4,32
   15848:	1000201e 	bne	r2,zero,158cc <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
   1584c:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15850:	00ffff84 	movi	r3,-2
   15854:	38c4703a 	and	r2,r7,r3
   15858:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   1585c:	201090fa 	slli	r8,r4,3
   15860:	00800074 	movhi	r2,1
   15864:	10993004 	addi	r2,r2,25792
   15868:	1205883a 	add	r2,r2,r8
   1586c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   15870:	11400115 	stw	r5,4(r2)
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   15874:	00800044 	movi	r2,1
   15878:	1108983a 	sll	r4,r2,r4

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1587c:	30000c26 	beq	r6,zero,158b0 <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
   15880:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15884:	10c6703a 	and	r3,r2,r3
   15888:	1801703a 	wrctl	status,r3
   1588c:	d0e07d17 	ldw	r3,-32268(gp)
   15890:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
   15894:	d1207d15 	stw	r4,-32268(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15898:	d0e07d17 	ldw	r3,-32268(gp)
   1589c:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
   158a0:	1001703a 	wrctl	status,r2
   158a4:	3801703a 	wrctl	status,r7
   158a8:	0005883a 	mov	r2,zero
}
   158ac:	f800283a 	ret
  NIOS2_READ_STATUS (context);
   158b0:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158b4:	10c6703a 	and	r3,r2,r3
   158b8:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
   158bc:	d0e07d17 	ldw	r3,-32268(gp)
   158c0:	0108303a 	nor	r4,zero,r4
   158c4:	20c8703a 	and	r4,r4,r3
   158c8:	003ff206 	br	15894 <alt_irq_register+0x50>
  int rc = -EINVAL;  
   158cc:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
   158d0:	f800283a 	ret

000158d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   158d4:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   158d8:	01000074 	movhi	r4,1
   158dc:	01400074 	movhi	r5,1
   158e0:	dfc00015 	stw	ra,0(sp)
   158e4:	21185404 	addi	r4,r4,24912
   158e8:	2958bc04 	addi	r5,r5,25328
   158ec:	21400426 	beq	r4,r5,15900 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
   158f0:	01800074 	movhi	r6,1
   158f4:	3198bc04 	addi	r6,r6,25328
   158f8:	310dc83a 	sub	r6,r6,r4
   158fc:	0015f780 	call	15f78 <memcpy>
  if (to != from)
   15900:	01000074 	movhi	r4,1
   15904:	01400074 	movhi	r5,1
   15908:	21000804 	addi	r4,r4,32
   1590c:	29400804 	addi	r5,r5,32
   15910:	21400426 	beq	r4,r5,15924 <alt_load+0x50>
      *to++ = *from++;
   15914:	01800074 	movhi	r6,1
   15918:	31806004 	addi	r6,r6,384
   1591c:	310dc83a 	sub	r6,r6,r4
   15920:	0015f780 	call	15f78 <memcpy>
  if (to != from)
   15924:	01000074 	movhi	r4,1
   15928:	01400074 	movhi	r5,1
   1592c:	2117e804 	addi	r4,r4,24480
   15930:	2957e804 	addi	r5,r5,24480
   15934:	21400426 	beq	r4,r5,15948 <alt_load+0x74>
      *to++ = *from++;
   15938:	01800074 	movhi	r6,1
   1593c:	31985404 	addi	r6,r6,24912
   15940:	310dc83a 	sub	r6,r6,r4
   15944:	0015f780 	call	15f78 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   15948:	0015de40 	call	15de4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1594c:	dfc00017 	ldw	ra,0(sp)
   15950:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
   15954:	0015ecc1 	jmpi	15ecc <alt_icache_flush_all>

00015958 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   15958:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1595c:	0009883a 	mov	r4,zero
{
   15960:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
   15964:	0015bc00 	call	15bc0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   15968:	0015be00 	call	15be0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1596c:	d1a07e17 	ldw	r6,-32264(gp)
   15970:	d1607f17 	ldw	r5,-32260(gp)
   15974:	d1208017 	ldw	r4,-32256(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   15978:	dfc00017 	ldw	ra,0(sp)
   1597c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
   15980:	001090c1 	jmpi	1090c <main>

00015984 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   15984:	f800283a 	ret

00015988 <__malloc_unlock>:
   15988:	f800283a 	ret

0001598c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1598c:	defff704 	addi	sp,sp,-36
   15990:	2005883a 	mov	r2,r4
   15994:	dfc00515 	stw	ra,20(sp)
   15998:	dd000415 	stw	r20,16(sp)
   1599c:	dcc00315 	stw	r19,12(sp)
   159a0:	dc800215 	stw	r18,8(sp)
   159a4:	dc400115 	stw	r17,4(sp)
   159a8:	dc000015 	stw	r16,0(sp)
   159ac:	d9400615 	stw	r5,24(sp)
   159b0:	d9800715 	stw	r6,28(sp)
   159b4:	d9c00815 	stw	r7,32(sp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   159b8:	048003c4 	movi	r18,15
	va_start(args, fmt);
   159bc:	dc000604 	addi	r16,sp,24
    while ((c = *w++) != 0)
   159c0:	11000007 	ldb	r4,0(r2)
   159c4:	2000081e 	bne	r4,zero,159e8 <alt_printf+0x5c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   159c8:	dfc00517 	ldw	ra,20(sp)
   159cc:	dd000417 	ldw	r20,16(sp)
   159d0:	dcc00317 	ldw	r19,12(sp)
   159d4:	dc800217 	ldw	r18,8(sp)
   159d8:	dc400117 	ldw	r17,4(sp)
   159dc:	dc000017 	ldw	r16,0(sp)
   159e0:	dec00904 	addi	sp,sp,36
   159e4:	f800283a 	ret
        if (c != '%')
   159e8:	20c00960 	cmpeqi	r3,r4,37
   159ec:	1800031e 	bne	r3,zero,159fc <alt_printf+0x70>
    while ((c = *w++) != 0)
   159f0:	14c00044 	addi	r19,r2,1
                        alt_putchar('0');
   159f4:	0015acc0 	call	15acc <alt_putchar>
                        continue;
   159f8:	00000d06 	br	15a30 <alt_printf+0xa4>
            if ((c = *w++) != 0)
   159fc:	14c00084 	addi	r19,r2,2
   15a00:	10800047 	ldb	r2,1(r2)
   15a04:	103ff026 	beq	r2,zero,159c8 <alt_printf+0x3c>
                if (c == '%')
   15a08:	10c00958 	cmpnei	r3,r2,37
   15a0c:	1800021e 	bne	r3,zero,15a18 <alt_printf+0x8c>
                    alt_putchar(c);
   15a10:	01000944 	movi	r4,37
   15a14:	003ff706 	br	159f4 <alt_printf+0x68>
                else if (c == 'c')
   15a18:	10c018d8 	cmpnei	r3,r2,99
   15a1c:	1800061e 	bne	r3,zero,15a38 <alt_printf+0xac>
                    alt_putchar(v);
   15a20:	81000017 	ldw	r4,0(r16)
                    int v = va_arg(args, int);
   15a24:	84400104 	addi	r17,r16,4
   15a28:	8821883a 	mov	r16,r17
                    alt_putchar(v);
   15a2c:	0015acc0 	call	15acc <alt_putchar>
                    int v = va_arg(args, int);
   15a30:	9805883a 	mov	r2,r19
   15a34:	003fe206 	br	159c0 <alt_printf+0x34>
                else if (c == 'x')
   15a38:	10c01e18 	cmpnei	r3,r2,120
   15a3c:	18001a1e 	bne	r3,zero,15aa8 <alt_printf+0x11c>
                    unsigned long v = va_arg(args, unsigned long);
   15a40:	85000017 	ldw	r20,0(r16)
   15a44:	84000104 	addi	r16,r16,4
                    if (v == 0)
   15a48:	a000131e 	bne	r20,zero,15a98 <alt_printf+0x10c>
                        alt_putchar('0');
   15a4c:	01000c04 	movi	r4,48
   15a50:	003fe806 	br	159f4 <alt_printf+0x68>
                        digit_shift -= 4;
   15a54:	8c7fff04 	addi	r17,r17,-4
                    while (!(v & (0xF << digit_shift)))
   15a58:	9444983a 	sll	r2,r18,r17
   15a5c:	1504703a 	and	r2,r2,r20
   15a60:	103ffc26 	beq	r2,zero,15a54 <alt_printf+0xc8>
                    for (; digit_shift >= 0; digit_shift -= 4)
   15a64:	883ff216 	blt	r17,zero,15a30 <alt_printf+0xa4>
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   15a68:	9448983a 	sll	r4,r18,r17
   15a6c:	2508703a 	and	r4,r4,r20
   15a70:	2448d83a 	srl	r4,r4,r17
                        if (digit <= 9)
   15a74:	208002a8 	cmpgeui	r2,r4,10
   15a78:	1000091e 	bne	r2,zero,15aa0 <alt_printf+0x114>
                            c = '0' + digit;
   15a7c:	21000c04 	addi	r4,r4,48
                        alt_putchar(c);
   15a80:	21003fcc 	andi	r4,r4,255
   15a84:	2100201c 	xori	r4,r4,128
   15a88:	213fe004 	addi	r4,r4,-128
   15a8c:	0015acc0 	call	15acc <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
   15a90:	8c7fff04 	addi	r17,r17,-4
   15a94:	003ff306 	br	15a64 <alt_printf+0xd8>
                    digit_shift = 28;
   15a98:	04400704 	movi	r17,28
   15a9c:	003fee06 	br	15a58 <alt_printf+0xcc>
                            c = 'a' + digit - 10;
   15aa0:	210015c4 	addi	r4,r4,87
   15aa4:	003ff606 	br	15a80 <alt_printf+0xf4>
                else if (c == 's')
   15aa8:	10801cd8 	cmpnei	r2,r2,115
   15aac:	103fe01e 	bne	r2,zero,15a30 <alt_printf+0xa4>
                    char *s = va_arg(args, char *);
   15ab0:	84400017 	ldw	r17,0(r16)
   15ab4:	84000104 	addi	r16,r16,4
                    while(*s)
   15ab8:	89000007 	ldb	r4,0(r17)
   15abc:	203fdc26 	beq	r4,zero,15a30 <alt_printf+0xa4>
                      alt_putchar(*s++);
   15ac0:	8c400044 	addi	r17,r17,1
   15ac4:	0015acc0 	call	15acc <alt_putchar>
   15ac8:	003ffb06 	br	15ab8 <alt_printf+0x12c>

00015acc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   15acc:	defffd04 	addi	sp,sp,-12
   15ad0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   15ad4:	d90000c5 	stb	r4,3(sp)
{
   15ad8:	2021883a 	mov	r16,r4

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   15adc:	01000074 	movhi	r4,1
   15ae0:	000f883a 	mov	r7,zero
   15ae4:	01800044 	movi	r6,1
   15ae8:	d94000c4 	addi	r5,sp,3
   15aec:	2118b504 	addi	r4,r4,25300
{
   15af0:	dfc00215 	stw	ra,8(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   15af4:	0015c480 	call	15c48 <altera_avalon_jtag_uart_write>
   15af8:	10bfffd8 	cmpnei	r2,r2,-1
   15afc:	1000011e 	bne	r2,zero,15b04 <alt_putchar+0x38>
        return -1;
   15b00:	043fffc4 	movi	r16,-1
    return c;
#else
    return putchar(c);
#endif
#endif
}
   15b04:	8005883a 	mov	r2,r16
   15b08:	dfc00217 	ldw	ra,8(sp)
   15b0c:	dc000117 	ldw	r16,4(sp)
   15b10:	dec00304 	addi	sp,sp,12
   15b14:	f800283a 	ret

00015b18 <sbrk>:
  NIOS2_READ_STATUS (context);
   15b18:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b1c:	00bfff84 	movi	r2,-2
   15b20:	1884703a 	and	r2,r3,r2
   15b24:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15b28:	d0a00617 	ldw	r2,-32744(gp)
   15b2c:	017fff04 	movi	r5,-4
   15b30:	108000c4 	addi	r2,r2,3
   15b34:	1144703a 	and	r2,r2,r5
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15b38:	014000b4 	movhi	r5,2
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15b3c:	d0a00615 	stw	r2,-32744(gp)
  if ((heap_end + incr) > __alt_heap_limit) {
   15b40:	1109883a 	add	r4,r2,r4
   15b44:	29400004 	addi	r5,r5,0
   15b48:	2900032e 	bgeu	r5,r4,15b58 <sbrk+0x40>
  NIOS2_WRITE_STATUS (context);
   15b4c:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15b50:	00bfffc4 	movi	r2,-1
   15b54:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   15b58:	d1200615 	stw	r4,-32744(gp)
   15b5c:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   15b60:	f800283a 	ret

00015b64 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   15b64:	213fffc4 	addi	r4,r4,-1
   15b68:	210000a8 	cmpgeui	r4,r4,2
   15b6c:	2000041e 	bne	r4,zero,15b80 <write+0x1c>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
   15b70:	01000074 	movhi	r4,1
   15b74:	000f883a 	mov	r7,zero
   15b78:	2118b504 	addi	r4,r4,25300
   15b7c:	0015c481 	jmpi	15c48 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   15b80:	d0a00d17 	ldw	r2,-32716(gp)
   15b84:	10000926 	beq	r2,zero,15bac <write+0x48>
{
   15b88:	deffff04 	addi	sp,sp,-4
   15b8c:	dfc00015 	stw	ra,0(sp)
   15b90:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   15b94:	00c01444 	movi	r3,81
   15b98:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   15b9c:	00bfffc4 	movi	r2,-1
   15ba0:	dfc00017 	ldw	ra,0(sp)
   15ba4:	dec00104 	addi	sp,sp,4
   15ba8:	f800283a 	ret
   15bac:	d0a07c04 	addi	r2,gp,-32272
        ALT_ERRNO = EBADFD;
   15bb0:	00c01444 	movi	r3,81
   15bb4:	10c00015 	stw	r3,0(r2)
}
   15bb8:	00bfffc4 	movi	r2,-1
   15bbc:	f800283a 	ret

00015bc0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15bc0:	deffff04 	addi	sp,sp,-4
   15bc4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   15bc8:	0015ed00 	call	15ed0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15bcc:	00800044 	movi	r2,1
   15bd0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15bd4:	dfc00017 	ldw	ra,0(sp)
   15bd8:	dec00104 	addi	sp,sp,4
   15bdc:	f800283a 	ret

00015be0 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15be0:	01000074 	movhi	r4,1
   15be4:	d1600904 	addi	r5,gp,-32732
   15be8:	21188d04 	addi	r4,r4,25140
   15bec:	0015df01 	jmpi	15df0 <alt_dev_llist_insert>

00015bf0 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   15bf0:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   15bf4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   15bf8:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   15bfc:	3a10000c 	andi	r8,r7,16384
  while (ptr < end)
   15c00:	11800536 	bltu	r2,r6,15c18 <altera_avalon_jtag_uart_read+0x28>
      break;   
    
  }

  if (ptr != buffer)
   15c04:	11400b1e 	bne	r2,r5,15c34 <altera_avalon_jtag_uart_read+0x44>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   15c08:	39d0000c 	andi	r7,r7,16384
   15c0c:	38000c1e 	bne	r7,zero,15c40 <altera_avalon_jtag_uart_read+0x50>
    return -EWOULDBLOCK;
  else
    return -EIO;
   15c10:	00bffec4 	movi	r2,-5
}
   15c14:	f800283a 	ret
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15c18:	20c00037 	ldwio	r3,0(r4)
    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   15c1c:	1a60000c 	andi	r9,r3,32768
   15c20:	48000326 	beq	r9,zero,15c30 <altera_avalon_jtag_uart_read+0x40>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15c24:	10c00005 	stb	r3,0(r2)
   15c28:	10800044 	addi	r2,r2,1
   15c2c:	003ff406 	br	15c00 <altera_avalon_jtag_uart_read+0x10>
    else if (ptr != buffer)
   15c30:	11400226 	beq	r2,r5,15c3c <altera_avalon_jtag_uart_read+0x4c>
    return ptr - buffer;
   15c34:	1145c83a 	sub	r2,r2,r5
   15c38:	f800283a 	ret
    else if(flags & O_NONBLOCK)
   15c3c:	403ff026 	beq	r8,zero,15c00 <altera_avalon_jtag_uart_read+0x10>
    return -EWOULDBLOCK;
   15c40:	00bffd44 	movi	r2,-11
   15c44:	f800283a 	ret

00015c48 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   15c48:	21000017 	ldw	r4,0(r4)
{
   15c4c:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
   15c50:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   15c54:	29800136 	bltu	r5,r6,15c5c <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   15c58:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   15c5c:	20c00137 	ldwio	r3,4(r4)
   15c60:	18ffffec 	andhi	r3,r3,65535
   15c64:	183ffb26 	beq	r3,zero,15c54 <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   15c68:	28c00007 	ldb	r3,0(r5)
   15c6c:	29400044 	addi	r5,r5,1
   15c70:	20c00035 	stwio	r3,0(r4)
   15c74:	003ff706 	br	15c54 <altera_avalon_jtag_uart_write+0xc>

00015c78 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   15c78:	d1600904 	addi	r5,gp,-32732
   15c7c:	0015e5c1 	jmpi	15e5c <alt_find_dev>

00015c80 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   15c80:	20800a17 	ldw	r2,40(r4)
   15c84:	10800023 	ldbuio	r2,0(r2)
   15c88:	28800005 	stb	r2,0(r5)

	return 0;
}
   15c8c:	0005883a 	mov	r2,zero
   15c90:	f800283a 	ret

00015c94 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15c94:	20800a17 	ldw	r2,40(r4)
   15c98:	29400fcc 	andi	r5,r5,63
   15c9c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15ca0:	20800a17 	ldw	r2,40(r4)
   15ca4:	10800063 	ldbuio	r2,1(r2)
   15ca8:	30800005 	stb	r2,0(r6)

	return 0;
}
   15cac:	0005883a 	mov	r2,zero
   15cb0:	f800283a 	ret

00015cb4 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15cb4:	20800a17 	ldw	r2,40(r4)
   15cb8:	29400fcc 	andi	r5,r5,63
   15cbc:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   15cc0:	20800a17 	ldw	r2,40(r4)
   15cc4:	11800065 	stbio	r6,1(r2)

	return 0;
}
   15cc8:	0005883a 	mov	r2,zero
   15ccc:	f800283a 	ret

00015cd0 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15cd0:	20800a17 	ldw	r2,40(r4)
   15cd4:	00c00c84 	movi	r3,50
   15cd8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15cdc:	20800a17 	ldw	r2,40(r4)
   15ce0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15ce4:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15ce8:	10803fcc 	andi	r2,r2,255
   15cec:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15cf0:	20800a17 	ldw	r2,40(r4)
   15cf4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15cf8:	20800a17 	ldw	r2,40(r4)
   15cfc:	10800063 	ldbuio	r2,1(r2)
   15d00:	10803fcc 	andi	r2,r2,255
   15d04:	28c00017 	ldw	r3,0(r5)
   15d08:	1004923a 	slli	r2,r2,8
   15d0c:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
   15d10:	10e0000c 	andi	r3,r2,32768
   15d14:	1800031e 	bne	r3,zero,15d24 <alt_up_accelerometer_spi_read_x_axis+0x54>
	{
		*(x_axis) |= 0xFFFF0000;
   15d18:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   15d1c:	0005883a 	mov	r2,zero
   15d20:	f800283a 	ret
		*(x_axis) |= 0xFFFF0000;
   15d24:	10bffff4 	orhi	r2,r2,65535
   15d28:	003ffb06 	br	15d18 <alt_up_accelerometer_spi_read_x_axis+0x48>

00015d2c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d2c:	20800a17 	ldw	r2,40(r4)
   15d30:	00c00d04 	movi	r3,52
   15d34:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15d38:	20800a17 	ldw	r2,40(r4)
   15d3c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d40:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15d44:	10803fcc 	andi	r2,r2,255
   15d48:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d4c:	20800a17 	ldw	r2,40(r4)
   15d50:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15d54:	20800a17 	ldw	r2,40(r4)
   15d58:	10800063 	ldbuio	r2,1(r2)
   15d5c:	10803fcc 	andi	r2,r2,255
   15d60:	28c00017 	ldw	r3,0(r5)
   15d64:	1004923a 	slli	r2,r2,8
   15d68:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
   15d6c:	10e0000c 	andi	r3,r2,32768
   15d70:	1800031e 	bne	r3,zero,15d80 <alt_up_accelerometer_spi_read_y_axis+0x54>
	{
		*(y_axis) |= 0xFFFF0000;
   15d74:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   15d78:	0005883a 	mov	r2,zero
   15d7c:	f800283a 	ret
		*(y_axis) |= 0xFFFF0000;
   15d80:	10bffff4 	orhi	r2,r2,65535
   15d84:	003ffb06 	br	15d74 <alt_up_accelerometer_spi_read_y_axis+0x48>

00015d88 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d88:	20800a17 	ldw	r2,40(r4)
   15d8c:	00c00d84 	movi	r3,54
   15d90:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15d94:	20800a17 	ldw	r2,40(r4)
   15d98:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15d9c:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   15da0:	10803fcc 	andi	r2,r2,255
   15da4:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   15da8:	20800a17 	ldw	r2,40(r4)
   15dac:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   15db0:	20800a17 	ldw	r2,40(r4)
   15db4:	10800063 	ldbuio	r2,1(r2)
   15db8:	10803fcc 	andi	r2,r2,255
   15dbc:	28c00017 	ldw	r3,0(r5)
   15dc0:	1004923a 	slli	r2,r2,8
   15dc4:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
   15dc8:	10e0000c 	andi	r3,r2,32768
   15dcc:	1800031e 	bne	r3,zero,15ddc <alt_up_accelerometer_spi_read_z_axis+0x54>
	{
		*(z_axis) |= 0xFFFF0000;
   15dd0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   15dd4:	0005883a 	mov	r2,zero
   15dd8:	f800283a 	ret
		*(z_axis) |= 0xFFFF0000;
   15ddc:	10bffff4 	orhi	r2,r2,65535
   15de0:	003ffb06 	br	15dd0 <alt_up_accelerometer_spi_read_z_axis+0x48>

00015de4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15de4:	f800283a 	ret

00015de8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   15de8:	3005883a 	mov	r2,r6
  return len;
}
   15dec:	f800283a 	ret

00015df0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15df0:	20000226 	beq	r4,zero,15dfc <alt_dev_llist_insert+0xc>
   15df4:	20800217 	ldw	r2,8(r4)
   15df8:	10000b1e 	bne	r2,zero,15e28 <alt_dev_llist_insert+0x38>
   15dfc:	d0a00d17 	ldw	r2,-32716(gp)
   15e00:	10001126 	beq	r2,zero,15e48 <alt_dev_llist_insert+0x58>
{
   15e04:	deffff04 	addi	sp,sp,-4
   15e08:	dfc00015 	stw	ra,0(sp)
   15e0c:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
   15e10:	00c00584 	movi	r3,22
   15e14:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   15e18:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   15e1c:	dfc00017 	ldw	ra,0(sp)
   15e20:	dec00104 	addi	sp,sp,4
   15e24:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   15e28:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
   15e2c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   15e30:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   15e34:	28800017 	ldw	r2,0(r5)
   15e38:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   15e3c:	29000015 	stw	r4,0(r5)
  return 0;  
   15e40:	0005883a 	mov	r2,zero
   15e44:	f800283a 	ret
   15e48:	d0a07c04 	addi	r2,gp,-32272
    ALT_ERRNO = EINVAL;
   15e4c:	00c00584 	movi	r3,22
   15e50:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   15e54:	00bffa84 	movi	r2,-22
}
   15e58:	f800283a 	ret

00015e5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15e5c:	defffb04 	addi	sp,sp,-20
   15e60:	dcc00315 	stw	r19,12(sp)
   15e64:	dc800215 	stw	r18,8(sp)
   15e68:	dc400115 	stw	r17,4(sp)
   15e6c:	dc000015 	stw	r16,0(sp)
   15e70:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
   15e74:	2c000017 	ldw	r16,0(r5)
{
   15e78:	2027883a 	mov	r19,r4
   15e7c:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
   15e80:	00157980 	call	15798 <strlen>
   15e84:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15e88:	8440091e 	bne	r16,r17,15eb0 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   15e8c:	0021883a 	mov	r16,zero
}
   15e90:	8005883a 	mov	r2,r16
   15e94:	dfc00417 	ldw	ra,16(sp)
   15e98:	dcc00317 	ldw	r19,12(sp)
   15e9c:	dc800217 	ldw	r18,8(sp)
   15ea0:	dc400117 	ldw	r17,4(sp)
   15ea4:	dc000017 	ldw	r16,0(sp)
   15ea8:	dec00504 	addi	sp,sp,20
   15eac:	f800283a 	ret
    if (!memcmp (next->name, name, len))
   15eb0:	81000217 	ldw	r4,8(r16)
   15eb4:	900d883a 	mov	r6,r18
   15eb8:	980b883a 	mov	r5,r19
   15ebc:	0015f480 	call	15f48 <memcmp>
   15ec0:	103ff326 	beq	r2,zero,15e90 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
   15ec4:	84000017 	ldw	r16,0(r16)
   15ec8:	003fef06 	br	15e88 <alt_find_dev+0x2c>

00015ecc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15ecc:	f800283a 	ret

00015ed0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   15ed0:	000170fa 	wrctl	ienable,zero
}
   15ed4:	f800283a 	ret

00015ed8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   15ed8:	213ffe84 	addi	r4,r4,-6
   15edc:	20800428 	cmpgeui	r2,r4,16
   15ee0:	1000151e 	bne	r2,zero,15f38 <alt_exception_cause_generated_bad_addr+0x60>
   15ee4:	200890ba 	slli	r4,r4,2
   15ee8:	00800074 	movhi	r2,1
   15eec:	2085883a 	add	r2,r4,r2
   15ef0:	1097be17 	ldw	r2,24312(r2)
   15ef4:	1000683a 	jmp	r2
   15ef8:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
   15efc:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
   15f00:	00015f38 	rdprs	zero,zero,1404
   15f04:	00015f38 	rdprs	zero,zero,1404
   15f08:	00015f38 	rdprs	zero,zero,1404
   15f0c:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
   15f10:	00015f38 	rdprs	zero,zero,1404
   15f14:	00015f38 	rdprs	zero,zero,1404
   15f18:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
   15f1c:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
   15f20:	00015f38 	rdprs	zero,zero,1404
   15f24:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
   15f28:	00015f38 	rdprs	zero,zero,1404
   15f2c:	00015f38 	rdprs	zero,zero,1404
   15f30:	00015f38 	rdprs	zero,zero,1404
   15f34:	00015f40 	call	15f4 <__alt_mem_onchip_memory-0xea0c>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15f38:	0005883a 	mov	r2,zero
   15f3c:	f800283a 	ret
   15f40:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   15f44:	f800283a 	ret

00015f48 <memcmp>:
   15f48:	0007883a 	mov	r3,zero
   15f4c:	30c0021e 	bne	r6,r3,15f58 <memcmp+0x10>
   15f50:	0005883a 	mov	r2,zero
   15f54:	f800283a 	ret
   15f58:	20c5883a 	add	r2,r4,r3
   15f5c:	18c00044 	addi	r3,r3,1
   15f60:	28cf883a 	add	r7,r5,r3
   15f64:	10800003 	ldbu	r2,0(r2)
   15f68:	39ffffc3 	ldbu	r7,-1(r7)
   15f6c:	11fff726 	beq	r2,r7,15f4c <memcmp+0x4>
   15f70:	11c5c83a 	sub	r2,r2,r7
   15f74:	f800283a 	ret

00015f78 <memcpy>:
   15f78:	2005883a 	mov	r2,r4
   15f7c:	0007883a 	mov	r3,zero
   15f80:	30c0011e 	bne	r6,r3,15f88 <memcpy+0x10>
   15f84:	f800283a 	ret
   15f88:	28cf883a 	add	r7,r5,r3
   15f8c:	39c00003 	ldbu	r7,0(r7)
   15f90:	10c9883a 	add	r4,r2,r3
   15f94:	18c00044 	addi	r3,r3,1
   15f98:	21c00005 	stb	r7,0(r4)
   15f9c:	003ff806 	br	15f80 <memcpy+0x8>
